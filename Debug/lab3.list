
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002888  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002994  08002994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029fc  080029fc  00004064  2**0
                  CONTENTS
  4 .ARM          00000000  080029fc  080029fc  00004064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029fc  080029fc  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029fc  080029fc  000039fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a00  08002a00  00003a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002a04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000064  08002a68  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08002a68  00004214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ac0  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2a  00000000  00000000  00009b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  0000b678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004aa  00000000  00000000  0000bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f3b  00000000  00000000  0000c192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ec7  00000000  00000000  000230cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835a4  00000000  00000000  0002bf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af538  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000af57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b1190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	0800297c 	.word	0x0800297c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	0800297c 	.word	0x0800297c

0800014c <LCD_init>:
#define LCD_SFT_MOV   0x14



void LCD_init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//	 LCD_Write_Command(0x08);
//	 LCD_Write_Command(0x01);
//	 LCD_Write_Command(0x04);
	// ---------------------------------------------------------

	 HAL_Delay(15);
 8000150:	200f      	movs	r0, #15
 8000152:	f000 fcfd 	bl	8000b50 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);//8-bit display
 8000156:	2038      	movs	r0, #56	@ 0x38
 8000158:	f000 f834 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 800015c:	2005      	movs	r0, #5
 800015e:	f000 fcf7 	bl	8000b50 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 8000162:	2038      	movs	r0, #56	@ 0x38
 8000164:	f000 f82e 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 8000168:	2005      	movs	r0, #5
 800016a:	f000 fcf1 	bl	8000b50 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 800016e:	2038      	movs	r0, #56	@ 0x38
 8000170:	f000 f828 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 8000174:	2005      	movs	r0, #5
 8000176:	f000 fceb 	bl	8000b50 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 800017a:	2038      	movs	r0, #56	@ 0x38
 800017c:	f000 f822 	bl	80001c4 <LCD_Write_Command>

	 //LCD_Write_Command(0x08);
	 //LCD_Write_Command(LCD_2_LINE_8_BITS);

	 //LCD_Write_Command(0x01);
	 LCD_Write_Command(0x3F); // sets lines
 8000180:	203f      	movs	r0, #63	@ 0x3f
 8000182:	f000 f81f 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 8000186:	2001      	movs	r0, #1
 8000188:	f000 fce2 	bl	8000b50 <HAL_Delay>
	 //LCD_Write_Command(0x06);
	 LCD_Write_Command(0x08); // display off
 800018c:	2008      	movs	r0, #8
 800018e:	f000 f819 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 8000192:	2001      	movs	r0, #1
 8000194:	f000 fcdc 	bl	8000b50 <HAL_Delay>
	 //LCD_Write_Command(0x0c);
	 LCD_Write_Command(0x01); // display clear
 8000198:	2001      	movs	r0, #1
 800019a:	f000 f813 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fcd6 	bl	8000b50 <HAL_Delay>

	 LCD_Write_Command(0x06); // entry mode set
 80001a4:	2006      	movs	r0, #6
 80001a6:	f000 f80d 	bl	80001c4 <LCD_Write_Command>
	 // HAL_Delay(1);
	 // turn on display:
	 LCD_Write_Command(0x0C); // display on ?
 80001aa:	200c      	movs	r0, #12
 80001ac:	f000 f80a 	bl	80001c4 <LCD_Write_Command>


}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <LCD_Clear>:

void LCD_Clear(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
 LCD_Write_Command(0x01);//
 80001b8:	2001      	movs	r0, #1
 80001ba:	f000 f803 	bl	80001c4 <LCD_Write_Command>
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <LCD_Write_Command>:


void LCD_Write_Command(uchar Com)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
 // while(LCD_Read_State());
 //	 HAL_Delay(10);
 //	 unsigned int Read_Dat = 0; //BJ


	HAL_Delay(10);
 80001ce:	200a      	movs	r0, #10
 80001d0:	f000 fcbe 	bl	8000b50 <HAL_Delay>
	// unsigned int Read_Dat = 0; //BJ

	 HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin, GPIO_PIN_RESET); // LCD_RS = 0;
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001da:	4811      	ldr	r0, [pc, #68]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001dc:	f001 fa5a 	bl	8001694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_RW_Pin, GPIO_PIN_RESET); // LCD_RW = 0;
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e6:	480e      	ldr	r0, [pc, #56]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001e8:	f001 fa54 	bl	8001694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_SET); //LCD_E_Pin = 1;
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f2:	480b      	ldr	r0, [pc, #44]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001f4:	f001 fa4e 	bl	8001694 <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f000 fca9 	bl	8000b50 <HAL_Delay>

	 LCD_PORT = Com;
 80001fe:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <LCD_Write_Command+0x60>)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	60d3      	str	r3, [r2, #12]

	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_RESET);  //LCD_E_Pin =0;
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800020a:	4805      	ldr	r0, [pc, #20]	@ (8000220 <LCD_Write_Command+0x5c>)
 800020c:	f001 fa42 	bl	8001694 <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fc9d 	bl	8000b50 <HAL_Delay>
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40010c00 	.word	0x40010c00
 8000224:	40010800 	.word	0x40010800

08000228 <LCD_Write_Data>:

void LCD_Write_Data(uchar dat)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
 //while(LCD_Read_State());
	 HAL_Delay(1);
 8000232:	2001      	movs	r0, #1
 8000234:	f000 fc8c 	bl	8000b50 <HAL_Delay>

	 HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin, GPIO_PIN_SET); //LCD_RS = 1;
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800023e:	4811      	ldr	r0, [pc, #68]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000240:	f001 fa28 	bl	8001694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_RW_Pin, GPIO_PIN_RESET); // LCD_RW = 0;
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024a:	480e      	ldr	r0, [pc, #56]	@ (8000284 <LCD_Write_Data+0x5c>)
 800024c:	f001 fa22 	bl	8001694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_SET); //LCD_E_Pin = 1;
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000256:	480b      	ldr	r0, [pc, #44]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000258:	f001 fa1c 	bl	8001694 <HAL_GPIO_WritePin>

	 HAL_Delay(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 fc77 	bl	8000b50 <HAL_Delay>
	 //Delay_ms(1);

	 LCD_PORT = dat;
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <LCD_Write_Data+0x60>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	60d3      	str	r3, [r2, #12]

	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_RESET);  //Set LCD_E = 0;
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800026e:	4805      	ldr	r0, [pc, #20]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000270:	f001 fa10 	bl	8001694 <HAL_GPIO_WritePin>

	 HAL_Delay(1);
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fc6b 	bl	8000b50 <HAL_Delay>

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40010c00 	.word	0x40010c00
 8000288:	40010800 	.word	0x40010800

0800028c <LCD_Set_Position>:

 return state;
}

void LCD_Set_Position(uchar x,uchar y)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	460a      	mov	r2, r1
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	4613      	mov	r3, r2
 800029a:	71bb      	strb	r3, [r7, #6]
	 if(y==0)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d106      	bne.n	80002b0 <LCD_Set_Position+0x24>
	 {
		 LCD_Write_Command(0x80+x);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	3b80      	subs	r3, #128	@ 0x80
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff8b 	bl	80001c4 <LCD_Write_Command>
	 {
		 LCD_Write_Command(0xc0+x);
	 }
	 else;

}
 80002ae:	e008      	b.n	80002c2 <LCD_Set_Position+0x36>
	 else if(y==1)
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d105      	bne.n	80002c2 <LCD_Set_Position+0x36>
		 LCD_Write_Command(0xc0+x);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	3b40      	subs	r3, #64	@ 0x40
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff81 	bl	80001c4 <LCD_Write_Command>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <LCD_Display_Char>:

void LCD_Display_Char(uchar Char,uchar x,uchar y)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	460b      	mov	r3, r1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	4613      	mov	r3, r2
 80002da:	717b      	strb	r3, [r7, #5]
	LCD_Set_Position(x,y);
 80002dc:	797a      	ldrb	r2, [r7, #5]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffd2 	bl	800028c <LCD_Set_Position>
	LCD_Write_Data(Char);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff9c 	bl	8000228 <LCD_Write_Data>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <LCD_Display_String>:

void LCD_Display_String(uchar x,uchar y,uchar *str)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	603a      	str	r2, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	460b      	mov	r3, r1
 8000306:	71bb      	strb	r3, [r7, #6]
	LCD_Set_Position(x,y);
 8000308:	79ba      	ldrb	r2, [r7, #6]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffbc 	bl	800028c <LCD_Set_Position>
	while(*str !='\0')
 8000314:	e009      	b.n	800032a <LCD_Display_String+0x32>
	{
		LCD_Write_Data(*str++);
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	1c5a      	adds	r2, r3, #1
 800031a:	603a      	str	r2, [r7, #0]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff82 	bl	8000228 <LCD_Write_Data>
		HAL_Delay(1);
 8000324:	2001      	movs	r0, #1
 8000326:	f000 fc13 	bl	8000b50 <HAL_Delay>
	while(*str !='\0')
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1f1      	bne.n	8000316 <LCD_Display_String+0x1e>
	}
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800034e:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <MX_ADC1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000352:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000358:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000364:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000366:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800036a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036c:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000372:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	480d      	ldr	r0, [pc, #52]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800037a:	f000 fc0d 	bl	8000b98 <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000384:	f000 faa4 	bl	80008d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000388:	2308      	movs	r3, #8
 800038a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038c:	2301      	movs	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800039a:	f000 fda7 	bl	8000eec <HAL_ADC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003a4:	f000 fa94 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000080 	.word	0x20000080
 80003b4:	40012400 	.word	0x40012400

080003b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a18      	ldr	r2, [pc, #96]	@ (8000434 <HAL_ADC_MspInit+0x7c>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d129      	bne.n	800042c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003d8:	4b17      	ldr	r3, [pc, #92]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a16      	ldr	r2, [pc, #88]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0308 	and.w	r3, r3, #8
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = load_cell_Pin;
 8000408:	2301      	movs	r3, #1
 800040a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040c:	2303      	movs	r3, #3
 800040e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(load_cell_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4809      	ldr	r0, [pc, #36]	@ (800043c <HAL_ADC_MspInit+0x84>)
 8000418:	f000 ffb8 	bl	800138c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	2012      	movs	r0, #18
 8000422:	f000 ff7c 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000426:	2012      	movs	r0, #18
 8000428:	f000 ff95 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40012400 	.word	0x40012400
 8000438:	40021000 	.word	0x40021000
 800043c:	40010c00 	.word	0x40010c00

08000440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000454:	4b45      	ldr	r3, [pc, #276]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a44      	ldr	r2, [pc, #272]	@ (800056c <MX_GPIO_Init+0x12c>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b42      	ldr	r3, [pc, #264]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046c:	4b3f      	ldr	r3, [pc, #252]	@ (800056c <MX_GPIO_Init+0x12c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a3e      	ldr	r2, [pc, #248]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b3c      	ldr	r3, [pc, #240]	@ (800056c <MX_GPIO_Init+0x12c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0320 	and.w	r3, r3, #32
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b39      	ldr	r3, [pc, #228]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a38      	ldr	r2, [pc, #224]	@ (800056c <MX_GPIO_Init+0x12c>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b36      	ldr	r3, [pc, #216]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b33      	ldr	r3, [pc, #204]	@ (800056c <MX_GPIO_Init+0x12c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a32      	ldr	r2, [pc, #200]	@ (800056c <MX_GPIO_Init+0x12c>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b30      	ldr	r3, [pc, #192]	@ (800056c <MX_GPIO_Init+0x12c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 80004b4:	2200      	movs	r2, #0
 80004b6:	21ff      	movs	r1, #255	@ 0xff
 80004b8:	482d      	ldr	r0, [pc, #180]	@ (8000570 <MX_GPIO_Init+0x130>)
 80004ba:	f001 f8eb 	bl	8001694 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 41e8 	mov.w	r1, #29696	@ 0x7400
 80004c4:	482b      	ldr	r0, [pc, #172]	@ (8000574 <MX_GPIO_Init+0x134>)
 80004c6:	f001 f8e5 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 80004ca:	23ff      	movs	r3, #255	@ 0xff
 80004cc:	613b      	str	r3, [r7, #16]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4823      	ldr	r0, [pc, #140]	@ (8000570 <MX_GPIO_Init+0x130>)
 80004e2:	f000 ff53 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	481d      	ldr	r0, [pc, #116]	@ (8000574 <MX_GPIO_Init+0x134>)
 8000500:	f000 ff44 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
 8000504:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000512:	2301      	movs	r3, #1
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4815      	ldr	r0, [pc, #84]	@ (8000574 <MX_GPIO_Init+0x134>)
 800051e:	f000 ff35 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dec_Pin;
 8000522:	2320      	movs	r3, #32
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000526:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <MX_GPIO_Init+0x138>)
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dec_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	480f      	ldr	r0, [pc, #60]	@ (8000574 <MX_GPIO_Init+0x134>)
 8000536:	f000 ff29 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = inc_Pin|button_Pin;
 800053a:	23c0      	movs	r3, #192	@ 0xc0
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <MX_GPIO_Init+0x138>)
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000542:	2301      	movs	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4809      	ldr	r0, [pc, #36]	@ (8000574 <MX_GPIO_Init+0x134>)
 800054e:	f000 ff1d 	bl	800138c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2101      	movs	r1, #1
 8000556:	2017      	movs	r0, #23
 8000558:	f000 fee1 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800055c:	2017      	movs	r0, #23
 800055e:	f000 fefa 	bl	8001356 <HAL_NVIC_EnableIRQ>

}
 8000562:	bf00      	nop
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000
 8000570:	40010800 	.word	0x40010800
 8000574:	40010c00 	.word	0x40010c00
 8000578:	10210000 	.word	0x10210000

0800057c <inc_time>:
int ph = 0;
int pm = 0;
int ps = 0;
char mode = 't';// t = timer, p = pause, s = set

void inc_time(int* _h, int* _m, int* _s, char* str){
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af02      	add	r7, sp, #8
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
		*(_s) = *(_s)+1;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
			if(*_s == 60){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b3c      	cmp	r3, #60	@ 0x3c
 800059a:	d113      	bne.n	80005c4 <inc_time+0x48>
				*_s = 0;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
				*(_m) = *(_m)+1;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	601a      	str	r2, [r3, #0]
				if(*_m == 60){
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80005b2:	d107      	bne.n	80005c4 <inc_time+0x48>
					*_m = 0;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
					*(_h)= *(_h)+1;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	601a      	str	r2, [r3, #0]
				}
			}

			int buffer = sprintf(str, "%d : %d : %d", *_h, *_m,*_s);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	6819      	ldr	r1, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	460b      	mov	r3, r1
 80005d4:	4904      	ldr	r1, [pc, #16]	@ (80005e8 <inc_time+0x6c>)
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f001 fd20 	bl	800201c <siprintf>
 80005dc:	6178      	str	r0, [r7, #20]

}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08002994 	.word	0x08002994

080005ec <inc_pause_time>:

void inc_pause_time(char* str){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
		inc_time(&ph, &pm, &ps, str);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <inc_pause_time+0x1c>)
 80005f8:	4904      	ldr	r1, [pc, #16]	@ (800060c <inc_pause_time+0x20>)
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <inc_pause_time+0x24>)
 80005fc:	f7ff ffbe 	bl	800057c <inc_time>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000c0 	.word	0x200000c0
 800060c:	200000bc 	.word	0x200000bc
 8000610:	200000b8 	.word	0x200000b8

08000614 <dec_timer_time>:

void dec_timer_time(char* str){
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	if(s > 0 || m  > 0|| h > 0){
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <dec_timer_time+0x80>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	dc07      	bgt.n	8000634 <dec_timer_time+0x20>
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <dec_timer_time+0x84>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	dc03      	bgt.n	8000634 <dec_timer_time+0x20>
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <dec_timer_time+0x88>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	dd2b      	ble.n	800068c <dec_timer_time+0x78>
		s--;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <dec_timer_time+0x80>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <dec_timer_time+0x80>)
 800063c:	6013      	str	r3, [r2, #0]
			if(s == -1){
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <dec_timer_time+0x80>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000646:	d114      	bne.n	8000672 <dec_timer_time+0x5e>
				m--;
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <dec_timer_time+0x84>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <dec_timer_time+0x84>)
 8000650:	6013      	str	r3, [r2, #0]
				s = 59;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <dec_timer_time+0x80>)
 8000654:	223b      	movs	r2, #59	@ 0x3b
 8000656:	601a      	str	r2, [r3, #0]
				if(m == -1){
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <dec_timer_time+0x84>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000660:	d107      	bne.n	8000672 <dec_timer_time+0x5e>
					h--;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <dec_timer_time+0x88>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <dec_timer_time+0x88>)
 800066a:	6013      	str	r3, [r2, #0]
					m = 59;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <dec_timer_time+0x84>)
 800066e:	223b      	movs	r2, #59	@ 0x3b
 8000670:	601a      	str	r2, [r3, #0]
				}
			}
		int buffer = sprintf(str, "%d : %d : %d", h, m, s);
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <dec_timer_time+0x88>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <dec_timer_time+0x84>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <dec_timer_time+0x80>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	460b      	mov	r3, r1
 8000682:	4907      	ldr	r1, [pc, #28]	@ (80006a0 <dec_timer_time+0x8c>)
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fcc9 	bl	800201c <siprintf>
 800068a:	60f8      	str	r0, [r7, #12]
	}
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	200000b4 	.word	0x200000b4
 800069c:	200000b0 	.word	0x200000b0
 80006a0:	08002994 	.word	0x08002994

080006a4 <set_time>:

void set_time(int _h, int _m, int _s, char* str){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	603b      	str	r3, [r7, #0]
	h = _h;
 80006b2:	4a0d      	ldr	r2, [pc, #52]	@ (80006e8 <set_time+0x44>)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	6013      	str	r3, [r2, #0]
	m = _m;
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <set_time+0x48>)
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	6013      	str	r3, [r2, #0]
	s = _s;
 80006be:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <set_time+0x4c>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6013      	str	r3, [r2, #0]
	int buffer = sprintf(str, "%d : %d : %d", h, m, s);
 80006c4:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <set_time+0x44>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <set_time+0x48>)
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <set_time+0x4c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	460b      	mov	r3, r1
 80006d4:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <set_time+0x50>)
 80006d6:	6838      	ldr	r0, [r7, #0]
 80006d8:	f001 fca0 	bl	800201c <siprintf>
 80006dc:	6178      	str	r0, [r7, #20]
}
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000b0 	.word	0x200000b0
 80006ec:	200000b4 	.word	0x200000b4
 80006f0:	20000000 	.word	0x20000000
 80006f4:	08002994 	.word	0x08002994

080006f8 <perform_action>:

void perform_action(char* str){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	switch (mode){
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <perform_action+0x44>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b74      	cmp	r3, #116	@ 0x74
 8000706:	d011      	beq.n	800072c <perform_action+0x34>
 8000708:	2b74      	cmp	r3, #116	@ 0x74
 800070a:	dc13      	bgt.n	8000734 <perform_action+0x3c>
 800070c:	2b70      	cmp	r3, #112	@ 0x70
 800070e:	d002      	beq.n	8000716 <perform_action+0x1e>
 8000710:	2b73      	cmp	r3, #115	@ 0x73
 8000712:	d004      	beq.n	800071e <perform_action+0x26>
			break;
		case 't':
			dec_timer_time(str);
			break;
	}
}
 8000714:	e00e      	b.n	8000734 <perform_action+0x3c>
			inc_pause_time(str);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff68 	bl	80005ec <inc_pause_time>
			break;
 800071c:	e00a      	b.n	8000734 <perform_action+0x3c>
			set_time(0, 1, 0, str);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ffbd 	bl	80006a4 <set_time>
			break;
 800072a:	e003      	b.n	8000734 <perform_action+0x3c>
			dec_timer_time(str);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff71 	bl	8000614 <dec_timer_time>
			break;
 8000732:	bf00      	nop
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == button_Pin){
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	2b80      	cmp	r3, #128	@ 0x80
 800074e:	d10f      	bne.n	8000770 <HAL_GPIO_EXTI_Callback+0x30>
		if(mode == 't'){ //logic could be improved here but wtv
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b74      	cmp	r3, #116	@ 0x74
 8000756:	d103      	bne.n	8000760 <HAL_GPIO_EXTI_Callback+0x20>
				mode = 'p';
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x58>)
 800075a:	2270      	movs	r2, #112	@ 0x70
 800075c:	701a      	strb	r2, [r3, #0]
		} else {
			mode = 't';
		}

	}
}
 800075e:	e015      	b.n	800078c <HAL_GPIO_EXTI_Callback+0x4c>
			} else if (mode == 'p'){
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x58>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b70      	cmp	r3, #112	@ 0x70
 8000766:	d111      	bne.n	800078c <HAL_GPIO_EXTI_Callback+0x4c>
				mode = 't';
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x58>)
 800076a:	2274      	movs	r2, #116	@ 0x74
 800076c:	701a      	strb	r2, [r3, #0]
}
 800076e:	e00d      	b.n	800078c <HAL_GPIO_EXTI_Callback+0x4c>
	} else if(GPIO_Pin == inc_Pin){
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	2b40      	cmp	r3, #64	@ 0x40
 8000774:	d10a      	bne.n	800078c <HAL_GPIO_EXTI_Callback+0x4c>
		if(mode != 's'){
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x58>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b73      	cmp	r3, #115	@ 0x73
 800077c:	d003      	beq.n	8000786 <HAL_GPIO_EXTI_Callback+0x46>
			mode = 's';
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x58>)
 8000780:	2273      	movs	r2, #115	@ 0x73
 8000782:	701a      	strb	r2, [r3, #0]
}
 8000784:	e002      	b.n	800078c <HAL_GPIO_EXTI_Callback+0x4c>
			mode = 't';
 8000786:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x58>)
 8000788:	2274      	movs	r2, #116	@ 0x74
 800078a:	701a      	strb	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	@ 0x40
 80007a0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char string_val [50];
	int buffer = sprintf(string_val, "%d : %d : %d", h, m, s);
 80007a2:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <main+0x70>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <main+0x74>)
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <main+0x78>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4638      	mov	r0, r7
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	460b      	mov	r3, r1
 80007b4:	4918      	ldr	r1, [pc, #96]	@ (8000818 <main+0x7c>)
 80007b6:	f001 fc31 	bl	800201c <siprintf>
 80007ba:	6378      	str	r0, [r7, #52]	@ 0x34
	mode = 't';
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <main+0x80>)
 80007be:	2274      	movs	r2, #116	@ 0x74
 80007c0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 f963 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f82b 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f7ff fe39 	bl	8000440 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007ce:	f7ff fdb5 	bl	800033c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 80007d2:	f7ff fcbb 	bl	800014c <LCD_init>
  LCD_Clear();
 80007d6:	f7ff fced 	bl	80001b4 <LCD_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //perform_action(string_val);
	  LCD_Display_String((uchar)0, (uchar)0, (uchar*)string_val);
 80007da:	463b      	mov	r3, r7
 80007dc:	461a      	mov	r2, r3
 80007de:	2100      	movs	r1, #0
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff fd89 	bl	80002f8 <LCD_Display_String>
	  LCD_Display_Char((uchar)mode , (uchar)0, (uchar)1);
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <main+0x80>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fd6b 	bl	80002ca <LCD_Display_Char>
	  HAL_Delay(500);
 80007f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007f8:	f000 f9aa 	bl	8000b50 <HAL_Delay>
	  perform_action(string_val);
 80007fc:	463b      	mov	r3, r7
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff7a 	bl	80006f8 <perform_action>
	  LCD_Clear();
 8000804:	f7ff fcd6 	bl	80001b4 <LCD_Clear>
	  LCD_Display_String((uchar)0, (uchar)0, (uchar*)string_val);
 8000808:	bf00      	nop
 800080a:	e7e6      	b.n	80007da <main+0x3e>
 800080c:	200000b0 	.word	0x200000b0
 8000810:	200000b4 	.word	0x200000b4
 8000814:	20000000 	.word	0x20000000
 8000818:	08002994 	.word	0x08002994
 800081c:	20000004 	.word	0x20000004

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082a:	2228      	movs	r2, #40	@ 0x28
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fc14 	bl	800205c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800086c:	2300      	movs	r3, #0
 800086e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000874:	4618      	mov	r0, r3
 8000876:	f000 ff3d 	bl	80016f4 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000880:	f000 f826 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2302      	movs	r3, #2
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 f9aa 	bl	8001bf8 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008aa:	f000 f811 	bl	80008d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ae:	2302      	movs	r3, #2
 80008b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 faf9 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008c4:	f000 f804 	bl	80008d0 <Error_Handler>
  }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	@ 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <HAL_MspInit+0x5c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x5c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <HAL_MspInit+0x60>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_MspInit+0x60>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <NMI_Handler+0x4>

08000948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <MemManage_Handler+0x4>

08000958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <UsageFault_Handler+0x4>

08000968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8c2 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <ADC1_2_IRQHandler+0x10>)
 800099e:	f000 f9d3 	bl	8000d48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000080 	.word	0x20000080

080009ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(dec_Pin);
 80009b0:	2020      	movs	r0, #32
 80009b2:	f000 fe87 	bl	80016c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(inc_Pin);
 80009b6:	2040      	movs	r0, #64	@ 0x40
 80009b8:	f000 fe84 	bl	80016c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80009bc:	2080      	movs	r0, #128	@ 0x80
 80009be:	f000 fe81 	bl	80016c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f001 fb38 	bl	800206c <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20005000 	.word	0x20005000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	200000c4 	.word	0x200000c4
 8000a30:	20000218 	.word	0x20000218

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff fff8 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a46:	490c      	ldr	r1, [pc, #48]	@ (8000a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a48:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a5c:	4c09      	ldr	r4, [pc, #36]	@ (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f001 fb05 	bl	8002078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fe95 	bl	800079c <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000a7c:	08002a04 	.word	0x08002a04
  ldr r2, =_sbss
 8000a80:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000a84:	20000214 	.word	0x20000214

08000a88 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <CAN1_RX1_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 fc33 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff ff18 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fc4b 	bl	8001372 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 fc13 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000010 	.word	0x20000010
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000010 	.word	0x20000010
 8000b38:	200000c8 	.word	0x200000c8

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	@ (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	200000c8 	.word	0x200000c8

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000010 	.word	0x20000010

08000b98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0be      	b.n	8000d38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fbee 	bl	80003b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fa7d 	bl	80010dc <ADC_ConversionStop_Disable>
 8000be2:	4603      	mov	r3, r0
 8000be4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8099 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8095 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c04:	f023 0302 	bic.w	r3, r3, #2
 8000c08:	f043 0202 	orr.w	r2, r3, #2
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7b1b      	ldrb	r3, [r3, #12]
 8000c1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c30:	d003      	beq.n	8000c3a <HAL_ADC_Init+0xa2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d102      	bne.n	8000c40 <HAL_ADC_Init+0xa8>
 8000c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3e:	e000      	b.n	8000c42 <HAL_ADC_Init+0xaa>
 8000c40:	2300      	movs	r3, #0
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7d1b      	ldrb	r3, [r3, #20]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d119      	bne.n	8000c84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7b1b      	ldrb	r3, [r3, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	035a      	lsls	r2, r3, #13
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	e00b      	b.n	8000c84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c70:	f043 0220 	orr.w	r2, r3, #32
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7c:	f043 0201 	orr.w	r2, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_ADC_Init+0x1a8>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cb4:	d003      	beq.n	8000cbe <HAL_ADC_Init+0x126>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d104      	bne.n	8000cc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_ADC_Init+0x1ac>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d10b      	bne.n	8000d04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d02:	e018      	b.n	8000d36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d08:	f023 0312 	bic.w	r3, r3, #18
 8000d0c:	f043 0210 	orr.w	r2, r3, #16
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d18:	f043 0201 	orr.w	r2, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d24:	e007      	b.n	8000d36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2a:	f043 0210 	orr.w	r2, r3, #16
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	ffe1f7fd 	.word	0xffe1f7fd
 8000d44:	ff1f0efe 	.word	0xff1f0efe

08000d48 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f003 0320 	and.w	r3, r3, #32
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d03e      	beq.n	8000de8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d039      	beq.n	8000de8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d96:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d9a:	d11d      	bne.n	8000dd8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d119      	bne.n	8000dd8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0220 	bic.w	r2, r2, #32
 8000db2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d105      	bne.n	8000dd8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f874 	bl	8000ec6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f06f 0212 	mvn.w	r2, #18
 8000de6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d04d      	beq.n	8000e8e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d048      	beq.n	8000e8e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d105      	bne.n	8000e14 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000e1e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000e22:	d012      	beq.n	8000e4a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d125      	bne.n	8000e7e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e3c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e40:	d11d      	bne.n	8000e7e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d119      	bne.n	8000e7e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e58:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d105      	bne.n	8000e7e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f96d 	bl	800115e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f06f 020c 	mvn.w	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d012      	beq.n	8000ebe <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00d      	beq.n	8000ebe <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f812 	bl	8000ed8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f06f 0201 	mvn.w	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
	...

08000eec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_ADC_ConfigChannel+0x20>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e0dc      	b.n	80010c6 <HAL_ADC_ConfigChannel+0x1da>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	d81c      	bhi.n	8000f56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3b05      	subs	r3, #5
 8000f2e:	221f      	movs	r2, #31
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4019      	ands	r1, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	3b05      	subs	r3, #5
 8000f48:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f54:	e03c      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d81c      	bhi.n	8000f98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b23      	subs	r3, #35	@ 0x23
 8000f70:	221f      	movs	r2, #31
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4019      	ands	r1, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3b23      	subs	r3, #35	@ 0x23
 8000f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f96:	e01b      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b41      	subs	r3, #65	@ 0x41
 8000faa:	221f      	movs	r2, #31
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4019      	ands	r1, r3
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3b41      	subs	r3, #65	@ 0x41
 8000fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	d91c      	bls.n	8001012 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68d9      	ldr	r1, [r3, #12]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b1e      	subs	r3, #30
 8000fea:	2207      	movs	r2, #7
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4019      	ands	r1, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6898      	ldr	r0, [r3, #8]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	3b1e      	subs	r3, #30
 8001004:	fa00 f203 	lsl.w	r2, r0, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	e019      	b.n	8001046 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6919      	ldr	r1, [r3, #16]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	2207      	movs	r2, #7
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4019      	ands	r1, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	6898      	ldr	r0, [r3, #8]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	fa00 f203 	lsl.w	r2, r0, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b10      	cmp	r3, #16
 800104c:	d003      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001052:	2b11      	cmp	r3, #17
 8001054:	d132      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1d      	ldr	r2, [pc, #116]	@ (80010d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d125      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d126      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800107c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b10      	cmp	r3, #16
 8001084:	d11a      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0c9a      	lsrs	r2, r3, #18
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109c:	e002      	b.n	80010a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f9      	bne.n	800109e <HAL_ADC_ConfigChannel+0x1b2>
 80010aa:	e007      	b.n	80010bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b0:	f043 0220 	orr.w	r2, r3, #32
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40012400 	.word	0x40012400
 80010d4:	20000008 	.word	0x20000008
 80010d8:	431bde83 	.word	0x431bde83

080010dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d12e      	bne.n	8001154 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001106:	f7ff fd19 	bl	8000b3c <HAL_GetTick>
 800110a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800110c:	e01b      	b.n	8001146 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800110e:	f7ff fd15 	bl	8000b3c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d914      	bls.n	8001146 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10d      	bne.n	8001146 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	f043 0210 	orr.w	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e007      	b.n	8001156 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d0dc      	beq.n	800110e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4906      	ldr	r1, [pc, #24]	@ (8001208 <__NVIC_EnableIRQ+0x34>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	@ (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	@ (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	@ 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff90 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff2d 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff42 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff90 	bl	8001260 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5f 	bl	800120c <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff35 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b08b      	sub	sp, #44	@ 0x2c
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e169      	b.n	8001674 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a0:	2201      	movs	r2, #1
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8158 	bne.w	800166e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4a9a      	ldr	r2, [pc, #616]	@ (800162c <HAL_GPIO_Init+0x2a0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d05e      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013c8:	4a98      	ldr	r2, [pc, #608]	@ (800162c <HAL_GPIO_Init+0x2a0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d875      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013ce:	4a98      	ldr	r2, [pc, #608]	@ (8001630 <HAL_GPIO_Init+0x2a4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d058      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013d4:	4a96      	ldr	r2, [pc, #600]	@ (8001630 <HAL_GPIO_Init+0x2a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d86f      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013da:	4a96      	ldr	r2, [pc, #600]	@ (8001634 <HAL_GPIO_Init+0x2a8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d052      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013e0:	4a94      	ldr	r2, [pc, #592]	@ (8001634 <HAL_GPIO_Init+0x2a8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d869      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013e6:	4a94      	ldr	r2, [pc, #592]	@ (8001638 <HAL_GPIO_Init+0x2ac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04c      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013ec:	4a92      	ldr	r2, [pc, #584]	@ (8001638 <HAL_GPIO_Init+0x2ac>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d863      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013f2:	4a92      	ldr	r2, [pc, #584]	@ (800163c <HAL_GPIO_Init+0x2b0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d046      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013f8:	4a90      	ldr	r2, [pc, #576]	@ (800163c <HAL_GPIO_Init+0x2b0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d85d      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d82a      	bhi.n	8001458 <HAL_GPIO_Init+0xcc>
 8001402:	2b12      	cmp	r3, #18
 8001404:	d859      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 8001406:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <HAL_GPIO_Init+0x80>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001487 	.word	0x08001487
 8001410:	08001461 	.word	0x08001461
 8001414:	08001473 	.word	0x08001473
 8001418:	080014b5 	.word	0x080014b5
 800141c:	080014bb 	.word	0x080014bb
 8001420:	080014bb 	.word	0x080014bb
 8001424:	080014bb 	.word	0x080014bb
 8001428:	080014bb 	.word	0x080014bb
 800142c:	080014bb 	.word	0x080014bb
 8001430:	080014bb 	.word	0x080014bb
 8001434:	080014bb 	.word	0x080014bb
 8001438:	080014bb 	.word	0x080014bb
 800143c:	080014bb 	.word	0x080014bb
 8001440:	080014bb 	.word	0x080014bb
 8001444:	080014bb 	.word	0x080014bb
 8001448:	080014bb 	.word	0x080014bb
 800144c:	080014bb 	.word	0x080014bb
 8001450:	08001469 	.word	0x08001469
 8001454:	0800147d 	.word	0x0800147d
 8001458:	4a79      	ldr	r2, [pc, #484]	@ (8001640 <HAL_GPIO_Init+0x2b4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145e:	e02c      	b.n	80014ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e029      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e024      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	3308      	adds	r3, #8
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e01f      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	330c      	adds	r3, #12
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e01a      	b.n	80014bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148e:	2304      	movs	r3, #4
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e013      	b.n	80014bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	611a      	str	r2, [r3, #16]
          break;
 80014a6:	e009      	b.n	80014bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	615a      	str	r2, [r3, #20]
          break;
 80014b2:	e003      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x130>
          break;
 80014ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2bff      	cmp	r3, #255	@ 0xff
 80014c0:	d801      	bhi.n	80014c6 <HAL_GPIO_Init+0x13a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e001      	b.n	80014ca <HAL_GPIO_Init+0x13e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	@ 0xff
 80014d0:	d802      	bhi.n	80014d8 <HAL_GPIO_Init+0x14c>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x152>
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	3b08      	subs	r3, #8
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	210f      	movs	r1, #15
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80b1 	beq.w	800166e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800150c:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <HAL_GPIO_Init+0x2b8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a4c      	ldr	r2, [pc, #304]	@ (8001644 <HAL_GPIO_Init+0x2b8>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <HAL_GPIO_Init+0x2b8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001524:	4a48      	ldr	r2, [pc, #288]	@ (8001648 <HAL_GPIO_Init+0x2bc>)
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a40      	ldr	r2, [pc, #256]	@ (800164c <HAL_GPIO_Init+0x2c0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1ec>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a3f      	ldr	r2, [pc, #252]	@ (8001650 <HAL_GPIO_Init+0x2c4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1e8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3e      	ldr	r2, [pc, #248]	@ (8001654 <HAL_GPIO_Init+0x2c8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1e4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3d      	ldr	r2, [pc, #244]	@ (8001658 <HAL_GPIO_Init+0x2cc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1e0>
 8001568:	2303      	movs	r3, #3
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 800156c:	2304      	movs	r3, #4
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001578:	2300      	movs	r3, #0
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158a:	492f      	ldr	r1, [pc, #188]	@ (8001648 <HAL_GPIO_Init+0x2bc>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	492c      	ldr	r1, [pc, #176]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b2:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4928      	ldr	r1, [pc, #160]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015cc:	4b23      	ldr	r3, [pc, #140]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4922      	ldr	r1, [pc, #136]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	491e      	ldr	r1, [pc, #120]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4918      	ldr	r1, [pc, #96]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4914      	ldr	r1, [pc, #80]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d021      	beq.n	8001660 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	490e      	ldr	r1, [pc, #56]	@ (800165c <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e021      	b.n	800166e <HAL_GPIO_Init+0x2e2>
 800162a:	bf00      	nop
 800162c:	10320000 	.word	0x10320000
 8001630:	10310000 	.word	0x10310000
 8001634:	10220000 	.word	0x10220000
 8001638:	10210000 	.word	0x10210000
 800163c:	10120000 	.word	0x10120000
 8001640:	10110000 	.word	0x10110000
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40011000 	.word	0x40011000
 8001658:	40011400 	.word	0x40011400
 800165c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_GPIO_Init+0x304>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4909      	ldr	r1, [pc, #36]	@ (8001690 <HAL_GPIO_Init+0x304>)
 800166a:	4013      	ands	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	f47f ae8e 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	372c      	adds	r7, #44	@ 0x2c
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	611a      	str	r2, [r3, #16]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f82c 	bl	8000740 <HAL_GPIO_EXTI_Callback>
  }
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e272      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8087 	beq.w	8001822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001714:	4b92      	ldr	r3, [pc, #584]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b04      	cmp	r3, #4
 800171e:	d00c      	beq.n	800173a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001720:	4b8f      	ldr	r3, [pc, #572]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d112      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
 800172c:	4b8c      	ldr	r3, [pc, #560]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001738:	d10b      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173a:	4b89      	ldr	r3, [pc, #548]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06c      	beq.n	8001820 <HAL_RCC_OscConfig+0x12c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d168      	bne.n	8001820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e24c      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x76>
 800175c:	4b80      	ldr	r3, [pc, #512]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a7f      	ldr	r2, [pc, #508]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e02e      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x98>
 8001772:	4b7b      	ldr	r3, [pc, #492]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7a      	ldr	r2, [pc, #488]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b78      	ldr	r3, [pc, #480]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a77      	ldr	r2, [pc, #476]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0xbc>
 8001796:	4b72      	ldr	r3, [pc, #456]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a71      	ldr	r2, [pc, #452]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 80017b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a67      	ldr	r2, [pc, #412]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff f9b4 	bl	8000b3c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff f9b0 	bl	8000b3c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	@ 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e200      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xe4>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f9a0 	bl	8000b3c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f99c 	bl	8000b3c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1ec      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x10c>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182e:	4b4c      	ldr	r3, [pc, #304]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800183a:	4b49      	ldr	r3, [pc, #292]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x18c>
 8001846:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x176>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1c0      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b3d      	ldr	r3, [pc, #244]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4939      	ldr	r1, [pc, #228]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <HAL_RCC_OscConfig+0x270>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff f955 	bl	8000b3c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff f951 	bl	8000b3c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1a1      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4927      	ldr	r1, [pc, #156]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <HAL_RCC_OscConfig+0x270>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f934 	bl	8000b3c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff f930 	bl	8000b3c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e180      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03a      	beq.n	8001978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d019      	beq.n	800193e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <HAL_RCC_OscConfig+0x274>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff f914 	bl	8000b3c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff f910 	bl	8000b3c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e160      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_RCC_OscConfig+0x26c>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	f000 fa9c 	bl	8001e74 <RCC_Delay>
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_RCC_OscConfig+0x274>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff f8fa 	bl	8000b3c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194a:	e00f      	b.n	800196c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff f8f6 	bl	8000b3c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d908      	bls.n	800196c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e146      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	42420000 	.word	0x42420000
 8001968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b92      	ldr	r3, [pc, #584]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e9      	bne.n	800194c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a6 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10d      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b88      	ldr	r3, [pc, #544]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a87      	ldr	r2, [pc, #540]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b85      	ldr	r3, [pc, #532]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b82      	ldr	r3, [pc, #520]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b7f      	ldr	r3, [pc, #508]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7e      	ldr	r2, [pc, #504]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff f8b7 	bl	8000b3c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7ff f8b3 	bl	8000b3c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	@ 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e103      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b75      	ldr	r3, [pc, #468]	@ (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x312>
 80019f8:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e02d      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x334>
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a69      	ldr	r2, [pc, #420]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b67      	ldr	r3, [pc, #412]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a66      	ldr	r2, [pc, #408]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	e01c      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_OscConfig+0x356>
 8001a30:	4b61      	ldr	r3, [pc, #388]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a60      	ldr	r2, [pc, #384]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	e00b      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a5a      	ldr	r2, [pc, #360]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b58      	ldr	r3, [pc, #352]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a57      	ldr	r2, [pc, #348]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d015      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f867 	bl	8000b3c <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff f863 	bl	8000b3c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0b1      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ee      	beq.n	8001a72 <HAL_RCC_OscConfig+0x37e>
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f851 	bl	8000b3c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7ff f84d 	bl	8000b3c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e09b      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001adc:	4b36      	ldr	r3, [pc, #216]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d061      	beq.n	8001bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d146      	bne.n	8001b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b33      	ldr	r3, [pc, #204]	@ (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff f821 	bl	8000b3c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f81d 	bl	8000b3c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e06d      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4921      	ldr	r1, [pc, #132]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b38:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a19      	ldr	r1, [r3, #32]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	491b      	ldr	r1, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe fff1 	bl	8000b3c <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7fe ffed 	bl	8000b3c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x46a>
 8001b7c:	e035      	b.n	8001bea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe ffda 	bl	8000b3c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe ffd6 	bl	8000b3c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e026      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x498>
 8001baa:	e01e      	b.n	8001bea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e019      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_RCC_OscConfig+0x500>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0d0      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b67      	ldr	r3, [pc, #412]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 0207 	bic.w	r2, r3, #7
 8001c22:	4965      	ldr	r1, [pc, #404]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c54:	4b59      	ldr	r3, [pc, #356]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a58      	ldr	r2, [pc, #352]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c6c:	4b53      	ldr	r3, [pc, #332]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b50      	ldr	r3, [pc, #320]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	494d      	ldr	r1, [pc, #308]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d040      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d115      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e073      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06b      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4936      	ldr	r1, [pc, #216]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7fe ff28 	bl	8000b3c <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7fe ff24 	bl	8000b3c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e053      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d210      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b24      	ldr	r3, [pc, #144]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4922      	ldr	r1, [pc, #136]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e032      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d86:	f000 f821 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490a      	ldr	r1, [pc, #40]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da2:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fe86 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	080029a4 	.word	0x080029a4
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x30>
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x36>
 8001dfa:	e027      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfe:	613b      	str	r3, [r7, #16]
      break;
 8001e00:	e027      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	4a17      	ldr	r2, [pc, #92]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	0c5b      	lsrs	r3, r3, #17
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	4a11      	ldr	r2, [pc, #68]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2e:	fb03 f202 	mul.w	r2, r3, r2
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e004      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	613b      	str	r3, [r7, #16]
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	693b      	ldr	r3, [r7, #16]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	080029b4 	.word	0x080029b4
 8001e6c:	080029c4 	.word	0x080029c4
 8001e70:	003d0900 	.word	0x003d0900

08001e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <RCC_Delay+0x34>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <RCC_Delay+0x38>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0a5b      	lsrs	r3, r3, #9
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e90:	bf00      	nop
  }
  while (Delay --);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	60fa      	str	r2, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f9      	bne.n	8001e90 <RCC_Delay+0x1c>
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	10624dd3 	.word	0x10624dd3

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d07d      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b4c      	ldr	r3, [pc, #304]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	61d3      	str	r3, [r2, #28]
 8001ee8:	4b49      	ldr	r3, [pc, #292]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d118      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f04:	4b43      	ldr	r3, [pc, #268]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a42      	ldr	r2, [pc, #264]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7fe fe14 	bl	8000b3c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	e008      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7fe fe10 	bl	8000b3c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	@ 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e06d      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f36:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d02e      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d027      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f54:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f64:	4b2c      	ldr	r3, [pc, #176]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f6a:	4a29      	ldr	r2, [pc, #164]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d014      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fddf 	bl	8000b3c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fddb 	bl	8000b3c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e036      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4917      	ldr	r1, [pc, #92]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4a13      	ldr	r2, [pc, #76]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	490b      	ldr	r1, [pc, #44]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4904      	ldr	r1, [pc, #16]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	42420440 	.word	0x42420440

0800201c <siprintf>:
 800201c:	b40e      	push	{r1, r2, r3}
 800201e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002022:	b500      	push	{lr}
 8002024:	b09c      	sub	sp, #112	@ 0x70
 8002026:	ab1d      	add	r3, sp, #116	@ 0x74
 8002028:	9002      	str	r0, [sp, #8]
 800202a:	9006      	str	r0, [sp, #24]
 800202c:	9107      	str	r1, [sp, #28]
 800202e:	9104      	str	r1, [sp, #16]
 8002030:	4808      	ldr	r0, [pc, #32]	@ (8002054 <siprintf+0x38>)
 8002032:	4909      	ldr	r1, [pc, #36]	@ (8002058 <siprintf+0x3c>)
 8002034:	f853 2b04 	ldr.w	r2, [r3], #4
 8002038:	9105      	str	r1, [sp, #20]
 800203a:	6800      	ldr	r0, [r0, #0]
 800203c:	a902      	add	r1, sp, #8
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	f000 f992 	bl	8002368 <_svfiprintf_r>
 8002044:	2200      	movs	r2, #0
 8002046:	9b02      	ldr	r3, [sp, #8]
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	b01c      	add	sp, #112	@ 0x70
 800204c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002050:	b003      	add	sp, #12
 8002052:	4770      	bx	lr
 8002054:	20000014 	.word	0x20000014
 8002058:	ffff0208 	.word	0xffff0208

0800205c <memset>:
 800205c:	4603      	mov	r3, r0
 800205e:	4402      	add	r2, r0
 8002060:	4293      	cmp	r3, r2
 8002062:	d100      	bne.n	8002066 <memset+0xa>
 8002064:	4770      	bx	lr
 8002066:	f803 1b01 	strb.w	r1, [r3], #1
 800206a:	e7f9      	b.n	8002060 <memset+0x4>

0800206c <__errno>:
 800206c:	4b01      	ldr	r3, [pc, #4]	@ (8002074 <__errno+0x8>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000014 	.word	0x20000014

08002078 <__libc_init_array>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	2600      	movs	r6, #0
 800207c:	4d0c      	ldr	r5, [pc, #48]	@ (80020b0 <__libc_init_array+0x38>)
 800207e:	4c0d      	ldr	r4, [pc, #52]	@ (80020b4 <__libc_init_array+0x3c>)
 8002080:	1b64      	subs	r4, r4, r5
 8002082:	10a4      	asrs	r4, r4, #2
 8002084:	42a6      	cmp	r6, r4
 8002086:	d109      	bne.n	800209c <__libc_init_array+0x24>
 8002088:	f000 fc78 	bl	800297c <_init>
 800208c:	2600      	movs	r6, #0
 800208e:	4d0a      	ldr	r5, [pc, #40]	@ (80020b8 <__libc_init_array+0x40>)
 8002090:	4c0a      	ldr	r4, [pc, #40]	@ (80020bc <__libc_init_array+0x44>)
 8002092:	1b64      	subs	r4, r4, r5
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	42a6      	cmp	r6, r4
 8002098:	d105      	bne.n	80020a6 <__libc_init_array+0x2e>
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a0:	4798      	blx	r3
 80020a2:	3601      	adds	r6, #1
 80020a4:	e7ee      	b.n	8002084 <__libc_init_array+0xc>
 80020a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020aa:	4798      	blx	r3
 80020ac:	3601      	adds	r6, #1
 80020ae:	e7f2      	b.n	8002096 <__libc_init_array+0x1e>
 80020b0:	080029fc 	.word	0x080029fc
 80020b4:	080029fc 	.word	0x080029fc
 80020b8:	080029fc 	.word	0x080029fc
 80020bc:	08002a00 	.word	0x08002a00

080020c0 <__retarget_lock_acquire_recursive>:
 80020c0:	4770      	bx	lr

080020c2 <__retarget_lock_release_recursive>:
 80020c2:	4770      	bx	lr

080020c4 <_free_r>:
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4605      	mov	r5, r0
 80020c8:	2900      	cmp	r1, #0
 80020ca:	d040      	beq.n	800214e <_free_r+0x8a>
 80020cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020d0:	1f0c      	subs	r4, r1, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bfb8      	it	lt
 80020d6:	18e4      	addlt	r4, r4, r3
 80020d8:	f000 f8de 	bl	8002298 <__malloc_lock>
 80020dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002150 <_free_r+0x8c>)
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	b933      	cbnz	r3, 80020f0 <_free_r+0x2c>
 80020e2:	6063      	str	r3, [r4, #4]
 80020e4:	6014      	str	r4, [r2, #0]
 80020e6:	4628      	mov	r0, r5
 80020e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ec:	f000 b8da 	b.w	80022a4 <__malloc_unlock>
 80020f0:	42a3      	cmp	r3, r4
 80020f2:	d908      	bls.n	8002106 <_free_r+0x42>
 80020f4:	6820      	ldr	r0, [r4, #0]
 80020f6:	1821      	adds	r1, r4, r0
 80020f8:	428b      	cmp	r3, r1
 80020fa:	bf01      	itttt	eq
 80020fc:	6819      	ldreq	r1, [r3, #0]
 80020fe:	685b      	ldreq	r3, [r3, #4]
 8002100:	1809      	addeq	r1, r1, r0
 8002102:	6021      	streq	r1, [r4, #0]
 8002104:	e7ed      	b.n	80020e2 <_free_r+0x1e>
 8002106:	461a      	mov	r2, r3
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	b10b      	cbz	r3, 8002110 <_free_r+0x4c>
 800210c:	42a3      	cmp	r3, r4
 800210e:	d9fa      	bls.n	8002106 <_free_r+0x42>
 8002110:	6811      	ldr	r1, [r2, #0]
 8002112:	1850      	adds	r0, r2, r1
 8002114:	42a0      	cmp	r0, r4
 8002116:	d10b      	bne.n	8002130 <_free_r+0x6c>
 8002118:	6820      	ldr	r0, [r4, #0]
 800211a:	4401      	add	r1, r0
 800211c:	1850      	adds	r0, r2, r1
 800211e:	4283      	cmp	r3, r0
 8002120:	6011      	str	r1, [r2, #0]
 8002122:	d1e0      	bne.n	80020e6 <_free_r+0x22>
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4408      	add	r0, r1
 800212a:	6010      	str	r0, [r2, #0]
 800212c:	6053      	str	r3, [r2, #4]
 800212e:	e7da      	b.n	80020e6 <_free_r+0x22>
 8002130:	d902      	bls.n	8002138 <_free_r+0x74>
 8002132:	230c      	movs	r3, #12
 8002134:	602b      	str	r3, [r5, #0]
 8002136:	e7d6      	b.n	80020e6 <_free_r+0x22>
 8002138:	6820      	ldr	r0, [r4, #0]
 800213a:	1821      	adds	r1, r4, r0
 800213c:	428b      	cmp	r3, r1
 800213e:	bf01      	itttt	eq
 8002140:	6819      	ldreq	r1, [r3, #0]
 8002142:	685b      	ldreq	r3, [r3, #4]
 8002144:	1809      	addeq	r1, r1, r0
 8002146:	6021      	streq	r1, [r4, #0]
 8002148:	6063      	str	r3, [r4, #4]
 800214a:	6054      	str	r4, [r2, #4]
 800214c:	e7cb      	b.n	80020e6 <_free_r+0x22>
 800214e:	bd38      	pop	{r3, r4, r5, pc}
 8002150:	20000210 	.word	0x20000210

08002154 <sbrk_aligned>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	4e0f      	ldr	r6, [pc, #60]	@ (8002194 <sbrk_aligned+0x40>)
 8002158:	460c      	mov	r4, r1
 800215a:	6831      	ldr	r1, [r6, #0]
 800215c:	4605      	mov	r5, r0
 800215e:	b911      	cbnz	r1, 8002166 <sbrk_aligned+0x12>
 8002160:	f000 fbaa 	bl	80028b8 <_sbrk_r>
 8002164:	6030      	str	r0, [r6, #0]
 8002166:	4621      	mov	r1, r4
 8002168:	4628      	mov	r0, r5
 800216a:	f000 fba5 	bl	80028b8 <_sbrk_r>
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	d103      	bne.n	800217a <sbrk_aligned+0x26>
 8002172:	f04f 34ff 	mov.w	r4, #4294967295
 8002176:	4620      	mov	r0, r4
 8002178:	bd70      	pop	{r4, r5, r6, pc}
 800217a:	1cc4      	adds	r4, r0, #3
 800217c:	f024 0403 	bic.w	r4, r4, #3
 8002180:	42a0      	cmp	r0, r4
 8002182:	d0f8      	beq.n	8002176 <sbrk_aligned+0x22>
 8002184:	1a21      	subs	r1, r4, r0
 8002186:	4628      	mov	r0, r5
 8002188:	f000 fb96 	bl	80028b8 <_sbrk_r>
 800218c:	3001      	adds	r0, #1
 800218e:	d1f2      	bne.n	8002176 <sbrk_aligned+0x22>
 8002190:	e7ef      	b.n	8002172 <sbrk_aligned+0x1e>
 8002192:	bf00      	nop
 8002194:	2000020c 	.word	0x2000020c

08002198 <_malloc_r>:
 8002198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800219c:	1ccd      	adds	r5, r1, #3
 800219e:	f025 0503 	bic.w	r5, r5, #3
 80021a2:	3508      	adds	r5, #8
 80021a4:	2d0c      	cmp	r5, #12
 80021a6:	bf38      	it	cc
 80021a8:	250c      	movcc	r5, #12
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	4606      	mov	r6, r0
 80021ae:	db01      	blt.n	80021b4 <_malloc_r+0x1c>
 80021b0:	42a9      	cmp	r1, r5
 80021b2:	d904      	bls.n	80021be <_malloc_r+0x26>
 80021b4:	230c      	movs	r3, #12
 80021b6:	6033      	str	r3, [r6, #0]
 80021b8:	2000      	movs	r0, #0
 80021ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002294 <_malloc_r+0xfc>
 80021c2:	f000 f869 	bl	8002298 <__malloc_lock>
 80021c6:	f8d8 3000 	ldr.w	r3, [r8]
 80021ca:	461c      	mov	r4, r3
 80021cc:	bb44      	cbnz	r4, 8002220 <_malloc_r+0x88>
 80021ce:	4629      	mov	r1, r5
 80021d0:	4630      	mov	r0, r6
 80021d2:	f7ff ffbf 	bl	8002154 <sbrk_aligned>
 80021d6:	1c43      	adds	r3, r0, #1
 80021d8:	4604      	mov	r4, r0
 80021da:	d158      	bne.n	800228e <_malloc_r+0xf6>
 80021dc:	f8d8 4000 	ldr.w	r4, [r8]
 80021e0:	4627      	mov	r7, r4
 80021e2:	2f00      	cmp	r7, #0
 80021e4:	d143      	bne.n	800226e <_malloc_r+0xd6>
 80021e6:	2c00      	cmp	r4, #0
 80021e8:	d04b      	beq.n	8002282 <_malloc_r+0xea>
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	4639      	mov	r1, r7
 80021ee:	4630      	mov	r0, r6
 80021f0:	eb04 0903 	add.w	r9, r4, r3
 80021f4:	f000 fb60 	bl	80028b8 <_sbrk_r>
 80021f8:	4581      	cmp	r9, r0
 80021fa:	d142      	bne.n	8002282 <_malloc_r+0xea>
 80021fc:	6821      	ldr	r1, [r4, #0]
 80021fe:	4630      	mov	r0, r6
 8002200:	1a6d      	subs	r5, r5, r1
 8002202:	4629      	mov	r1, r5
 8002204:	f7ff ffa6 	bl	8002154 <sbrk_aligned>
 8002208:	3001      	adds	r0, #1
 800220a:	d03a      	beq.n	8002282 <_malloc_r+0xea>
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	442b      	add	r3, r5
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	f8d8 3000 	ldr.w	r3, [r8]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	bb62      	cbnz	r2, 8002274 <_malloc_r+0xdc>
 800221a:	f8c8 7000 	str.w	r7, [r8]
 800221e:	e00f      	b.n	8002240 <_malloc_r+0xa8>
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	1b52      	subs	r2, r2, r5
 8002224:	d420      	bmi.n	8002268 <_malloc_r+0xd0>
 8002226:	2a0b      	cmp	r2, #11
 8002228:	d917      	bls.n	800225a <_malloc_r+0xc2>
 800222a:	1961      	adds	r1, r4, r5
 800222c:	42a3      	cmp	r3, r4
 800222e:	6025      	str	r5, [r4, #0]
 8002230:	bf18      	it	ne
 8002232:	6059      	strne	r1, [r3, #4]
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	bf08      	it	eq
 8002238:	f8c8 1000 	streq.w	r1, [r8]
 800223c:	5162      	str	r2, [r4, r5]
 800223e:	604b      	str	r3, [r1, #4]
 8002240:	4630      	mov	r0, r6
 8002242:	f000 f82f 	bl	80022a4 <__malloc_unlock>
 8002246:	f104 000b 	add.w	r0, r4, #11
 800224a:	1d23      	adds	r3, r4, #4
 800224c:	f020 0007 	bic.w	r0, r0, #7
 8002250:	1ac2      	subs	r2, r0, r3
 8002252:	bf1c      	itt	ne
 8002254:	1a1b      	subne	r3, r3, r0
 8002256:	50a3      	strne	r3, [r4, r2]
 8002258:	e7af      	b.n	80021ba <_malloc_r+0x22>
 800225a:	6862      	ldr	r2, [r4, #4]
 800225c:	42a3      	cmp	r3, r4
 800225e:	bf0c      	ite	eq
 8002260:	f8c8 2000 	streq.w	r2, [r8]
 8002264:	605a      	strne	r2, [r3, #4]
 8002266:	e7eb      	b.n	8002240 <_malloc_r+0xa8>
 8002268:	4623      	mov	r3, r4
 800226a:	6864      	ldr	r4, [r4, #4]
 800226c:	e7ae      	b.n	80021cc <_malloc_r+0x34>
 800226e:	463c      	mov	r4, r7
 8002270:	687f      	ldr	r7, [r7, #4]
 8002272:	e7b6      	b.n	80021e2 <_malloc_r+0x4a>
 8002274:	461a      	mov	r2, r3
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	42a3      	cmp	r3, r4
 800227a:	d1fb      	bne.n	8002274 <_malloc_r+0xdc>
 800227c:	2300      	movs	r3, #0
 800227e:	6053      	str	r3, [r2, #4]
 8002280:	e7de      	b.n	8002240 <_malloc_r+0xa8>
 8002282:	230c      	movs	r3, #12
 8002284:	4630      	mov	r0, r6
 8002286:	6033      	str	r3, [r6, #0]
 8002288:	f000 f80c 	bl	80022a4 <__malloc_unlock>
 800228c:	e794      	b.n	80021b8 <_malloc_r+0x20>
 800228e:	6005      	str	r5, [r0, #0]
 8002290:	e7d6      	b.n	8002240 <_malloc_r+0xa8>
 8002292:	bf00      	nop
 8002294:	20000210 	.word	0x20000210

08002298 <__malloc_lock>:
 8002298:	4801      	ldr	r0, [pc, #4]	@ (80022a0 <__malloc_lock+0x8>)
 800229a:	f7ff bf11 	b.w	80020c0 <__retarget_lock_acquire_recursive>
 800229e:	bf00      	nop
 80022a0:	20000208 	.word	0x20000208

080022a4 <__malloc_unlock>:
 80022a4:	4801      	ldr	r0, [pc, #4]	@ (80022ac <__malloc_unlock+0x8>)
 80022a6:	f7ff bf0c 	b.w	80020c2 <__retarget_lock_release_recursive>
 80022aa:	bf00      	nop
 80022ac:	20000208 	.word	0x20000208

080022b0 <__ssputs_r>:
 80022b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022b4:	461f      	mov	r7, r3
 80022b6:	688e      	ldr	r6, [r1, #8]
 80022b8:	4682      	mov	sl, r0
 80022ba:	42be      	cmp	r6, r7
 80022bc:	460c      	mov	r4, r1
 80022be:	4690      	mov	r8, r2
 80022c0:	680b      	ldr	r3, [r1, #0]
 80022c2:	d82d      	bhi.n	8002320 <__ssputs_r+0x70>
 80022c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80022cc:	d026      	beq.n	800231c <__ssputs_r+0x6c>
 80022ce:	6965      	ldr	r5, [r4, #20]
 80022d0:	6909      	ldr	r1, [r1, #16]
 80022d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022d6:	eba3 0901 	sub.w	r9, r3, r1
 80022da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022de:	1c7b      	adds	r3, r7, #1
 80022e0:	444b      	add	r3, r9
 80022e2:	106d      	asrs	r5, r5, #1
 80022e4:	429d      	cmp	r5, r3
 80022e6:	bf38      	it	cc
 80022e8:	461d      	movcc	r5, r3
 80022ea:	0553      	lsls	r3, r2, #21
 80022ec:	d527      	bpl.n	800233e <__ssputs_r+0x8e>
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7ff ff52 	bl	8002198 <_malloc_r>
 80022f4:	4606      	mov	r6, r0
 80022f6:	b360      	cbz	r0, 8002352 <__ssputs_r+0xa2>
 80022f8:	464a      	mov	r2, r9
 80022fa:	6921      	ldr	r1, [r4, #16]
 80022fc:	f000 fafa 	bl	80028f4 <memcpy>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800230a:	81a3      	strh	r3, [r4, #12]
 800230c:	6126      	str	r6, [r4, #16]
 800230e:	444e      	add	r6, r9
 8002310:	6026      	str	r6, [r4, #0]
 8002312:	463e      	mov	r6, r7
 8002314:	6165      	str	r5, [r4, #20]
 8002316:	eba5 0509 	sub.w	r5, r5, r9
 800231a:	60a5      	str	r5, [r4, #8]
 800231c:	42be      	cmp	r6, r7
 800231e:	d900      	bls.n	8002322 <__ssputs_r+0x72>
 8002320:	463e      	mov	r6, r7
 8002322:	4632      	mov	r2, r6
 8002324:	4641      	mov	r1, r8
 8002326:	6820      	ldr	r0, [r4, #0]
 8002328:	f000 faac 	bl	8002884 <memmove>
 800232c:	2000      	movs	r0, #0
 800232e:	68a3      	ldr	r3, [r4, #8]
 8002330:	1b9b      	subs	r3, r3, r6
 8002332:	60a3      	str	r3, [r4, #8]
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	4433      	add	r3, r6
 8002338:	6023      	str	r3, [r4, #0]
 800233a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800233e:	462a      	mov	r2, r5
 8002340:	f000 fae6 	bl	8002910 <_realloc_r>
 8002344:	4606      	mov	r6, r0
 8002346:	2800      	cmp	r0, #0
 8002348:	d1e0      	bne.n	800230c <__ssputs_r+0x5c>
 800234a:	4650      	mov	r0, sl
 800234c:	6921      	ldr	r1, [r4, #16]
 800234e:	f7ff feb9 	bl	80020c4 <_free_r>
 8002352:	230c      	movs	r3, #12
 8002354:	f8ca 3000 	str.w	r3, [sl]
 8002358:	89a3      	ldrh	r3, [r4, #12]
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
 800235e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002362:	81a3      	strh	r3, [r4, #12]
 8002364:	e7e9      	b.n	800233a <__ssputs_r+0x8a>
	...

08002368 <_svfiprintf_r>:
 8002368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800236c:	4698      	mov	r8, r3
 800236e:	898b      	ldrh	r3, [r1, #12]
 8002370:	4607      	mov	r7, r0
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	460d      	mov	r5, r1
 8002376:	4614      	mov	r4, r2
 8002378:	b09d      	sub	sp, #116	@ 0x74
 800237a:	d510      	bpl.n	800239e <_svfiprintf_r+0x36>
 800237c:	690b      	ldr	r3, [r1, #16]
 800237e:	b973      	cbnz	r3, 800239e <_svfiprintf_r+0x36>
 8002380:	2140      	movs	r1, #64	@ 0x40
 8002382:	f7ff ff09 	bl	8002198 <_malloc_r>
 8002386:	6028      	str	r0, [r5, #0]
 8002388:	6128      	str	r0, [r5, #16]
 800238a:	b930      	cbnz	r0, 800239a <_svfiprintf_r+0x32>
 800238c:	230c      	movs	r3, #12
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	b01d      	add	sp, #116	@ 0x74
 8002396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800239a:	2340      	movs	r3, #64	@ 0x40
 800239c:	616b      	str	r3, [r5, #20]
 800239e:	2300      	movs	r3, #0
 80023a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80023a2:	2320      	movs	r3, #32
 80023a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80023a8:	2330      	movs	r3, #48	@ 0x30
 80023aa:	f04f 0901 	mov.w	r9, #1
 80023ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80023b2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800254c <_svfiprintf_r+0x1e4>
 80023b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80023ba:	4623      	mov	r3, r4
 80023bc:	469a      	mov	sl, r3
 80023be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023c2:	b10a      	cbz	r2, 80023c8 <_svfiprintf_r+0x60>
 80023c4:	2a25      	cmp	r2, #37	@ 0x25
 80023c6:	d1f9      	bne.n	80023bc <_svfiprintf_r+0x54>
 80023c8:	ebba 0b04 	subs.w	fp, sl, r4
 80023cc:	d00b      	beq.n	80023e6 <_svfiprintf_r+0x7e>
 80023ce:	465b      	mov	r3, fp
 80023d0:	4622      	mov	r2, r4
 80023d2:	4629      	mov	r1, r5
 80023d4:	4638      	mov	r0, r7
 80023d6:	f7ff ff6b 	bl	80022b0 <__ssputs_r>
 80023da:	3001      	adds	r0, #1
 80023dc:	f000 80a7 	beq.w	800252e <_svfiprintf_r+0x1c6>
 80023e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023e2:	445a      	add	r2, fp
 80023e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80023e6:	f89a 3000 	ldrb.w	r3, [sl]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 809f 	beq.w	800252e <_svfiprintf_r+0x1c6>
 80023f0:	2300      	movs	r3, #0
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023fa:	f10a 0a01 	add.w	sl, sl, #1
 80023fe:	9304      	str	r3, [sp, #16]
 8002400:	9307      	str	r3, [sp, #28]
 8002402:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002406:	931a      	str	r3, [sp, #104]	@ 0x68
 8002408:	4654      	mov	r4, sl
 800240a:	2205      	movs	r2, #5
 800240c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002410:	484e      	ldr	r0, [pc, #312]	@ (800254c <_svfiprintf_r+0x1e4>)
 8002412:	f000 fa61 	bl	80028d8 <memchr>
 8002416:	9a04      	ldr	r2, [sp, #16]
 8002418:	b9d8      	cbnz	r0, 8002452 <_svfiprintf_r+0xea>
 800241a:	06d0      	lsls	r0, r2, #27
 800241c:	bf44      	itt	mi
 800241e:	2320      	movmi	r3, #32
 8002420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002424:	0711      	lsls	r1, r2, #28
 8002426:	bf44      	itt	mi
 8002428:	232b      	movmi	r3, #43	@ 0x2b
 800242a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800242e:	f89a 3000 	ldrb.w	r3, [sl]
 8002432:	2b2a      	cmp	r3, #42	@ 0x2a
 8002434:	d015      	beq.n	8002462 <_svfiprintf_r+0xfa>
 8002436:	4654      	mov	r4, sl
 8002438:	2000      	movs	r0, #0
 800243a:	f04f 0c0a 	mov.w	ip, #10
 800243e:	9a07      	ldr	r2, [sp, #28]
 8002440:	4621      	mov	r1, r4
 8002442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002446:	3b30      	subs	r3, #48	@ 0x30
 8002448:	2b09      	cmp	r3, #9
 800244a:	d94b      	bls.n	80024e4 <_svfiprintf_r+0x17c>
 800244c:	b1b0      	cbz	r0, 800247c <_svfiprintf_r+0x114>
 800244e:	9207      	str	r2, [sp, #28]
 8002450:	e014      	b.n	800247c <_svfiprintf_r+0x114>
 8002452:	eba0 0308 	sub.w	r3, r0, r8
 8002456:	fa09 f303 	lsl.w	r3, r9, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	46a2      	mov	sl, r4
 800245e:	9304      	str	r3, [sp, #16]
 8002460:	e7d2      	b.n	8002408 <_svfiprintf_r+0xa0>
 8002462:	9b03      	ldr	r3, [sp, #12]
 8002464:	1d19      	adds	r1, r3, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	9103      	str	r1, [sp, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	bfbb      	ittet	lt
 800246e:	425b      	neglt	r3, r3
 8002470:	f042 0202 	orrlt.w	r2, r2, #2
 8002474:	9307      	strge	r3, [sp, #28]
 8002476:	9307      	strlt	r3, [sp, #28]
 8002478:	bfb8      	it	lt
 800247a:	9204      	strlt	r2, [sp, #16]
 800247c:	7823      	ldrb	r3, [r4, #0]
 800247e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002480:	d10a      	bne.n	8002498 <_svfiprintf_r+0x130>
 8002482:	7863      	ldrb	r3, [r4, #1]
 8002484:	2b2a      	cmp	r3, #42	@ 0x2a
 8002486:	d132      	bne.n	80024ee <_svfiprintf_r+0x186>
 8002488:	9b03      	ldr	r3, [sp, #12]
 800248a:	3402      	adds	r4, #2
 800248c:	1d1a      	adds	r2, r3, #4
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	9203      	str	r2, [sp, #12]
 8002492:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002496:	9305      	str	r3, [sp, #20]
 8002498:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002550 <_svfiprintf_r+0x1e8>
 800249c:	2203      	movs	r2, #3
 800249e:	4650      	mov	r0, sl
 80024a0:	7821      	ldrb	r1, [r4, #0]
 80024a2:	f000 fa19 	bl	80028d8 <memchr>
 80024a6:	b138      	cbz	r0, 80024b8 <_svfiprintf_r+0x150>
 80024a8:	2240      	movs	r2, #64	@ 0x40
 80024aa:	9b04      	ldr	r3, [sp, #16]
 80024ac:	eba0 000a 	sub.w	r0, r0, sl
 80024b0:	4082      	lsls	r2, r0
 80024b2:	4313      	orrs	r3, r2
 80024b4:	3401      	adds	r4, #1
 80024b6:	9304      	str	r3, [sp, #16]
 80024b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024bc:	2206      	movs	r2, #6
 80024be:	4825      	ldr	r0, [pc, #148]	@ (8002554 <_svfiprintf_r+0x1ec>)
 80024c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80024c4:	f000 fa08 	bl	80028d8 <memchr>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d036      	beq.n	800253a <_svfiprintf_r+0x1d2>
 80024cc:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <_svfiprintf_r+0x1f0>)
 80024ce:	bb1b      	cbnz	r3, 8002518 <_svfiprintf_r+0x1b0>
 80024d0:	9b03      	ldr	r3, [sp, #12]
 80024d2:	3307      	adds	r3, #7
 80024d4:	f023 0307 	bic.w	r3, r3, #7
 80024d8:	3308      	adds	r3, #8
 80024da:	9303      	str	r3, [sp, #12]
 80024dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024de:	4433      	add	r3, r6
 80024e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80024e2:	e76a      	b.n	80023ba <_svfiprintf_r+0x52>
 80024e4:	460c      	mov	r4, r1
 80024e6:	2001      	movs	r0, #1
 80024e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80024ec:	e7a8      	b.n	8002440 <_svfiprintf_r+0xd8>
 80024ee:	2300      	movs	r3, #0
 80024f0:	f04f 0c0a 	mov.w	ip, #10
 80024f4:	4619      	mov	r1, r3
 80024f6:	3401      	adds	r4, #1
 80024f8:	9305      	str	r3, [sp, #20]
 80024fa:	4620      	mov	r0, r4
 80024fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002500:	3a30      	subs	r2, #48	@ 0x30
 8002502:	2a09      	cmp	r2, #9
 8002504:	d903      	bls.n	800250e <_svfiprintf_r+0x1a6>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0c6      	beq.n	8002498 <_svfiprintf_r+0x130>
 800250a:	9105      	str	r1, [sp, #20]
 800250c:	e7c4      	b.n	8002498 <_svfiprintf_r+0x130>
 800250e:	4604      	mov	r4, r0
 8002510:	2301      	movs	r3, #1
 8002512:	fb0c 2101 	mla	r1, ip, r1, r2
 8002516:	e7f0      	b.n	80024fa <_svfiprintf_r+0x192>
 8002518:	ab03      	add	r3, sp, #12
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	462a      	mov	r2, r5
 800251e:	4638      	mov	r0, r7
 8002520:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <_svfiprintf_r+0x1f4>)
 8002522:	a904      	add	r1, sp, #16
 8002524:	f3af 8000 	nop.w
 8002528:	1c42      	adds	r2, r0, #1
 800252a:	4606      	mov	r6, r0
 800252c:	d1d6      	bne.n	80024dc <_svfiprintf_r+0x174>
 800252e:	89ab      	ldrh	r3, [r5, #12]
 8002530:	065b      	lsls	r3, r3, #25
 8002532:	f53f af2d 	bmi.w	8002390 <_svfiprintf_r+0x28>
 8002536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002538:	e72c      	b.n	8002394 <_svfiprintf_r+0x2c>
 800253a:	ab03      	add	r3, sp, #12
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	462a      	mov	r2, r5
 8002540:	4638      	mov	r0, r7
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <_svfiprintf_r+0x1f4>)
 8002544:	a904      	add	r1, sp, #16
 8002546:	f000 f87d 	bl	8002644 <_printf_i>
 800254a:	e7ed      	b.n	8002528 <_svfiprintf_r+0x1c0>
 800254c:	080029c6 	.word	0x080029c6
 8002550:	080029cc 	.word	0x080029cc
 8002554:	080029d0 	.word	0x080029d0
 8002558:	00000000 	.word	0x00000000
 800255c:	080022b1 	.word	0x080022b1

08002560 <_printf_common>:
 8002560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002564:	4616      	mov	r6, r2
 8002566:	4698      	mov	r8, r3
 8002568:	688a      	ldr	r2, [r1, #8]
 800256a:	690b      	ldr	r3, [r1, #16]
 800256c:	4607      	mov	r7, r0
 800256e:	4293      	cmp	r3, r2
 8002570:	bfb8      	it	lt
 8002572:	4613      	movlt	r3, r2
 8002574:	6033      	str	r3, [r6, #0]
 8002576:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800257a:	460c      	mov	r4, r1
 800257c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002580:	b10a      	cbz	r2, 8002586 <_printf_common+0x26>
 8002582:	3301      	adds	r3, #1
 8002584:	6033      	str	r3, [r6, #0]
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	0699      	lsls	r1, r3, #26
 800258a:	bf42      	ittt	mi
 800258c:	6833      	ldrmi	r3, [r6, #0]
 800258e:	3302      	addmi	r3, #2
 8002590:	6033      	strmi	r3, [r6, #0]
 8002592:	6825      	ldr	r5, [r4, #0]
 8002594:	f015 0506 	ands.w	r5, r5, #6
 8002598:	d106      	bne.n	80025a8 <_printf_common+0x48>
 800259a:	f104 0a19 	add.w	sl, r4, #25
 800259e:	68e3      	ldr	r3, [r4, #12]
 80025a0:	6832      	ldr	r2, [r6, #0]
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	42ab      	cmp	r3, r5
 80025a6:	dc2b      	bgt.n	8002600 <_printf_common+0xa0>
 80025a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	3b00      	subs	r3, #0
 80025b0:	bf18      	it	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	0692      	lsls	r2, r2, #26
 80025b6:	d430      	bmi.n	800261a <_printf_common+0xba>
 80025b8:	4641      	mov	r1, r8
 80025ba:	4638      	mov	r0, r7
 80025bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025c0:	47c8      	blx	r9
 80025c2:	3001      	adds	r0, #1
 80025c4:	d023      	beq.n	800260e <_printf_common+0xae>
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	6922      	ldr	r2, [r4, #16]
 80025ca:	f003 0306 	and.w	r3, r3, #6
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf14      	ite	ne
 80025d2:	2500      	movne	r5, #0
 80025d4:	6833      	ldreq	r3, [r6, #0]
 80025d6:	f04f 0600 	mov.w	r6, #0
 80025da:	bf08      	it	eq
 80025dc:	68e5      	ldreq	r5, [r4, #12]
 80025de:	f104 041a 	add.w	r4, r4, #26
 80025e2:	bf08      	it	eq
 80025e4:	1aed      	subeq	r5, r5, r3
 80025e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80025ea:	bf08      	it	eq
 80025ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bfc4      	itt	gt
 80025f4:	1a9b      	subgt	r3, r3, r2
 80025f6:	18ed      	addgt	r5, r5, r3
 80025f8:	42b5      	cmp	r5, r6
 80025fa:	d11a      	bne.n	8002632 <_printf_common+0xd2>
 80025fc:	2000      	movs	r0, #0
 80025fe:	e008      	b.n	8002612 <_printf_common+0xb2>
 8002600:	2301      	movs	r3, #1
 8002602:	4652      	mov	r2, sl
 8002604:	4641      	mov	r1, r8
 8002606:	4638      	mov	r0, r7
 8002608:	47c8      	blx	r9
 800260a:	3001      	adds	r0, #1
 800260c:	d103      	bne.n	8002616 <_printf_common+0xb6>
 800260e:	f04f 30ff 	mov.w	r0, #4294967295
 8002612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002616:	3501      	adds	r5, #1
 8002618:	e7c1      	b.n	800259e <_printf_common+0x3e>
 800261a:	2030      	movs	r0, #48	@ 0x30
 800261c:	18e1      	adds	r1, r4, r3
 800261e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002628:	4422      	add	r2, r4
 800262a:	3302      	adds	r3, #2
 800262c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002630:	e7c2      	b.n	80025b8 <_printf_common+0x58>
 8002632:	2301      	movs	r3, #1
 8002634:	4622      	mov	r2, r4
 8002636:	4641      	mov	r1, r8
 8002638:	4638      	mov	r0, r7
 800263a:	47c8      	blx	r9
 800263c:	3001      	adds	r0, #1
 800263e:	d0e6      	beq.n	800260e <_printf_common+0xae>
 8002640:	3601      	adds	r6, #1
 8002642:	e7d9      	b.n	80025f8 <_printf_common+0x98>

08002644 <_printf_i>:
 8002644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002648:	7e0f      	ldrb	r7, [r1, #24]
 800264a:	4691      	mov	r9, r2
 800264c:	2f78      	cmp	r7, #120	@ 0x78
 800264e:	4680      	mov	r8, r0
 8002650:	460c      	mov	r4, r1
 8002652:	469a      	mov	sl, r3
 8002654:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800265a:	d807      	bhi.n	800266c <_printf_i+0x28>
 800265c:	2f62      	cmp	r7, #98	@ 0x62
 800265e:	d80a      	bhi.n	8002676 <_printf_i+0x32>
 8002660:	2f00      	cmp	r7, #0
 8002662:	f000 80d3 	beq.w	800280c <_printf_i+0x1c8>
 8002666:	2f58      	cmp	r7, #88	@ 0x58
 8002668:	f000 80ba 	beq.w	80027e0 <_printf_i+0x19c>
 800266c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002674:	e03a      	b.n	80026ec <_printf_i+0xa8>
 8002676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800267a:	2b15      	cmp	r3, #21
 800267c:	d8f6      	bhi.n	800266c <_printf_i+0x28>
 800267e:	a101      	add	r1, pc, #4	@ (adr r1, 8002684 <_printf_i+0x40>)
 8002680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002684:	080026dd 	.word	0x080026dd
 8002688:	080026f1 	.word	0x080026f1
 800268c:	0800266d 	.word	0x0800266d
 8002690:	0800266d 	.word	0x0800266d
 8002694:	0800266d 	.word	0x0800266d
 8002698:	0800266d 	.word	0x0800266d
 800269c:	080026f1 	.word	0x080026f1
 80026a0:	0800266d 	.word	0x0800266d
 80026a4:	0800266d 	.word	0x0800266d
 80026a8:	0800266d 	.word	0x0800266d
 80026ac:	0800266d 	.word	0x0800266d
 80026b0:	080027f3 	.word	0x080027f3
 80026b4:	0800271b 	.word	0x0800271b
 80026b8:	080027ad 	.word	0x080027ad
 80026bc:	0800266d 	.word	0x0800266d
 80026c0:	0800266d 	.word	0x0800266d
 80026c4:	08002815 	.word	0x08002815
 80026c8:	0800266d 	.word	0x0800266d
 80026cc:	0800271b 	.word	0x0800271b
 80026d0:	0800266d 	.word	0x0800266d
 80026d4:	0800266d 	.word	0x0800266d
 80026d8:	080027b5 	.word	0x080027b5
 80026dc:	6833      	ldr	r3, [r6, #0]
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6032      	str	r2, [r6, #0]
 80026e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026ec:	2301      	movs	r3, #1
 80026ee:	e09e      	b.n	800282e <_printf_i+0x1ea>
 80026f0:	6833      	ldr	r3, [r6, #0]
 80026f2:	6820      	ldr	r0, [r4, #0]
 80026f4:	1d19      	adds	r1, r3, #4
 80026f6:	6031      	str	r1, [r6, #0]
 80026f8:	0606      	lsls	r6, r0, #24
 80026fa:	d501      	bpl.n	8002700 <_printf_i+0xbc>
 80026fc:	681d      	ldr	r5, [r3, #0]
 80026fe:	e003      	b.n	8002708 <_printf_i+0xc4>
 8002700:	0645      	lsls	r5, r0, #25
 8002702:	d5fb      	bpl.n	80026fc <_printf_i+0xb8>
 8002704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002708:	2d00      	cmp	r5, #0
 800270a:	da03      	bge.n	8002714 <_printf_i+0xd0>
 800270c:	232d      	movs	r3, #45	@ 0x2d
 800270e:	426d      	negs	r5, r5
 8002710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002714:	230a      	movs	r3, #10
 8002716:	4859      	ldr	r0, [pc, #356]	@ (800287c <_printf_i+0x238>)
 8002718:	e011      	b.n	800273e <_printf_i+0xfa>
 800271a:	6821      	ldr	r1, [r4, #0]
 800271c:	6833      	ldr	r3, [r6, #0]
 800271e:	0608      	lsls	r0, r1, #24
 8002720:	f853 5b04 	ldr.w	r5, [r3], #4
 8002724:	d402      	bmi.n	800272c <_printf_i+0xe8>
 8002726:	0649      	lsls	r1, r1, #25
 8002728:	bf48      	it	mi
 800272a:	b2ad      	uxthmi	r5, r5
 800272c:	2f6f      	cmp	r7, #111	@ 0x6f
 800272e:	6033      	str	r3, [r6, #0]
 8002730:	bf14      	ite	ne
 8002732:	230a      	movne	r3, #10
 8002734:	2308      	moveq	r3, #8
 8002736:	4851      	ldr	r0, [pc, #324]	@ (800287c <_printf_i+0x238>)
 8002738:	2100      	movs	r1, #0
 800273a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800273e:	6866      	ldr	r6, [r4, #4]
 8002740:	2e00      	cmp	r6, #0
 8002742:	bfa8      	it	ge
 8002744:	6821      	ldrge	r1, [r4, #0]
 8002746:	60a6      	str	r6, [r4, #8]
 8002748:	bfa4      	itt	ge
 800274a:	f021 0104 	bicge.w	r1, r1, #4
 800274e:	6021      	strge	r1, [r4, #0]
 8002750:	b90d      	cbnz	r5, 8002756 <_printf_i+0x112>
 8002752:	2e00      	cmp	r6, #0
 8002754:	d04b      	beq.n	80027ee <_printf_i+0x1aa>
 8002756:	4616      	mov	r6, r2
 8002758:	fbb5 f1f3 	udiv	r1, r5, r3
 800275c:	fb03 5711 	mls	r7, r3, r1, r5
 8002760:	5dc7      	ldrb	r7, [r0, r7]
 8002762:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002766:	462f      	mov	r7, r5
 8002768:	42bb      	cmp	r3, r7
 800276a:	460d      	mov	r5, r1
 800276c:	d9f4      	bls.n	8002758 <_printf_i+0x114>
 800276e:	2b08      	cmp	r3, #8
 8002770:	d10b      	bne.n	800278a <_printf_i+0x146>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	07df      	lsls	r7, r3, #31
 8002776:	d508      	bpl.n	800278a <_printf_i+0x146>
 8002778:	6923      	ldr	r3, [r4, #16]
 800277a:	6861      	ldr	r1, [r4, #4]
 800277c:	4299      	cmp	r1, r3
 800277e:	bfde      	ittt	le
 8002780:	2330      	movle	r3, #48	@ 0x30
 8002782:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002786:	f106 36ff 	addle.w	r6, r6, #4294967295
 800278a:	1b92      	subs	r2, r2, r6
 800278c:	6122      	str	r2, [r4, #16]
 800278e:	464b      	mov	r3, r9
 8002790:	4621      	mov	r1, r4
 8002792:	4640      	mov	r0, r8
 8002794:	f8cd a000 	str.w	sl, [sp]
 8002798:	aa03      	add	r2, sp, #12
 800279a:	f7ff fee1 	bl	8002560 <_printf_common>
 800279e:	3001      	adds	r0, #1
 80027a0:	d14a      	bne.n	8002838 <_printf_i+0x1f4>
 80027a2:	f04f 30ff 	mov.w	r0, #4294967295
 80027a6:	b004      	add	sp, #16
 80027a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	6023      	str	r3, [r4, #0]
 80027b4:	2778      	movs	r7, #120	@ 0x78
 80027b6:	4832      	ldr	r0, [pc, #200]	@ (8002880 <_printf_i+0x23c>)
 80027b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	6831      	ldr	r1, [r6, #0]
 80027c0:	061f      	lsls	r7, r3, #24
 80027c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80027c6:	d402      	bmi.n	80027ce <_printf_i+0x18a>
 80027c8:	065f      	lsls	r7, r3, #25
 80027ca:	bf48      	it	mi
 80027cc:	b2ad      	uxthmi	r5, r5
 80027ce:	6031      	str	r1, [r6, #0]
 80027d0:	07d9      	lsls	r1, r3, #31
 80027d2:	bf44      	itt	mi
 80027d4:	f043 0320 	orrmi.w	r3, r3, #32
 80027d8:	6023      	strmi	r3, [r4, #0]
 80027da:	b11d      	cbz	r5, 80027e4 <_printf_i+0x1a0>
 80027dc:	2310      	movs	r3, #16
 80027de:	e7ab      	b.n	8002738 <_printf_i+0xf4>
 80027e0:	4826      	ldr	r0, [pc, #152]	@ (800287c <_printf_i+0x238>)
 80027e2:	e7e9      	b.n	80027b8 <_printf_i+0x174>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	f023 0320 	bic.w	r3, r3, #32
 80027ea:	6023      	str	r3, [r4, #0]
 80027ec:	e7f6      	b.n	80027dc <_printf_i+0x198>
 80027ee:	4616      	mov	r6, r2
 80027f0:	e7bd      	b.n	800276e <_printf_i+0x12a>
 80027f2:	6833      	ldr	r3, [r6, #0]
 80027f4:	6825      	ldr	r5, [r4, #0]
 80027f6:	1d18      	adds	r0, r3, #4
 80027f8:	6961      	ldr	r1, [r4, #20]
 80027fa:	6030      	str	r0, [r6, #0]
 80027fc:	062e      	lsls	r6, r5, #24
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	d501      	bpl.n	8002806 <_printf_i+0x1c2>
 8002802:	6019      	str	r1, [r3, #0]
 8002804:	e002      	b.n	800280c <_printf_i+0x1c8>
 8002806:	0668      	lsls	r0, r5, #25
 8002808:	d5fb      	bpl.n	8002802 <_printf_i+0x1be>
 800280a:	8019      	strh	r1, [r3, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	4616      	mov	r6, r2
 8002810:	6123      	str	r3, [r4, #16]
 8002812:	e7bc      	b.n	800278e <_printf_i+0x14a>
 8002814:	6833      	ldr	r3, [r6, #0]
 8002816:	2100      	movs	r1, #0
 8002818:	1d1a      	adds	r2, r3, #4
 800281a:	6032      	str	r2, [r6, #0]
 800281c:	681e      	ldr	r6, [r3, #0]
 800281e:	6862      	ldr	r2, [r4, #4]
 8002820:	4630      	mov	r0, r6
 8002822:	f000 f859 	bl	80028d8 <memchr>
 8002826:	b108      	cbz	r0, 800282c <_printf_i+0x1e8>
 8002828:	1b80      	subs	r0, r0, r6
 800282a:	6060      	str	r0, [r4, #4]
 800282c:	6863      	ldr	r3, [r4, #4]
 800282e:	6123      	str	r3, [r4, #16]
 8002830:	2300      	movs	r3, #0
 8002832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002836:	e7aa      	b.n	800278e <_printf_i+0x14a>
 8002838:	4632      	mov	r2, r6
 800283a:	4649      	mov	r1, r9
 800283c:	4640      	mov	r0, r8
 800283e:	6923      	ldr	r3, [r4, #16]
 8002840:	47d0      	blx	sl
 8002842:	3001      	adds	r0, #1
 8002844:	d0ad      	beq.n	80027a2 <_printf_i+0x15e>
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	079b      	lsls	r3, r3, #30
 800284a:	d413      	bmi.n	8002874 <_printf_i+0x230>
 800284c:	68e0      	ldr	r0, [r4, #12]
 800284e:	9b03      	ldr	r3, [sp, #12]
 8002850:	4298      	cmp	r0, r3
 8002852:	bfb8      	it	lt
 8002854:	4618      	movlt	r0, r3
 8002856:	e7a6      	b.n	80027a6 <_printf_i+0x162>
 8002858:	2301      	movs	r3, #1
 800285a:	4632      	mov	r2, r6
 800285c:	4649      	mov	r1, r9
 800285e:	4640      	mov	r0, r8
 8002860:	47d0      	blx	sl
 8002862:	3001      	adds	r0, #1
 8002864:	d09d      	beq.n	80027a2 <_printf_i+0x15e>
 8002866:	3501      	adds	r5, #1
 8002868:	68e3      	ldr	r3, [r4, #12]
 800286a:	9903      	ldr	r1, [sp, #12]
 800286c:	1a5b      	subs	r3, r3, r1
 800286e:	42ab      	cmp	r3, r5
 8002870:	dcf2      	bgt.n	8002858 <_printf_i+0x214>
 8002872:	e7eb      	b.n	800284c <_printf_i+0x208>
 8002874:	2500      	movs	r5, #0
 8002876:	f104 0619 	add.w	r6, r4, #25
 800287a:	e7f5      	b.n	8002868 <_printf_i+0x224>
 800287c:	080029d7 	.word	0x080029d7
 8002880:	080029e8 	.word	0x080029e8

08002884 <memmove>:
 8002884:	4288      	cmp	r0, r1
 8002886:	b510      	push	{r4, lr}
 8002888:	eb01 0402 	add.w	r4, r1, r2
 800288c:	d902      	bls.n	8002894 <memmove+0x10>
 800288e:	4284      	cmp	r4, r0
 8002890:	4623      	mov	r3, r4
 8002892:	d807      	bhi.n	80028a4 <memmove+0x20>
 8002894:	1e43      	subs	r3, r0, #1
 8002896:	42a1      	cmp	r1, r4
 8002898:	d008      	beq.n	80028ac <memmove+0x28>
 800289a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800289e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028a2:	e7f8      	b.n	8002896 <memmove+0x12>
 80028a4:	4601      	mov	r1, r0
 80028a6:	4402      	add	r2, r0
 80028a8:	428a      	cmp	r2, r1
 80028aa:	d100      	bne.n	80028ae <memmove+0x2a>
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028b6:	e7f7      	b.n	80028a8 <memmove+0x24>

080028b8 <_sbrk_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	2300      	movs	r3, #0
 80028bc:	4d05      	ldr	r5, [pc, #20]	@ (80028d4 <_sbrk_r+0x1c>)
 80028be:	4604      	mov	r4, r0
 80028c0:	4608      	mov	r0, r1
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	f7fe f880 	bl	80009c8 <_sbrk>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_sbrk_r+0x1a>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_sbrk_r+0x1a>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	20000204 	.word	0x20000204

080028d8 <memchr>:
 80028d8:	4603      	mov	r3, r0
 80028da:	b510      	push	{r4, lr}
 80028dc:	b2c9      	uxtb	r1, r1
 80028de:	4402      	add	r2, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	d101      	bne.n	80028ea <memchr+0x12>
 80028e6:	2000      	movs	r0, #0
 80028e8:	e003      	b.n	80028f2 <memchr+0x1a>
 80028ea:	7804      	ldrb	r4, [r0, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	428c      	cmp	r4, r1
 80028f0:	d1f6      	bne.n	80028e0 <memchr+0x8>
 80028f2:	bd10      	pop	{r4, pc}

080028f4 <memcpy>:
 80028f4:	440a      	add	r2, r1
 80028f6:	4291      	cmp	r1, r2
 80028f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80028fc:	d100      	bne.n	8002900 <memcpy+0xc>
 80028fe:	4770      	bx	lr
 8002900:	b510      	push	{r4, lr}
 8002902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002906:	4291      	cmp	r1, r2
 8002908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800290c:	d1f9      	bne.n	8002902 <memcpy+0xe>
 800290e:	bd10      	pop	{r4, pc}

08002910 <_realloc_r>:
 8002910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002914:	4680      	mov	r8, r0
 8002916:	4615      	mov	r5, r2
 8002918:	460c      	mov	r4, r1
 800291a:	b921      	cbnz	r1, 8002926 <_realloc_r+0x16>
 800291c:	4611      	mov	r1, r2
 800291e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002922:	f7ff bc39 	b.w	8002198 <_malloc_r>
 8002926:	b92a      	cbnz	r2, 8002934 <_realloc_r+0x24>
 8002928:	f7ff fbcc 	bl	80020c4 <_free_r>
 800292c:	2400      	movs	r4, #0
 800292e:	4620      	mov	r0, r4
 8002930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002934:	f000 f81a 	bl	800296c <_malloc_usable_size_r>
 8002938:	4285      	cmp	r5, r0
 800293a:	4606      	mov	r6, r0
 800293c:	d802      	bhi.n	8002944 <_realloc_r+0x34>
 800293e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002942:	d8f4      	bhi.n	800292e <_realloc_r+0x1e>
 8002944:	4629      	mov	r1, r5
 8002946:	4640      	mov	r0, r8
 8002948:	f7ff fc26 	bl	8002198 <_malloc_r>
 800294c:	4607      	mov	r7, r0
 800294e:	2800      	cmp	r0, #0
 8002950:	d0ec      	beq.n	800292c <_realloc_r+0x1c>
 8002952:	42b5      	cmp	r5, r6
 8002954:	462a      	mov	r2, r5
 8002956:	4621      	mov	r1, r4
 8002958:	bf28      	it	cs
 800295a:	4632      	movcs	r2, r6
 800295c:	f7ff ffca 	bl	80028f4 <memcpy>
 8002960:	4621      	mov	r1, r4
 8002962:	4640      	mov	r0, r8
 8002964:	f7ff fbae 	bl	80020c4 <_free_r>
 8002968:	463c      	mov	r4, r7
 800296a:	e7e0      	b.n	800292e <_realloc_r+0x1e>

0800296c <_malloc_usable_size_r>:
 800296c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002970:	1f18      	subs	r0, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	bfbc      	itt	lt
 8002976:	580b      	ldrlt	r3, [r1, r0]
 8002978:	18c0      	addlt	r0, r0, r3
 800297a:	4770      	bx	lr

0800297c <_init>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr

08002988 <_fini>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	bf00      	nop
 800298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298e:	bc08      	pop	{r3}
 8002990:	469e      	mov	lr, r3
 8002992:	4770      	bx	lr
