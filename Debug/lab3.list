
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080029cc  080029cc  000039cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a34  08002a34  00004064  2**0
                  CONTENTS
  4 .ARM          00000000  08002a34  08002a34  00004064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a34  08002a34  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a38  08002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002a3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000064  08002aa0  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08002aa0  00004218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b8f  00000000  00000000  0000408d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b45  00000000  00000000  00009c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  0000b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ab  00000000  00000000  0000bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f53  00000000  00000000  0000c283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ed4  00000000  00000000  000231d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835d9  00000000  00000000  0002c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000af6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b12dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080029b4 	.word	0x080029b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080029b4 	.word	0x080029b4

0800014c <LCD_init>:
#define LCD_SFT_MOV   0x14



void LCD_init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//	 LCD_Write_Command(0x08);
//	 LCD_Write_Command(0x01);
//	 LCD_Write_Command(0x04);
	// ---------------------------------------------------------

	 HAL_Delay(15);
 8000150:	200f      	movs	r0, #15
 8000152:	f000 fd19 	bl	8000b88 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);//8-bit display
 8000156:	2038      	movs	r0, #56	@ 0x38
 8000158:	f000 f834 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 800015c:	2005      	movs	r0, #5
 800015e:	f000 fd13 	bl	8000b88 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 8000162:	2038      	movs	r0, #56	@ 0x38
 8000164:	f000 f82e 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 8000168:	2005      	movs	r0, #5
 800016a:	f000 fd0d 	bl	8000b88 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 800016e:	2038      	movs	r0, #56	@ 0x38
 8000170:	f000 f828 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 8000174:	2005      	movs	r0, #5
 8000176:	f000 fd07 	bl	8000b88 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 800017a:	2038      	movs	r0, #56	@ 0x38
 800017c:	f000 f822 	bl	80001c4 <LCD_Write_Command>

	 //LCD_Write_Command(0x08);
	 //LCD_Write_Command(LCD_2_LINE_8_BITS);

	 //LCD_Write_Command(0x01);
	 LCD_Write_Command(0x3F); // sets lines
 8000180:	203f      	movs	r0, #63	@ 0x3f
 8000182:	f000 f81f 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 8000186:	2001      	movs	r0, #1
 8000188:	f000 fcfe 	bl	8000b88 <HAL_Delay>
	 //LCD_Write_Command(0x06);
	 LCD_Write_Command(0x08); // display off
 800018c:	2008      	movs	r0, #8
 800018e:	f000 f819 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 8000192:	2001      	movs	r0, #1
 8000194:	f000 fcf8 	bl	8000b88 <HAL_Delay>
	 //LCD_Write_Command(0x0c);
	 LCD_Write_Command(0x01); // display clear
 8000198:	2001      	movs	r0, #1
 800019a:	f000 f813 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fcf2 	bl	8000b88 <HAL_Delay>

	 LCD_Write_Command(0x06); // entry mode set
 80001a4:	2006      	movs	r0, #6
 80001a6:	f000 f80d 	bl	80001c4 <LCD_Write_Command>
	 // HAL_Delay(1);
	 // turn on display:
	 LCD_Write_Command(0x0C); // display on ?
 80001aa:	200c      	movs	r0, #12
 80001ac:	f000 f80a 	bl	80001c4 <LCD_Write_Command>


}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <LCD_Clear>:

void LCD_Clear(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
 LCD_Write_Command(0x01);//
 80001b8:	2001      	movs	r0, #1
 80001ba:	f000 f803 	bl	80001c4 <LCD_Write_Command>
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <LCD_Write_Command>:


void LCD_Write_Command(uchar Com)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
 // while(LCD_Read_State());
 //	 HAL_Delay(10);
 //	 unsigned int Read_Dat = 0; //BJ


	HAL_Delay(10);
 80001ce:	200a      	movs	r0, #10
 80001d0:	f000 fcda 	bl	8000b88 <HAL_Delay>
	// unsigned int Read_Dat = 0; //BJ

	 HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin, GPIO_PIN_RESET); // LCD_RS = 0;
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001da:	4811      	ldr	r0, [pc, #68]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001dc:	f001 fa76 	bl	80016cc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_RW_Pin, GPIO_PIN_RESET); // LCD_RW = 0;
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e6:	480e      	ldr	r0, [pc, #56]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001e8:	f001 fa70 	bl	80016cc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_SET); //LCD_E_Pin = 1;
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f2:	480b      	ldr	r0, [pc, #44]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001f4:	f001 fa6a 	bl	80016cc <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f000 fcc5 	bl	8000b88 <HAL_Delay>

	 LCD_PORT = Com;
 80001fe:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <LCD_Write_Command+0x60>)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	60d3      	str	r3, [r2, #12]

	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_RESET);  //LCD_E_Pin =0;
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800020a:	4805      	ldr	r0, [pc, #20]	@ (8000220 <LCD_Write_Command+0x5c>)
 800020c:	f001 fa5e 	bl	80016cc <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fcb9 	bl	8000b88 <HAL_Delay>
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40010c00 	.word	0x40010c00
 8000224:	40010800 	.word	0x40010800

08000228 <LCD_Write_Data>:

void LCD_Write_Data(uchar dat)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
 //while(LCD_Read_State());
	 HAL_Delay(1);
 8000232:	2001      	movs	r0, #1
 8000234:	f000 fca8 	bl	8000b88 <HAL_Delay>

	 HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin, GPIO_PIN_SET); //LCD_RS = 1;
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800023e:	4811      	ldr	r0, [pc, #68]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000240:	f001 fa44 	bl	80016cc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_RW_Pin, GPIO_PIN_RESET); // LCD_RW = 0;
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024a:	480e      	ldr	r0, [pc, #56]	@ (8000284 <LCD_Write_Data+0x5c>)
 800024c:	f001 fa3e 	bl	80016cc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_SET); //LCD_E_Pin = 1;
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000256:	480b      	ldr	r0, [pc, #44]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000258:	f001 fa38 	bl	80016cc <HAL_GPIO_WritePin>

	 HAL_Delay(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 fc93 	bl	8000b88 <HAL_Delay>
	 //Delay_ms(1);

	 LCD_PORT = dat;
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <LCD_Write_Data+0x60>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	60d3      	str	r3, [r2, #12]

	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_RESET);  //Set LCD_E = 0;
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800026e:	4805      	ldr	r0, [pc, #20]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000270:	f001 fa2c 	bl	80016cc <HAL_GPIO_WritePin>

	 HAL_Delay(1);
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fc87 	bl	8000b88 <HAL_Delay>

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40010c00 	.word	0x40010c00
 8000288:	40010800 	.word	0x40010800

0800028c <LCD_Set_Position>:

 return state;
}

void LCD_Set_Position(uchar x,uchar y)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	460a      	mov	r2, r1
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	4613      	mov	r3, r2
 800029a:	71bb      	strb	r3, [r7, #6]
	 if(y==0)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d106      	bne.n	80002b0 <LCD_Set_Position+0x24>
	 {
		 LCD_Write_Command(0x80+x);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	3b80      	subs	r3, #128	@ 0x80
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff8b 	bl	80001c4 <LCD_Write_Command>
	 {
		 LCD_Write_Command(0xc0+x);
	 }
	 else;

}
 80002ae:	e008      	b.n	80002c2 <LCD_Set_Position+0x36>
	 else if(y==1)
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d105      	bne.n	80002c2 <LCD_Set_Position+0x36>
		 LCD_Write_Command(0xc0+x);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	3b40      	subs	r3, #64	@ 0x40
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff81 	bl	80001c4 <LCD_Write_Command>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <LCD_Display_Char>:

void LCD_Display_Char(uchar Char,uchar x,uchar y)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	460b      	mov	r3, r1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	4613      	mov	r3, r2
 80002da:	717b      	strb	r3, [r7, #5]
	LCD_Set_Position(x,y);
 80002dc:	797a      	ldrb	r2, [r7, #5]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffd2 	bl	800028c <LCD_Set_Position>
	LCD_Write_Data(Char);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff9c 	bl	8000228 <LCD_Write_Data>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <LCD_Display_String>:

void LCD_Display_String(uchar x,uchar y,uchar *str)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	603a      	str	r2, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	460b      	mov	r3, r1
 8000306:	71bb      	strb	r3, [r7, #6]
	LCD_Set_Position(x,y);
 8000308:	79ba      	ldrb	r2, [r7, #6]
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4611      	mov	r1, r2
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffbc 	bl	800028c <LCD_Set_Position>
	while(*str !='\0')
 8000314:	e009      	b.n	800032a <LCD_Display_String+0x32>
	{
		LCD_Write_Data(*str++);
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	1c5a      	adds	r2, r3, #1
 800031a:	603a      	str	r2, [r7, #0]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff82 	bl	8000228 <LCD_Write_Data>
		HAL_Delay(1);
 8000324:	2001      	movs	r0, #1
 8000326:	f000 fc2f 	bl	8000b88 <HAL_Delay>
	while(*str !='\0')
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1f1      	bne.n	8000316 <LCD_Display_String+0x1e>
	}
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800034e:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <MX_ADC1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000352:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000358:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000364:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000366:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800036a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036c:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000372:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <MX_ADC1_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	480d      	ldr	r0, [pc, #52]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800037a:	f000 fc29 	bl	8000bd0 <HAL_ADC_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000384:	f000 fac0 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000388:	2308      	movs	r3, #8
 800038a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038c:	2301      	movs	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_ADC1_Init+0x74>)
 800039a:	f000 fdc3 	bl	8000f24 <HAL_ADC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003a4:	f000 fab0 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000080 	.word	0x20000080
 80003b4:	40012400 	.word	0x40012400

080003b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a18      	ldr	r2, [pc, #96]	@ (8000434 <HAL_ADC_MspInit+0x7c>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d129      	bne.n	800042c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003d8:	4b17      	ldr	r3, [pc, #92]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a16      	ldr	r2, [pc, #88]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b14      	ldr	r3, [pc, #80]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <HAL_ADC_MspInit+0x80>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0308 	and.w	r3, r3, #8
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = load_cell_Pin;
 8000408:	2301      	movs	r3, #1
 800040a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800040c:	2303      	movs	r3, #3
 800040e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(load_cell_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4809      	ldr	r0, [pc, #36]	@ (800043c <HAL_ADC_MspInit+0x84>)
 8000418:	f000 ffd4 	bl	80013c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	2012      	movs	r0, #18
 8000422:	f000 ff98 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000426:	2012      	movs	r0, #18
 8000428:	f000 ffb1 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40012400 	.word	0x40012400
 8000438:	40021000 	.word	0x40021000
 800043c:	40010c00 	.word	0x40010c00

08000440 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000454:	4b45      	ldr	r3, [pc, #276]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a44      	ldr	r2, [pc, #272]	@ (800056c <MX_GPIO_Init+0x12c>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b42      	ldr	r3, [pc, #264]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046c:	4b3f      	ldr	r3, [pc, #252]	@ (800056c <MX_GPIO_Init+0x12c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a3e      	ldr	r2, [pc, #248]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b3c      	ldr	r3, [pc, #240]	@ (800056c <MX_GPIO_Init+0x12c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0320 	and.w	r3, r3, #32
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b39      	ldr	r3, [pc, #228]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a38      	ldr	r2, [pc, #224]	@ (800056c <MX_GPIO_Init+0x12c>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b36      	ldr	r3, [pc, #216]	@ (800056c <MX_GPIO_Init+0x12c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049c:	4b33      	ldr	r3, [pc, #204]	@ (800056c <MX_GPIO_Init+0x12c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a32      	ldr	r2, [pc, #200]	@ (800056c <MX_GPIO_Init+0x12c>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b30      	ldr	r3, [pc, #192]	@ (800056c <MX_GPIO_Init+0x12c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0308 	and.w	r3, r3, #8
 80004b0:	603b      	str	r3, [r7, #0]
 80004b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 80004b4:	2200      	movs	r2, #0
 80004b6:	21ff      	movs	r1, #255	@ 0xff
 80004b8:	482d      	ldr	r0, [pc, #180]	@ (8000570 <MX_GPIO_Init+0x130>)
 80004ba:	f001 f907 	bl	80016cc <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, buzzer_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 41e8 	mov.w	r1, #29696	@ 0x7400
 80004c4:	482b      	ldr	r0, [pc, #172]	@ (8000574 <MX_GPIO_Init+0x134>)
 80004c6:	f001 f901 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 80004ca:	23ff      	movs	r3, #255	@ 0xff
 80004cc:	613b      	str	r3, [r7, #16]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4823      	ldr	r0, [pc, #140]	@ (8000570 <MX_GPIO_Init+0x130>)
 80004e2:	f000 ff6f 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 80004e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	481d      	ldr	r0, [pc, #116]	@ (8000574 <MX_GPIO_Init+0x134>)
 8000500:	f000 ff60 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
 8000504:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000512:	2301      	movs	r3, #1
 8000514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	4815      	ldr	r0, [pc, #84]	@ (8000574 <MX_GPIO_Init+0x134>)
 800051e:	f000 ff51 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = dec_Pin;
 8000522:	2320      	movs	r3, #32
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000526:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <MX_GPIO_Init+0x138>)
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(dec_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	4619      	mov	r1, r3
 8000534:	480f      	ldr	r0, [pc, #60]	@ (8000574 <MX_GPIO_Init+0x134>)
 8000536:	f000 ff45 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = inc_Pin|button_Pin;
 800053a:	23c0      	movs	r3, #192	@ 0xc0
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <MX_GPIO_Init+0x138>)
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000542:	2301      	movs	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4809      	ldr	r0, [pc, #36]	@ (8000574 <MX_GPIO_Init+0x134>)
 800054e:	f000 ff39 	bl	80013c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2101      	movs	r1, #1
 8000556:	2017      	movs	r0, #23
 8000558:	f000 fefd 	bl	8001356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800055c:	2017      	movs	r0, #23
 800055e:	f000 ff16 	bl	800138e <HAL_NVIC_EnableIRQ>

}
 8000562:	bf00      	nop
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000
 8000570:	40010800 	.word	0x40010800
 8000574:	40010c00 	.word	0x40010c00
 8000578:	10210000 	.word	0x10210000

0800057c <inc_time>:

int paused_buffer = 0;

char mode = 't';// t = timer, p = pause, s = set

void inc_time(int* _h, int* _m, int* _s, char* str){
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af02      	add	r7, sp, #8
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
	*(_s) = *(_s)+1;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
		if(*_s == 60){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b3c      	cmp	r3, #60	@ 0x3c
 800059a:	d113      	bne.n	80005c4 <inc_time+0x48>
			*_s = 0;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
			*(_m) = *(_m)+1;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	601a      	str	r2, [r3, #0]
			if(*_m == 60){
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80005b2:	d107      	bne.n	80005c4 <inc_time+0x48>
				*_m = 0;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
				*(_h)= *(_h)+1;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	601a      	str	r2, [r3, #0]
			}
		}

	int buffer = sprintf(str, "%d : %d : %d", *_h, *_m,*_s);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	6819      	ldr	r1, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	460b      	mov	r3, r1
 80005d4:	4904      	ldr	r1, [pc, #16]	@ (80005e8 <inc_time+0x6c>)
 80005d6:	6838      	ldr	r0, [r7, #0]
 80005d8:	f001 fd3c 	bl	8002054 <siprintf>
 80005dc:	6178      	str	r0, [r7, #20]

}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	080029cc 	.word	0x080029cc

080005ec <inc_pause_time>:

void inc_pause_time(char* str){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
		inc_time(&ph, &pm, &ps, str);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <inc_pause_time+0x1c>)
 80005f8:	4904      	ldr	r1, [pc, #16]	@ (800060c <inc_pause_time+0x20>)
 80005fa:	4805      	ldr	r0, [pc, #20]	@ (8000610 <inc_pause_time+0x24>)
 80005fc:	f7ff ffbe 	bl	800057c <inc_time>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000c0 	.word	0x200000c0
 800060c:	200000bc 	.word	0x200000bc
 8000610:	200000b8 	.word	0x200000b8

08000614 <dec_timer_time>:

void dec_timer_time(char* str){
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	if(s > 0 || m  > 0|| h > 0){
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <dec_timer_time+0x80>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	dc07      	bgt.n	8000634 <dec_timer_time+0x20>
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <dec_timer_time+0x84>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	dc03      	bgt.n	8000634 <dec_timer_time+0x20>
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <dec_timer_time+0x88>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	dd2b      	ble.n	800068c <dec_timer_time+0x78>
		s--;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <dec_timer_time+0x80>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <dec_timer_time+0x80>)
 800063c:	6013      	str	r3, [r2, #0]
			if(s == -1){
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <dec_timer_time+0x80>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000646:	d114      	bne.n	8000672 <dec_timer_time+0x5e>
				m--;
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <dec_timer_time+0x84>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <dec_timer_time+0x84>)
 8000650:	6013      	str	r3, [r2, #0]
				s = 59;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <dec_timer_time+0x80>)
 8000654:	223b      	movs	r2, #59	@ 0x3b
 8000656:	601a      	str	r2, [r3, #0]
				if(m == -1){
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <dec_timer_time+0x84>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000660:	d107      	bne.n	8000672 <dec_timer_time+0x5e>
					h--;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <dec_timer_time+0x88>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <dec_timer_time+0x88>)
 800066a:	6013      	str	r3, [r2, #0]
					m = 59;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <dec_timer_time+0x84>)
 800066e:	223b      	movs	r2, #59	@ 0x3b
 8000670:	601a      	str	r2, [r3, #0]
				}
			}
		int buffer = sprintf(str, "%d : %d : %d", h, m, s);
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <dec_timer_time+0x88>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <dec_timer_time+0x84>)
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <dec_timer_time+0x80>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	460b      	mov	r3, r1
 8000682:	4907      	ldr	r1, [pc, #28]	@ (80006a0 <dec_timer_time+0x8c>)
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fce5 	bl	8002054 <siprintf>
 800068a:	60f8      	str	r0, [r7, #12]
	}
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	200000b4 	.word	0x200000b4
 800069c:	200000b0 	.word	0x200000b0
 80006a0:	080029cc 	.word	0x080029cc

080006a4 <set_time>:

void set_time(int _h, int _m, int _s, char* str){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	603b      	str	r3, [r7, #0]
	h = _h;
 80006b2:	4a0d      	ldr	r2, [pc, #52]	@ (80006e8 <set_time+0x44>)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	6013      	str	r3, [r2, #0]
	m = _m;
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <set_time+0x48>)
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	6013      	str	r3, [r2, #0]
	s = _s;
 80006be:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <set_time+0x4c>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6013      	str	r3, [r2, #0]
	int buffer = sprintf(str, "%d : %d : %d", h, m, s);
 80006c4:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <set_time+0x44>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <set_time+0x48>)
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <set_time+0x4c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	460b      	mov	r3, r1
 80006d4:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <set_time+0x50>)
 80006d6:	6838      	ldr	r0, [r7, #0]
 80006d8:	f001 fcbc 	bl	8002054 <siprintf>
 80006dc:	6178      	str	r0, [r7, #20]
}
 80006de:	bf00      	nop
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000b0 	.word	0x200000b0
 80006ec:	200000b4 	.word	0x200000b4
 80006f0:	20000000 	.word	0x20000000
 80006f4:	080029cc 	.word	0x080029cc

080006f8 <perform_action>:

void perform_action(char* str){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	switch (mode){
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <perform_action+0x74>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b74      	cmp	r3, #116	@ 0x74
 8000706:	d016      	beq.n	8000736 <perform_action+0x3e>
 8000708:	2b74      	cmp	r3, #116	@ 0x74
 800070a:	dc21      	bgt.n	8000750 <perform_action+0x58>
 800070c:	2b70      	cmp	r3, #112	@ 0x70
 800070e:	d002      	beq.n	8000716 <perform_action+0x1e>
 8000710:	2b73      	cmp	r3, #115	@ 0x73
 8000712:	d009      	beq.n	8000728 <perform_action+0x30>
 8000714:	e01c      	b.n	8000750 <perform_action+0x58>
		case 'p':
			inc_pause_time(str);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff68 	bl	80005ec <inc_pause_time>
			paused_buffer++;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <perform_action+0x78>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	4a13      	ldr	r2, [pc, #76]	@ (8000770 <perform_action+0x78>)
 8000724:	6013      	str	r3, [r2, #0]
			break;
 8000726:	e013      	b.n	8000750 <perform_action+0x58>
		case 's':
			set_time(0, 1, 0, str);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	2101      	movs	r1, #1
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff ffb8 	bl	80006a4 <set_time>
			break;
 8000734:	e00c      	b.n	8000750 <perform_action+0x58>
		case 't':
			paused_buffer = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <perform_action+0x78>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000742:	480c      	ldr	r0, [pc, #48]	@ (8000774 <perform_action+0x7c>)
 8000744:	f000 ffc2 	bl	80016cc <HAL_GPIO_WritePin>
			dec_timer_time(str);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff63 	bl	8000614 <dec_timer_time>
			break;
 800074e:	bf00      	nop
	}
	if(paused_buffer >= 10){
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <perform_action+0x78>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b09      	cmp	r3, #9
 8000756:	dd05      	ble.n	8000764 <perform_action+0x6c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <perform_action+0x7c>)
 8000760:	f000 ffb4 	bl	80016cc <HAL_GPIO_WritePin>
	}
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000004 	.word	0x20000004
 8000770:	200000c4 	.word	0x200000c4
 8000774:	40010c00 	.word	0x40010c00

08000778 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == button_Pin){
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	2b80      	cmp	r3, #128	@ 0x80
 8000786:	d10f      	bne.n	80007a8 <HAL_GPIO_EXTI_Callback+0x30>
		if(mode == 't'){ //logic could be improved here but wtv
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b74      	cmp	r3, #116	@ 0x74
 800078e:	d103      	bne.n	8000798 <HAL_GPIO_EXTI_Callback+0x20>
				mode = 'p';
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000792:	2270      	movs	r2, #112	@ 0x70
 8000794:	701a      	strb	r2, [r3, #0]
		} else {
			mode = 't';
		}

	}
}
 8000796:	e015      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x4c>
			} else if (mode == 'p'){
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b70      	cmp	r3, #112	@ 0x70
 800079e:	d111      	bne.n	80007c4 <HAL_GPIO_EXTI_Callback+0x4c>
				mode = 't';
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x58>)
 80007a2:	2274      	movs	r2, #116	@ 0x74
 80007a4:	701a      	strb	r2, [r3, #0]
}
 80007a6:	e00d      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x4c>
	} else if(GPIO_Pin == inc_Pin){
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	2b40      	cmp	r3, #64	@ 0x40
 80007ac:	d10a      	bne.n	80007c4 <HAL_GPIO_EXTI_Callback+0x4c>
		if(mode != 's'){
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x58>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b73      	cmp	r3, #115	@ 0x73
 80007b4:	d003      	beq.n	80007be <HAL_GPIO_EXTI_Callback+0x46>
			mode = 's';
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x58>)
 80007b8:	2273      	movs	r2, #115	@ 0x73
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	e002      	b.n	80007c4 <HAL_GPIO_EXTI_Callback+0x4c>
			mode = 't';
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x58>)
 80007c0:	2274      	movs	r2, #116	@ 0x74
 80007c2:	701a      	strb	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000004 	.word	0x20000004

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b090      	sub	sp, #64	@ 0x40
 80007d8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	char string_val [50];
	int buffer = sprintf(string_val, "%d : %d : %d", h, m, s);
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <main+0x70>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <main+0x74>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <main+0x78>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4638      	mov	r0, r7
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	460b      	mov	r3, r1
 80007ec:	4918      	ldr	r1, [pc, #96]	@ (8000850 <main+0x7c>)
 80007ee:	f001 fc31 	bl	8002054 <siprintf>
 80007f2:	6378      	str	r0, [r7, #52]	@ 0x34
	mode = 't';
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <main+0x80>)
 80007f6:	2274      	movs	r2, #116	@ 0x74
 80007f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 f963 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f82b 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f7ff fe1d 	bl	8000440 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000806:	f7ff fd99 	bl	800033c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 800080a:	f7ff fc9f 	bl	800014c <LCD_init>
  LCD_Clear();
 800080e:	f7ff fcd1 	bl	80001b4 <LCD_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //perform_action(string_val);
	  LCD_Display_String((uchar)0, (uchar)0, (uchar*)string_val);
 8000812:	463b      	mov	r3, r7
 8000814:	461a      	mov	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fd6d 	bl	80002f8 <LCD_Display_String>
	  LCD_Display_Char((uchar)mode , (uchar)0, (uchar)1);
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <main+0x80>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2201      	movs	r2, #1
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd4f 	bl	80002ca <LCD_Display_Char>
	  HAL_Delay(500);
 800082c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000830:	f000 f9aa 	bl	8000b88 <HAL_Delay>
	  perform_action(string_val);
 8000834:	463b      	mov	r3, r7
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff5e 	bl	80006f8 <perform_action>
	  LCD_Clear();
 800083c:	f7ff fcba 	bl	80001b4 <LCD_Clear>
	  LCD_Display_String((uchar)0, (uchar)0, (uchar*)string_val);
 8000840:	bf00      	nop
 8000842:	e7e6      	b.n	8000812 <main+0x3e>
 8000844:	200000b0 	.word	0x200000b0
 8000848:	200000b4 	.word	0x200000b4
 800084c:	20000000 	.word	0x20000000
 8000850:	080029cc 	.word	0x080029cc
 8000854:	20000004 	.word	0x20000004

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	@ 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000862:	2228      	movs	r2, #40	@ 0x28
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fc14 	bl	8002094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000896:	2301      	movs	r3, #1
 8000898:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80008a4:	2300      	movs	r3, #0
 80008a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 ff3d 	bl	800172c <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80008b8:	f000 f826 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f9aa 	bl	8001c30 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008e2:	f000 f811 	bl	8000908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008e6:	2302      	movs	r3, #2
 80008e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 faf9 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008fc:	f000 f804 	bl	8000908 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	3750      	adds	r7, #80	@ 0x50
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <HAL_MspInit+0x5c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a14      	ldr	r2, [pc, #80]	@ (8000970 <HAL_MspInit+0x5c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_MspInit+0x5c>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x5c>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_MspInit+0x5c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_MspInit+0x5c>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_MspInit+0x60>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_MspInit+0x60>)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000
 8000974:	40010000 	.word	0x40010000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8c2 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <ADC1_2_IRQHandler+0x10>)
 80009d6:	f000 f9d3 	bl	8000d80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000080 	.word	0x20000080

080009e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(dec_Pin);
 80009e8:	2020      	movs	r0, #32
 80009ea:	f000 fe87 	bl	80016fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(inc_Pin);
 80009ee:	2040      	movs	r0, #64	@ 0x40
 80009f0:	f000 fe84 	bl	80016fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80009f4:	2080      	movs	r0, #128	@ 0x80
 80009f6:	f000 fe81 	bl	80016fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f001 fb38 	bl	80020a4 <__errno>
 8000a34:	4603      	mov	r3, r0
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20005000 	.word	0x20005000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	200000c8 	.word	0x200000c8
 8000a68:	20000218 	.word	0x20000218

08000a6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff fff8 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480b      	ldr	r0, [pc, #44]	@ (8000aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a7e:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a80:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a09      	ldr	r2, [pc, #36]	@ (8000ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a94:	4c09      	ldr	r4, [pc, #36]	@ (8000abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f001 fb05 	bl	80020b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff fe95 	bl	80007d4 <main>
  bx lr
 8000aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ab4:	08002a3c 	.word	0x08002a3c
  ldr r2, =_sbss
 8000ab8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000abc:	20000218 	.word	0x20000218

08000ac0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <CAN1_RX1_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_Init+0x28>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <HAL_Init+0x28>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fc33 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff ff18 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40022000 	.word	0x40022000

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fc4b 	bl	80013aa <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 fc13 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	@ (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	2000000c 	.word	0x2000000c

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	200000cc 	.word	0x200000cc

08000b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	@ (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	200000cc 	.word	0x200000cc

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff fff0 	bl	8000b74 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000010 	.word	0x20000010

08000bd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e0be      	b.n	8000d70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d109      	bne.n	8000c14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fbd2 	bl	80003b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 fa7d 	bl	8001114 <ADC_ConversionStop_Disable>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f040 8099 	bne.w	8000d5e <HAL_ADC_Init+0x18e>
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 8095 	bne.w	8000d5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c3c:	f023 0302 	bic.w	r3, r3, #2
 8000c40:	f043 0202 	orr.w	r2, r3, #2
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7b1b      	ldrb	r3, [r3, #12]
 8000c56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c68:	d003      	beq.n	8000c72 <HAL_ADC_Init+0xa2>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d102      	bne.n	8000c78 <HAL_ADC_Init+0xa8>
 8000c72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c76:	e000      	b.n	8000c7a <HAL_ADC_Init+0xaa>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7d1b      	ldrb	r3, [r3, #20]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d119      	bne.n	8000cbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7b1b      	ldrb	r3, [r3, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d109      	bne.n	8000ca4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	035a      	lsls	r2, r3, #13
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	e00b      	b.n	8000cbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca8:	f043 0220 	orr.w	r2, r3, #32
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <HAL_ADC_Init+0x1a8>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cec:	d003      	beq.n	8000cf6 <HAL_ADC_Init+0x126>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	051b      	lsls	r3, r3, #20
 8000cfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d06:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_ADC_Init+0x1ac>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d10b      	bne.n	8000d3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2e:	f023 0303 	bic.w	r3, r3, #3
 8000d32:	f043 0201 	orr.w	r2, r3, #1
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d3a:	e018      	b.n	8000d6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d40:	f023 0312 	bic.w	r3, r3, #18
 8000d44:	f043 0210 	orr.w	r2, r3, #16
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5c:	e007      	b.n	8000d6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d62:	f043 0210 	orr.w	r2, r3, #16
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	ffe1f7fd 	.word	0xffe1f7fd
 8000d7c:	ff1f0efe 	.word	0xff1f0efe

08000d80 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03e      	beq.n	8000e20 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d039      	beq.n	8000e20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d105      	bne.n	8000dc4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000dce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000dd2:	d11d      	bne.n	8000e10 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d119      	bne.n	8000e10 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0220 	bic.w	r2, r2, #32
 8000dea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e08:	f043 0201 	orr.w	r2, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f874 	bl	8000efe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f06f 0212 	mvn.w	r2, #18
 8000e1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d04d      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d048      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d105      	bne.n	8000e4c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000e56:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000e5a:	d012      	beq.n	8000e82 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d125      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e74:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e78:	d11d      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d119      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e90:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d105      	bne.n	8000eb6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f96d 	bl	8001196 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f06f 020c 	mvn.w	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d012      	beq.n	8000ef6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00d      	beq.n	8000ef6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ede:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f812 	bl	8000f10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f06f 0201 	mvn.w	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x20>
 8000f40:	2302      	movs	r3, #2
 8000f42:	e0dc      	b.n	80010fe <HAL_ADC_ConfigChannel+0x1da>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b06      	cmp	r3, #6
 8000f52:	d81c      	bhi.n	8000f8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	3b05      	subs	r3, #5
 8000f66:	221f      	movs	r2, #31
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4019      	ands	r1, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b05      	subs	r3, #5
 8000f80:	fa00 f203 	lsl.w	r2, r0, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8c:	e03c      	b.n	8001008 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d81c      	bhi.n	8000fd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3b23      	subs	r3, #35	@ 0x23
 8000fa8:	221f      	movs	r2, #31
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4019      	ands	r1, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3b23      	subs	r3, #35	@ 0x23
 8000fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fce:	e01b      	b.n	8001008 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b41      	subs	r3, #65	@ 0x41
 8000fe2:	221f      	movs	r2, #31
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4019      	ands	r1, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3b41      	subs	r3, #65	@ 0x41
 8000ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b09      	cmp	r3, #9
 800100e:	d91c      	bls.n	800104a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68d9      	ldr	r1, [r3, #12]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	3b1e      	subs	r3, #30
 8001022:	2207      	movs	r2, #7
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4019      	ands	r1, r3
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	6898      	ldr	r0, [r3, #8]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	3b1e      	subs	r3, #30
 800103c:	fa00 f203 	lsl.w	r2, r0, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	e019      	b.n	800107e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6919      	ldr	r1, [r3, #16]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	2207      	movs	r2, #7
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	4019      	ands	r1, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6898      	ldr	r0, [r3, #8]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	fa00 f203 	lsl.w	r2, r0, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b10      	cmp	r3, #16
 8001084:	d003      	beq.n	800108e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800108a:	2b11      	cmp	r3, #17
 800108c:	d132      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a1d      	ldr	r2, [pc, #116]	@ (8001108 <HAL_ADC_ConfigChannel+0x1e4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d125      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d126      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80010b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	d11a      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_ADC_ConfigChannel+0x1e8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a13      	ldr	r2, [pc, #76]	@ (8001110 <HAL_ADC_ConfigChannel+0x1ec>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	0c9a      	lsrs	r2, r3, #18
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010d4:	e002      	b.n	80010dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	3b01      	subs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f9      	bne.n	80010d6 <HAL_ADC_ConfigChannel+0x1b2>
 80010e2:	e007      	b.n	80010f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e8:	f043 0220 	orr.w	r2, r3, #32
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40012400 	.word	0x40012400
 800110c:	20000008 	.word	0x20000008
 8001110:	431bde83 	.word	0x431bde83

08001114 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b01      	cmp	r3, #1
 800112c:	d12e      	bne.n	800118c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0201 	bic.w	r2, r2, #1
 800113c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800113e:	f7ff fd19 	bl	8000b74 <HAL_GetTick>
 8001142:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001144:	e01b      	b.n	800117e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001146:	f7ff fd15 	bl	8000b74 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d914      	bls.n	800117e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10d      	bne.n	800117e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001166:	f043 0210 	orr.w	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e007      	b.n	800118e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	d0dc      	beq.n	8001146 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4906      	ldr	r1, [pc, #24]	@ (8001240 <__NVIC_EnableIRQ+0x34>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	@ (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	@ (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff90 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	@ (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff2d 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff42 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff35 	bl	800120c <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b08b      	sub	sp, #44	@ 0x2c
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	e169      	b.n	80016ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d8:	2201      	movs	r2, #1
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 8158 	bne.w	80016a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a9a      	ldr	r2, [pc, #616]	@ (8001664 <HAL_GPIO_Init+0x2a0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d05e      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001400:	4a98      	ldr	r2, [pc, #608]	@ (8001664 <HAL_GPIO_Init+0x2a0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d875      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001406:	4a98      	ldr	r2, [pc, #608]	@ (8001668 <HAL_GPIO_Init+0x2a4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d058      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 800140c:	4a96      	ldr	r2, [pc, #600]	@ (8001668 <HAL_GPIO_Init+0x2a4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d86f      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001412:	4a96      	ldr	r2, [pc, #600]	@ (800166c <HAL_GPIO_Init+0x2a8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d052      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001418:	4a94      	ldr	r2, [pc, #592]	@ (800166c <HAL_GPIO_Init+0x2a8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d869      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800141e:	4a94      	ldr	r2, [pc, #592]	@ (8001670 <HAL_GPIO_Init+0x2ac>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d04c      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001424:	4a92      	ldr	r2, [pc, #584]	@ (8001670 <HAL_GPIO_Init+0x2ac>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d863      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800142a:	4a92      	ldr	r2, [pc, #584]	@ (8001674 <HAL_GPIO_Init+0x2b0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d046      	beq.n	80014be <HAL_GPIO_Init+0xfa>
 8001430:	4a90      	ldr	r2, [pc, #576]	@ (8001674 <HAL_GPIO_Init+0x2b0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d85d      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 8001436:	2b12      	cmp	r3, #18
 8001438:	d82a      	bhi.n	8001490 <HAL_GPIO_Init+0xcc>
 800143a:	2b12      	cmp	r3, #18
 800143c:	d859      	bhi.n	80014f2 <HAL_GPIO_Init+0x12e>
 800143e:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <HAL_GPIO_Init+0x80>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	080014bf 	.word	0x080014bf
 8001448:	08001499 	.word	0x08001499
 800144c:	080014ab 	.word	0x080014ab
 8001450:	080014ed 	.word	0x080014ed
 8001454:	080014f3 	.word	0x080014f3
 8001458:	080014f3 	.word	0x080014f3
 800145c:	080014f3 	.word	0x080014f3
 8001460:	080014f3 	.word	0x080014f3
 8001464:	080014f3 	.word	0x080014f3
 8001468:	080014f3 	.word	0x080014f3
 800146c:	080014f3 	.word	0x080014f3
 8001470:	080014f3 	.word	0x080014f3
 8001474:	080014f3 	.word	0x080014f3
 8001478:	080014f3 	.word	0x080014f3
 800147c:	080014f3 	.word	0x080014f3
 8001480:	080014f3 	.word	0x080014f3
 8001484:	080014f3 	.word	0x080014f3
 8001488:	080014a1 	.word	0x080014a1
 800148c:	080014b5 	.word	0x080014b5
 8001490:	4a79      	ldr	r2, [pc, #484]	@ (8001678 <HAL_GPIO_Init+0x2b4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001496:	e02c      	b.n	80014f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e029      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	3304      	adds	r3, #4
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e024      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	3308      	adds	r3, #8
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e01f      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	330c      	adds	r3, #12
 80014ba:	623b      	str	r3, [r7, #32]
          break;
 80014bc:	e01a      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014c6:	2304      	movs	r3, #4
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e013      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d4:	2308      	movs	r3, #8
 80014d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	611a      	str	r2, [r3, #16]
          break;
 80014de:	e009      	b.n	80014f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	615a      	str	r2, [r3, #20]
          break;
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x130>
          break;
 80014f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	@ 0xff
 80014f8:	d801      	bhi.n	80014fe <HAL_GPIO_Init+0x13a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	e001      	b.n	8001502 <HAL_GPIO_Init+0x13e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3304      	adds	r3, #4
 8001502:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2bff      	cmp	r3, #255	@ 0xff
 8001508:	d802      	bhi.n	8001510 <HAL_GPIO_Init+0x14c>
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x152>
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	3b08      	subs	r3, #8
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	210f      	movs	r1, #15
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	6a39      	ldr	r1, [r7, #32]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	431a      	orrs	r2, r3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80b1 	beq.w	80016a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001544:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <HAL_GPIO_Init+0x2b8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <HAL_GPIO_Init+0x2b8>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x2b8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800155c:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <HAL_GPIO_Init+0x2bc>)
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a40      	ldr	r2, [pc, #256]	@ (8001684 <HAL_GPIO_Init+0x2c0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d013      	beq.n	80015b0 <HAL_GPIO_Init+0x1ec>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3f      	ldr	r2, [pc, #252]	@ (8001688 <HAL_GPIO_Init+0x2c4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1e8>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a3e      	ldr	r2, [pc, #248]	@ (800168c <HAL_GPIO_Init+0x2c8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1e4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a3d      	ldr	r2, [pc, #244]	@ (8001690 <HAL_GPIO_Init+0x2cc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1e0>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e006      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015a4:	2304      	movs	r3, #4
 80015a6:	e004      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e002      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_GPIO_Init+0x1ee>
 80015b0:	2300      	movs	r3, #0
 80015b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b4:	f002 0203 	and.w	r2, r2, #3
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	4093      	lsls	r3, r2
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015c2:	492f      	ldr	r1, [pc, #188]	@ (8001680 <HAL_GPIO_Init+0x2bc>)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	492c      	ldr	r1, [pc, #176]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4928      	ldr	r1, [pc, #160]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001604:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4922      	ldr	r1, [pc, #136]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001612:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	43db      	mvns	r3, r3
 800161a:	491e      	ldr	r1, [pc, #120]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800161c:	4013      	ands	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4918      	ldr	r1, [pc, #96]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	43db      	mvns	r3, r3
 8001642:	4914      	ldr	r1, [pc, #80]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001644:	4013      	ands	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d021      	beq.n	8001698 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	490e      	ldr	r1, [pc, #56]	@ (8001694 <HAL_GPIO_Init+0x2d0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e021      	b.n	80016a6 <HAL_GPIO_Init+0x2e2>
 8001662:	bf00      	nop
 8001664:	10320000 	.word	0x10320000
 8001668:	10310000 	.word	0x10310000
 800166c:	10220000 	.word	0x10220000
 8001670:	10210000 	.word	0x10210000
 8001674:	10120000 	.word	0x10120000
 8001678:	10110000 	.word	0x10110000
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	40010800 	.word	0x40010800
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40011000 	.word	0x40011000
 8001690:	40011400 	.word	0x40011400
 8001694:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_GPIO_Init+0x304>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	43db      	mvns	r3, r3
 80016a0:	4909      	ldr	r1, [pc, #36]	@ (80016c8 <HAL_GPIO_Init+0x304>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	3301      	adds	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f47f ae8e 	bne.w	80013d8 <HAL_GPIO_Init+0x14>
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	372c      	adds	r7, #44	@ 0x2c
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	611a      	str	r2, [r3, #16]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f82c 	bl	8000778 <HAL_GPIO_EXTI_Callback>
  }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010400 	.word	0x40010400

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e272      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8087 	beq.w	800185a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800174c:	4b92      	ldr	r3, [pc, #584]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b04      	cmp	r3, #4
 8001756:	d00c      	beq.n	8001772 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001758:	4b8f      	ldr	r3, [pc, #572]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d112      	bne.n	800178a <HAL_RCC_OscConfig+0x5e>
 8001764:	4b8c      	ldr	r3, [pc, #560]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d10b      	bne.n	800178a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	4b89      	ldr	r3, [pc, #548]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d06c      	beq.n	8001858 <HAL_RCC_OscConfig+0x12c>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d168      	bne.n	8001858 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e24c      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x76>
 8001794:	4b80      	ldr	r3, [pc, #512]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a7f      	ldr	r2, [pc, #508]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e02e      	b.n	8001800 <HAL_RCC_OscConfig+0xd4>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x98>
 80017aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a7a      	ldr	r2, [pc, #488]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b78      	ldr	r3, [pc, #480]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a77      	ldr	r2, [pc, #476]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e01d      	b.n	8001800 <HAL_RCC_OscConfig+0xd4>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0xbc>
 80017ce:	4b72      	ldr	r3, [pc, #456]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a71      	ldr	r2, [pc, #452]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b6f      	ldr	r3, [pc, #444]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6e      	ldr	r2, [pc, #440]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0xd4>
 80017e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b68      	ldr	r3, [pc, #416]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a67      	ldr	r2, [pc, #412]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d013      	beq.n	8001830 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff f9b4 	bl	8000b74 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff f9b0 	bl	8000b74 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	@ 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e200      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b5d      	ldr	r3, [pc, #372]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0xe4>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff f9a0 	bl	8000b74 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff f99c 	bl	8000b74 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	@ 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e1ec      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x10c>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d063      	beq.n	800192e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001866:	4b4c      	ldr	r3, [pc, #304]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001872:	4b49      	ldr	r3, [pc, #292]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b08      	cmp	r3, #8
 800187c:	d11c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x18c>
 800187e:	4b46      	ldr	r3, [pc, #280]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d116      	bne.n	80018b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <HAL_RCC_OscConfig+0x176>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e1c0      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4939      	ldr	r1, [pc, #228]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	e03a      	b.n	800192e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b36      	ldr	r3, [pc, #216]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f955 	bl	8000b74 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff f951 	bl	8000b74 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1a1      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4927      	ldr	r1, [pc, #156]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
 8001900:	e015      	b.n	800192e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001902:	4b26      	ldr	r3, [pc, #152]	@ (800199c <HAL_RCC_OscConfig+0x270>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f934 	bl	8000b74 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001910:	f7ff f930 	bl	8000b74 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e180      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d03a      	beq.n	80019b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d019      	beq.n	8001976 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <HAL_RCC_OscConfig+0x274>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff f914 	bl	8000b74 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff f910 	bl	8000b74 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e160      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <HAL_RCC_OscConfig+0x26c>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f000 fa9c 	bl	8001eac <RCC_Delay>
 8001974:	e01c      	b.n	80019b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_RCC_OscConfig+0x274>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff f8fa 	bl	8000b74 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001982:	e00f      	b.n	80019a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff f8f6 	bl	8000b74 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d908      	bls.n	80019a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e146      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	42420000 	.word	0x42420000
 80019a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	4b92      	ldr	r3, [pc, #584]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e9      	bne.n	8001984 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80a6 	beq.w	8001b0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c2:	4b8b      	ldr	r3, [pc, #556]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10d      	bne.n	80019ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b88      	ldr	r3, [pc, #544]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a87      	ldr	r2, [pc, #540]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	61d3      	str	r3, [r2, #28]
 80019da:	4b85      	ldr	r3, [pc, #532]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e6:	2301      	movs	r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ea:	4b82      	ldr	r3, [pc, #520]	@ (8001bf4 <HAL_RCC_OscConfig+0x4c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf4 <HAL_RCC_OscConfig+0x4c8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7e      	ldr	r2, [pc, #504]	@ (8001bf4 <HAL_RCC_OscConfig+0x4c8>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a02:	f7ff f8b7 	bl	8000b74 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0a:	f7ff f8b3 	bl	8000b74 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b64      	cmp	r3, #100	@ 0x64
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e103      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4b75      	ldr	r3, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x4c8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d106      	bne.n	8001a3e <HAL_RCC_OscConfig+0x312>
 8001a30:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a6e      	ldr	r2, [pc, #440]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	e02d      	b.n	8001a9a <HAL_RCC_OscConfig+0x36e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x334>
 8001a46:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a69      	ldr	r2, [pc, #420]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6213      	str	r3, [r2, #32]
 8001a52:	4b67      	ldr	r3, [pc, #412]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a66      	ldr	r2, [pc, #408]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	e01c      	b.n	8001a9a <HAL_RCC_OscConfig+0x36e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d10c      	bne.n	8001a82 <HAL_RCC_OscConfig+0x356>
 8001a68:	4b61      	ldr	r3, [pc, #388]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a60      	ldr	r2, [pc, #384]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6213      	str	r3, [r2, #32]
 8001a74:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6213      	str	r3, [r2, #32]
 8001a80:	e00b      	b.n	8001a9a <HAL_RCC_OscConfig+0x36e>
 8001a82:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6213      	str	r3, [r2, #32]
 8001a8e:	4b58      	ldr	r3, [pc, #352]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a57      	ldr	r2, [pc, #348]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d015      	beq.n	8001ace <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f867 	bl	8000b74 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f863 	bl	8000b74 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0b1      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ee      	beq.n	8001aaa <HAL_RCC_OscConfig+0x37e>
 8001acc:	e014      	b.n	8001af8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ace:	f7ff f851 	bl	8000b74 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff f84d 	bl	8000b74 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e09b      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	4b40      	ldr	r3, [pc, #256]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ee      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d105      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8087 	beq.w	8001c22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d061      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d146      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b28:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <HAL_RCC_OscConfig+0x4cc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f821 	bl	8000b74 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f81d 	bl	8000b74 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e06d      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b48:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5c:	d108      	bne.n	8001b70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4921      	ldr	r1, [pc, #132]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a19      	ldr	r1, [r3, #32]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	430b      	orrs	r3, r1
 8001b82:	491b      	ldr	r1, [pc, #108]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4cc>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe fff1 	bl	8000b74 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe ffed 	bl	8000b74 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e03d      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x46a>
 8001bb4:	e035      	b.n	8001c22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <HAL_RCC_OscConfig+0x4cc>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7fe ffda 	bl	8000b74 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7fe ffd6 	bl	8000b74 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e026      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x498>
 8001be2:	e01e      	b.n	8001c22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e019      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_RCC_OscConfig+0x500>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0d0      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c44:	4b6a      	ldr	r3, [pc, #424]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d910      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b67      	ldr	r3, [pc, #412]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 0207 	bic.w	r2, r3, #7
 8001c5a:	4965      	ldr	r1, [pc, #404]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b63      	ldr	r3, [pc, #396]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b8      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c8c:	4b59      	ldr	r3, [pc, #356]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a58      	ldr	r2, [pc, #352]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca4:	4b53      	ldr	r3, [pc, #332]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b50      	ldr	r3, [pc, #320]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	494d      	ldr	r1, [pc, #308]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d040      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e07f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b41      	ldr	r3, [pc, #260]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e073      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06b      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b39      	ldr	r3, [pc, #228]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4936      	ldr	r1, [pc, #216]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d20:	f7fe ff28 	bl	8000b74 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7fe ff24 	bl	8000b74 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e053      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d210      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	4922      	ldr	r1, [pc, #136]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e032      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4916      	ldr	r1, [pc, #88]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001daa:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490e      	ldr	r1, [pc, #56]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dbe:	f000 f821 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	490a      	ldr	r1, [pc, #40]	@ (8001df8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	5ccb      	ldrb	r3, [r1, r3]
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	4a09      	ldr	r2, [pc, #36]	@ (8001dfc <HAL_RCC_ClockConfig+0x1cc>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_RCC_ClockConfig+0x1d0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fe86 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080029dc 	.word	0x080029dc
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	2000000c 	.word	0x2000000c

08001e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x30>
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x36>
 8001e32:	e027      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e36:	613b      	str	r3, [r7, #16]
      break;
 8001e38:	e027      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	0c9b      	lsrs	r3, r3, #18
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d010      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0c5b      	lsrs	r3, r3, #17
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e66:	fb03 f202 	mul.w	r2, r3, r2
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e004      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	613b      	str	r3, [r7, #16]
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e86:	613b      	str	r3, [r7, #16]
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	693b      	ldr	r3, [r7, #16]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	007a1200 	.word	0x007a1200
 8001ea0:	080029ec 	.word	0x080029ec
 8001ea4:	080029fc 	.word	0x080029fc
 8001ea8:	003d0900 	.word	0x003d0900

08001eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <RCC_Delay+0x34>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <RCC_Delay+0x38>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ec8:	bf00      	nop
  }
  while (Delay --);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	60fa      	str	r2, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <RCC_Delay+0x1c>
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	10624dd3 	.word	0x10624dd3

08001ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d07d      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f08:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10d      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b4c      	ldr	r3, [pc, #304]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	61d3      	str	r3, [r2, #28]
 8001f20:	4b49      	ldr	r3, [pc, #292]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b46      	ldr	r3, [pc, #280]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d118      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a42      	ldr	r2, [pc, #264]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f48:	f7fe fe14 	bl	8000b74 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	e008      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f50:	f7fe fe10 	bl	8000b74 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	@ 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e06d      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f6e:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d02e      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d027      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f96:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fa2:	4a29      	ldr	r2, [pc, #164]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d014      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fddf 	bl	8000b74 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7fe fddb 	bl	8000b74 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e036      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0ee      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4917      	ldr	r1, [pc, #92]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800200c:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	490b      	ldr	r1, [pc, #44]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4904      	ldr	r1, [pc, #16]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
 8002050:	42420440 	.word	0x42420440

08002054 <siprintf>:
 8002054:	b40e      	push	{r1, r2, r3}
 8002056:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800205a:	b500      	push	{lr}
 800205c:	b09c      	sub	sp, #112	@ 0x70
 800205e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002060:	9002      	str	r0, [sp, #8]
 8002062:	9006      	str	r0, [sp, #24]
 8002064:	9107      	str	r1, [sp, #28]
 8002066:	9104      	str	r1, [sp, #16]
 8002068:	4808      	ldr	r0, [pc, #32]	@ (800208c <siprintf+0x38>)
 800206a:	4909      	ldr	r1, [pc, #36]	@ (8002090 <siprintf+0x3c>)
 800206c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002070:	9105      	str	r1, [sp, #20]
 8002072:	6800      	ldr	r0, [r0, #0]
 8002074:	a902      	add	r1, sp, #8
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	f000 f992 	bl	80023a0 <_svfiprintf_r>
 800207c:	2200      	movs	r2, #0
 800207e:	9b02      	ldr	r3, [sp, #8]
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	b01c      	add	sp, #112	@ 0x70
 8002084:	f85d eb04 	ldr.w	lr, [sp], #4
 8002088:	b003      	add	sp, #12
 800208a:	4770      	bx	lr
 800208c:	20000014 	.word	0x20000014
 8002090:	ffff0208 	.word	0xffff0208

08002094 <memset>:
 8002094:	4603      	mov	r3, r0
 8002096:	4402      	add	r2, r0
 8002098:	4293      	cmp	r3, r2
 800209a:	d100      	bne.n	800209e <memset+0xa>
 800209c:	4770      	bx	lr
 800209e:	f803 1b01 	strb.w	r1, [r3], #1
 80020a2:	e7f9      	b.n	8002098 <memset+0x4>

080020a4 <__errno>:
 80020a4:	4b01      	ldr	r3, [pc, #4]	@ (80020ac <__errno+0x8>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000014 	.word	0x20000014

080020b0 <__libc_init_array>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2600      	movs	r6, #0
 80020b4:	4d0c      	ldr	r5, [pc, #48]	@ (80020e8 <__libc_init_array+0x38>)
 80020b6:	4c0d      	ldr	r4, [pc, #52]	@ (80020ec <__libc_init_array+0x3c>)
 80020b8:	1b64      	subs	r4, r4, r5
 80020ba:	10a4      	asrs	r4, r4, #2
 80020bc:	42a6      	cmp	r6, r4
 80020be:	d109      	bne.n	80020d4 <__libc_init_array+0x24>
 80020c0:	f000 fc78 	bl	80029b4 <_init>
 80020c4:	2600      	movs	r6, #0
 80020c6:	4d0a      	ldr	r5, [pc, #40]	@ (80020f0 <__libc_init_array+0x40>)
 80020c8:	4c0a      	ldr	r4, [pc, #40]	@ (80020f4 <__libc_init_array+0x44>)
 80020ca:	1b64      	subs	r4, r4, r5
 80020cc:	10a4      	asrs	r4, r4, #2
 80020ce:	42a6      	cmp	r6, r4
 80020d0:	d105      	bne.n	80020de <__libc_init_array+0x2e>
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
 80020d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d8:	4798      	blx	r3
 80020da:	3601      	adds	r6, #1
 80020dc:	e7ee      	b.n	80020bc <__libc_init_array+0xc>
 80020de:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e2:	4798      	blx	r3
 80020e4:	3601      	adds	r6, #1
 80020e6:	e7f2      	b.n	80020ce <__libc_init_array+0x1e>
 80020e8:	08002a34 	.word	0x08002a34
 80020ec:	08002a34 	.word	0x08002a34
 80020f0:	08002a34 	.word	0x08002a34
 80020f4:	08002a38 	.word	0x08002a38

080020f8 <__retarget_lock_acquire_recursive>:
 80020f8:	4770      	bx	lr

080020fa <__retarget_lock_release_recursive>:
 80020fa:	4770      	bx	lr

080020fc <_free_r>:
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	4605      	mov	r5, r0
 8002100:	2900      	cmp	r1, #0
 8002102:	d040      	beq.n	8002186 <_free_r+0x8a>
 8002104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002108:	1f0c      	subs	r4, r1, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	bfb8      	it	lt
 800210e:	18e4      	addlt	r4, r4, r3
 8002110:	f000 f8de 	bl	80022d0 <__malloc_lock>
 8002114:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <_free_r+0x8c>)
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	b933      	cbnz	r3, 8002128 <_free_r+0x2c>
 800211a:	6063      	str	r3, [r4, #4]
 800211c:	6014      	str	r4, [r2, #0]
 800211e:	4628      	mov	r0, r5
 8002120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002124:	f000 b8da 	b.w	80022dc <__malloc_unlock>
 8002128:	42a3      	cmp	r3, r4
 800212a:	d908      	bls.n	800213e <_free_r+0x42>
 800212c:	6820      	ldr	r0, [r4, #0]
 800212e:	1821      	adds	r1, r4, r0
 8002130:	428b      	cmp	r3, r1
 8002132:	bf01      	itttt	eq
 8002134:	6819      	ldreq	r1, [r3, #0]
 8002136:	685b      	ldreq	r3, [r3, #4]
 8002138:	1809      	addeq	r1, r1, r0
 800213a:	6021      	streq	r1, [r4, #0]
 800213c:	e7ed      	b.n	800211a <_free_r+0x1e>
 800213e:	461a      	mov	r2, r3
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	b10b      	cbz	r3, 8002148 <_free_r+0x4c>
 8002144:	42a3      	cmp	r3, r4
 8002146:	d9fa      	bls.n	800213e <_free_r+0x42>
 8002148:	6811      	ldr	r1, [r2, #0]
 800214a:	1850      	adds	r0, r2, r1
 800214c:	42a0      	cmp	r0, r4
 800214e:	d10b      	bne.n	8002168 <_free_r+0x6c>
 8002150:	6820      	ldr	r0, [r4, #0]
 8002152:	4401      	add	r1, r0
 8002154:	1850      	adds	r0, r2, r1
 8002156:	4283      	cmp	r3, r0
 8002158:	6011      	str	r1, [r2, #0]
 800215a:	d1e0      	bne.n	800211e <_free_r+0x22>
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4408      	add	r0, r1
 8002162:	6010      	str	r0, [r2, #0]
 8002164:	6053      	str	r3, [r2, #4]
 8002166:	e7da      	b.n	800211e <_free_r+0x22>
 8002168:	d902      	bls.n	8002170 <_free_r+0x74>
 800216a:	230c      	movs	r3, #12
 800216c:	602b      	str	r3, [r5, #0]
 800216e:	e7d6      	b.n	800211e <_free_r+0x22>
 8002170:	6820      	ldr	r0, [r4, #0]
 8002172:	1821      	adds	r1, r4, r0
 8002174:	428b      	cmp	r3, r1
 8002176:	bf01      	itttt	eq
 8002178:	6819      	ldreq	r1, [r3, #0]
 800217a:	685b      	ldreq	r3, [r3, #4]
 800217c:	1809      	addeq	r1, r1, r0
 800217e:	6021      	streq	r1, [r4, #0]
 8002180:	6063      	str	r3, [r4, #4]
 8002182:	6054      	str	r4, [r2, #4]
 8002184:	e7cb      	b.n	800211e <_free_r+0x22>
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	20000214 	.word	0x20000214

0800218c <sbrk_aligned>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	4e0f      	ldr	r6, [pc, #60]	@ (80021cc <sbrk_aligned+0x40>)
 8002190:	460c      	mov	r4, r1
 8002192:	6831      	ldr	r1, [r6, #0]
 8002194:	4605      	mov	r5, r0
 8002196:	b911      	cbnz	r1, 800219e <sbrk_aligned+0x12>
 8002198:	f000 fbaa 	bl	80028f0 <_sbrk_r>
 800219c:	6030      	str	r0, [r6, #0]
 800219e:	4621      	mov	r1, r4
 80021a0:	4628      	mov	r0, r5
 80021a2:	f000 fba5 	bl	80028f0 <_sbrk_r>
 80021a6:	1c43      	adds	r3, r0, #1
 80021a8:	d103      	bne.n	80021b2 <sbrk_aligned+0x26>
 80021aa:	f04f 34ff 	mov.w	r4, #4294967295
 80021ae:	4620      	mov	r0, r4
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	1cc4      	adds	r4, r0, #3
 80021b4:	f024 0403 	bic.w	r4, r4, #3
 80021b8:	42a0      	cmp	r0, r4
 80021ba:	d0f8      	beq.n	80021ae <sbrk_aligned+0x22>
 80021bc:	1a21      	subs	r1, r4, r0
 80021be:	4628      	mov	r0, r5
 80021c0:	f000 fb96 	bl	80028f0 <_sbrk_r>
 80021c4:	3001      	adds	r0, #1
 80021c6:	d1f2      	bne.n	80021ae <sbrk_aligned+0x22>
 80021c8:	e7ef      	b.n	80021aa <sbrk_aligned+0x1e>
 80021ca:	bf00      	nop
 80021cc:	20000210 	.word	0x20000210

080021d0 <_malloc_r>:
 80021d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021d4:	1ccd      	adds	r5, r1, #3
 80021d6:	f025 0503 	bic.w	r5, r5, #3
 80021da:	3508      	adds	r5, #8
 80021dc:	2d0c      	cmp	r5, #12
 80021de:	bf38      	it	cc
 80021e0:	250c      	movcc	r5, #12
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	4606      	mov	r6, r0
 80021e6:	db01      	blt.n	80021ec <_malloc_r+0x1c>
 80021e8:	42a9      	cmp	r1, r5
 80021ea:	d904      	bls.n	80021f6 <_malloc_r+0x26>
 80021ec:	230c      	movs	r3, #12
 80021ee:	6033      	str	r3, [r6, #0]
 80021f0:	2000      	movs	r0, #0
 80021f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80022cc <_malloc_r+0xfc>
 80021fa:	f000 f869 	bl	80022d0 <__malloc_lock>
 80021fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002202:	461c      	mov	r4, r3
 8002204:	bb44      	cbnz	r4, 8002258 <_malloc_r+0x88>
 8002206:	4629      	mov	r1, r5
 8002208:	4630      	mov	r0, r6
 800220a:	f7ff ffbf 	bl	800218c <sbrk_aligned>
 800220e:	1c43      	adds	r3, r0, #1
 8002210:	4604      	mov	r4, r0
 8002212:	d158      	bne.n	80022c6 <_malloc_r+0xf6>
 8002214:	f8d8 4000 	ldr.w	r4, [r8]
 8002218:	4627      	mov	r7, r4
 800221a:	2f00      	cmp	r7, #0
 800221c:	d143      	bne.n	80022a6 <_malloc_r+0xd6>
 800221e:	2c00      	cmp	r4, #0
 8002220:	d04b      	beq.n	80022ba <_malloc_r+0xea>
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	4639      	mov	r1, r7
 8002226:	4630      	mov	r0, r6
 8002228:	eb04 0903 	add.w	r9, r4, r3
 800222c:	f000 fb60 	bl	80028f0 <_sbrk_r>
 8002230:	4581      	cmp	r9, r0
 8002232:	d142      	bne.n	80022ba <_malloc_r+0xea>
 8002234:	6821      	ldr	r1, [r4, #0]
 8002236:	4630      	mov	r0, r6
 8002238:	1a6d      	subs	r5, r5, r1
 800223a:	4629      	mov	r1, r5
 800223c:	f7ff ffa6 	bl	800218c <sbrk_aligned>
 8002240:	3001      	adds	r0, #1
 8002242:	d03a      	beq.n	80022ba <_malloc_r+0xea>
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	442b      	add	r3, r5
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	f8d8 3000 	ldr.w	r3, [r8]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	bb62      	cbnz	r2, 80022ac <_malloc_r+0xdc>
 8002252:	f8c8 7000 	str.w	r7, [r8]
 8002256:	e00f      	b.n	8002278 <_malloc_r+0xa8>
 8002258:	6822      	ldr	r2, [r4, #0]
 800225a:	1b52      	subs	r2, r2, r5
 800225c:	d420      	bmi.n	80022a0 <_malloc_r+0xd0>
 800225e:	2a0b      	cmp	r2, #11
 8002260:	d917      	bls.n	8002292 <_malloc_r+0xc2>
 8002262:	1961      	adds	r1, r4, r5
 8002264:	42a3      	cmp	r3, r4
 8002266:	6025      	str	r5, [r4, #0]
 8002268:	bf18      	it	ne
 800226a:	6059      	strne	r1, [r3, #4]
 800226c:	6863      	ldr	r3, [r4, #4]
 800226e:	bf08      	it	eq
 8002270:	f8c8 1000 	streq.w	r1, [r8]
 8002274:	5162      	str	r2, [r4, r5]
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	4630      	mov	r0, r6
 800227a:	f000 f82f 	bl	80022dc <__malloc_unlock>
 800227e:	f104 000b 	add.w	r0, r4, #11
 8002282:	1d23      	adds	r3, r4, #4
 8002284:	f020 0007 	bic.w	r0, r0, #7
 8002288:	1ac2      	subs	r2, r0, r3
 800228a:	bf1c      	itt	ne
 800228c:	1a1b      	subne	r3, r3, r0
 800228e:	50a3      	strne	r3, [r4, r2]
 8002290:	e7af      	b.n	80021f2 <_malloc_r+0x22>
 8002292:	6862      	ldr	r2, [r4, #4]
 8002294:	42a3      	cmp	r3, r4
 8002296:	bf0c      	ite	eq
 8002298:	f8c8 2000 	streq.w	r2, [r8]
 800229c:	605a      	strne	r2, [r3, #4]
 800229e:	e7eb      	b.n	8002278 <_malloc_r+0xa8>
 80022a0:	4623      	mov	r3, r4
 80022a2:	6864      	ldr	r4, [r4, #4]
 80022a4:	e7ae      	b.n	8002204 <_malloc_r+0x34>
 80022a6:	463c      	mov	r4, r7
 80022a8:	687f      	ldr	r7, [r7, #4]
 80022aa:	e7b6      	b.n	800221a <_malloc_r+0x4a>
 80022ac:	461a      	mov	r2, r3
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	42a3      	cmp	r3, r4
 80022b2:	d1fb      	bne.n	80022ac <_malloc_r+0xdc>
 80022b4:	2300      	movs	r3, #0
 80022b6:	6053      	str	r3, [r2, #4]
 80022b8:	e7de      	b.n	8002278 <_malloc_r+0xa8>
 80022ba:	230c      	movs	r3, #12
 80022bc:	4630      	mov	r0, r6
 80022be:	6033      	str	r3, [r6, #0]
 80022c0:	f000 f80c 	bl	80022dc <__malloc_unlock>
 80022c4:	e794      	b.n	80021f0 <_malloc_r+0x20>
 80022c6:	6005      	str	r5, [r0, #0]
 80022c8:	e7d6      	b.n	8002278 <_malloc_r+0xa8>
 80022ca:	bf00      	nop
 80022cc:	20000214 	.word	0x20000214

080022d0 <__malloc_lock>:
 80022d0:	4801      	ldr	r0, [pc, #4]	@ (80022d8 <__malloc_lock+0x8>)
 80022d2:	f7ff bf11 	b.w	80020f8 <__retarget_lock_acquire_recursive>
 80022d6:	bf00      	nop
 80022d8:	2000020c 	.word	0x2000020c

080022dc <__malloc_unlock>:
 80022dc:	4801      	ldr	r0, [pc, #4]	@ (80022e4 <__malloc_unlock+0x8>)
 80022de:	f7ff bf0c 	b.w	80020fa <__retarget_lock_release_recursive>
 80022e2:	bf00      	nop
 80022e4:	2000020c 	.word	0x2000020c

080022e8 <__ssputs_r>:
 80022e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022ec:	461f      	mov	r7, r3
 80022ee:	688e      	ldr	r6, [r1, #8]
 80022f0:	4682      	mov	sl, r0
 80022f2:	42be      	cmp	r6, r7
 80022f4:	460c      	mov	r4, r1
 80022f6:	4690      	mov	r8, r2
 80022f8:	680b      	ldr	r3, [r1, #0]
 80022fa:	d82d      	bhi.n	8002358 <__ssputs_r+0x70>
 80022fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002300:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002304:	d026      	beq.n	8002354 <__ssputs_r+0x6c>
 8002306:	6965      	ldr	r5, [r4, #20]
 8002308:	6909      	ldr	r1, [r1, #16]
 800230a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800230e:	eba3 0901 	sub.w	r9, r3, r1
 8002312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002316:	1c7b      	adds	r3, r7, #1
 8002318:	444b      	add	r3, r9
 800231a:	106d      	asrs	r5, r5, #1
 800231c:	429d      	cmp	r5, r3
 800231e:	bf38      	it	cc
 8002320:	461d      	movcc	r5, r3
 8002322:	0553      	lsls	r3, r2, #21
 8002324:	d527      	bpl.n	8002376 <__ssputs_r+0x8e>
 8002326:	4629      	mov	r1, r5
 8002328:	f7ff ff52 	bl	80021d0 <_malloc_r>
 800232c:	4606      	mov	r6, r0
 800232e:	b360      	cbz	r0, 800238a <__ssputs_r+0xa2>
 8002330:	464a      	mov	r2, r9
 8002332:	6921      	ldr	r1, [r4, #16]
 8002334:	f000 fafa 	bl	800292c <memcpy>
 8002338:	89a3      	ldrh	r3, [r4, #12]
 800233a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800233e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002342:	81a3      	strh	r3, [r4, #12]
 8002344:	6126      	str	r6, [r4, #16]
 8002346:	444e      	add	r6, r9
 8002348:	6026      	str	r6, [r4, #0]
 800234a:	463e      	mov	r6, r7
 800234c:	6165      	str	r5, [r4, #20]
 800234e:	eba5 0509 	sub.w	r5, r5, r9
 8002352:	60a5      	str	r5, [r4, #8]
 8002354:	42be      	cmp	r6, r7
 8002356:	d900      	bls.n	800235a <__ssputs_r+0x72>
 8002358:	463e      	mov	r6, r7
 800235a:	4632      	mov	r2, r6
 800235c:	4641      	mov	r1, r8
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	f000 faac 	bl	80028bc <memmove>
 8002364:	2000      	movs	r0, #0
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	1b9b      	subs	r3, r3, r6
 800236a:	60a3      	str	r3, [r4, #8]
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	4433      	add	r3, r6
 8002370:	6023      	str	r3, [r4, #0]
 8002372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002376:	462a      	mov	r2, r5
 8002378:	f000 fae6 	bl	8002948 <_realloc_r>
 800237c:	4606      	mov	r6, r0
 800237e:	2800      	cmp	r0, #0
 8002380:	d1e0      	bne.n	8002344 <__ssputs_r+0x5c>
 8002382:	4650      	mov	r0, sl
 8002384:	6921      	ldr	r1, [r4, #16]
 8002386:	f7ff feb9 	bl	80020fc <_free_r>
 800238a:	230c      	movs	r3, #12
 800238c:	f8ca 3000 	str.w	r3, [sl]
 8002390:	89a3      	ldrh	r3, [r4, #12]
 8002392:	f04f 30ff 	mov.w	r0, #4294967295
 8002396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800239a:	81a3      	strh	r3, [r4, #12]
 800239c:	e7e9      	b.n	8002372 <__ssputs_r+0x8a>
	...

080023a0 <_svfiprintf_r>:
 80023a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a4:	4698      	mov	r8, r3
 80023a6:	898b      	ldrh	r3, [r1, #12]
 80023a8:	4607      	mov	r7, r0
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	460d      	mov	r5, r1
 80023ae:	4614      	mov	r4, r2
 80023b0:	b09d      	sub	sp, #116	@ 0x74
 80023b2:	d510      	bpl.n	80023d6 <_svfiprintf_r+0x36>
 80023b4:	690b      	ldr	r3, [r1, #16]
 80023b6:	b973      	cbnz	r3, 80023d6 <_svfiprintf_r+0x36>
 80023b8:	2140      	movs	r1, #64	@ 0x40
 80023ba:	f7ff ff09 	bl	80021d0 <_malloc_r>
 80023be:	6028      	str	r0, [r5, #0]
 80023c0:	6128      	str	r0, [r5, #16]
 80023c2:	b930      	cbnz	r0, 80023d2 <_svfiprintf_r+0x32>
 80023c4:	230c      	movs	r3, #12
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	b01d      	add	sp, #116	@ 0x74
 80023ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d2:	2340      	movs	r3, #64	@ 0x40
 80023d4:	616b      	str	r3, [r5, #20]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80023da:	2320      	movs	r3, #32
 80023dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80023e0:	2330      	movs	r3, #48	@ 0x30
 80023e2:	f04f 0901 	mov.w	r9, #1
 80023e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80023ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002584 <_svfiprintf_r+0x1e4>
 80023ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80023f2:	4623      	mov	r3, r4
 80023f4:	469a      	mov	sl, r3
 80023f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023fa:	b10a      	cbz	r2, 8002400 <_svfiprintf_r+0x60>
 80023fc:	2a25      	cmp	r2, #37	@ 0x25
 80023fe:	d1f9      	bne.n	80023f4 <_svfiprintf_r+0x54>
 8002400:	ebba 0b04 	subs.w	fp, sl, r4
 8002404:	d00b      	beq.n	800241e <_svfiprintf_r+0x7e>
 8002406:	465b      	mov	r3, fp
 8002408:	4622      	mov	r2, r4
 800240a:	4629      	mov	r1, r5
 800240c:	4638      	mov	r0, r7
 800240e:	f7ff ff6b 	bl	80022e8 <__ssputs_r>
 8002412:	3001      	adds	r0, #1
 8002414:	f000 80a7 	beq.w	8002566 <_svfiprintf_r+0x1c6>
 8002418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800241a:	445a      	add	r2, fp
 800241c:	9209      	str	r2, [sp, #36]	@ 0x24
 800241e:	f89a 3000 	ldrb.w	r3, [sl]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 809f 	beq.w	8002566 <_svfiprintf_r+0x1c6>
 8002428:	2300      	movs	r3, #0
 800242a:	f04f 32ff 	mov.w	r2, #4294967295
 800242e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002432:	f10a 0a01 	add.w	sl, sl, #1
 8002436:	9304      	str	r3, [sp, #16]
 8002438:	9307      	str	r3, [sp, #28]
 800243a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800243e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002440:	4654      	mov	r4, sl
 8002442:	2205      	movs	r2, #5
 8002444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002448:	484e      	ldr	r0, [pc, #312]	@ (8002584 <_svfiprintf_r+0x1e4>)
 800244a:	f000 fa61 	bl	8002910 <memchr>
 800244e:	9a04      	ldr	r2, [sp, #16]
 8002450:	b9d8      	cbnz	r0, 800248a <_svfiprintf_r+0xea>
 8002452:	06d0      	lsls	r0, r2, #27
 8002454:	bf44      	itt	mi
 8002456:	2320      	movmi	r3, #32
 8002458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800245c:	0711      	lsls	r1, r2, #28
 800245e:	bf44      	itt	mi
 8002460:	232b      	movmi	r3, #43	@ 0x2b
 8002462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002466:	f89a 3000 	ldrb.w	r3, [sl]
 800246a:	2b2a      	cmp	r3, #42	@ 0x2a
 800246c:	d015      	beq.n	800249a <_svfiprintf_r+0xfa>
 800246e:	4654      	mov	r4, sl
 8002470:	2000      	movs	r0, #0
 8002472:	f04f 0c0a 	mov.w	ip, #10
 8002476:	9a07      	ldr	r2, [sp, #28]
 8002478:	4621      	mov	r1, r4
 800247a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800247e:	3b30      	subs	r3, #48	@ 0x30
 8002480:	2b09      	cmp	r3, #9
 8002482:	d94b      	bls.n	800251c <_svfiprintf_r+0x17c>
 8002484:	b1b0      	cbz	r0, 80024b4 <_svfiprintf_r+0x114>
 8002486:	9207      	str	r2, [sp, #28]
 8002488:	e014      	b.n	80024b4 <_svfiprintf_r+0x114>
 800248a:	eba0 0308 	sub.w	r3, r0, r8
 800248e:	fa09 f303 	lsl.w	r3, r9, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	46a2      	mov	sl, r4
 8002496:	9304      	str	r3, [sp, #16]
 8002498:	e7d2      	b.n	8002440 <_svfiprintf_r+0xa0>
 800249a:	9b03      	ldr	r3, [sp, #12]
 800249c:	1d19      	adds	r1, r3, #4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	9103      	str	r1, [sp, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bfbb      	ittet	lt
 80024a6:	425b      	neglt	r3, r3
 80024a8:	f042 0202 	orrlt.w	r2, r2, #2
 80024ac:	9307      	strge	r3, [sp, #28]
 80024ae:	9307      	strlt	r3, [sp, #28]
 80024b0:	bfb8      	it	lt
 80024b2:	9204      	strlt	r2, [sp, #16]
 80024b4:	7823      	ldrb	r3, [r4, #0]
 80024b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80024b8:	d10a      	bne.n	80024d0 <_svfiprintf_r+0x130>
 80024ba:	7863      	ldrb	r3, [r4, #1]
 80024bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80024be:	d132      	bne.n	8002526 <_svfiprintf_r+0x186>
 80024c0:	9b03      	ldr	r3, [sp, #12]
 80024c2:	3402      	adds	r4, #2
 80024c4:	1d1a      	adds	r2, r3, #4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	9203      	str	r2, [sp, #12]
 80024ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80024ce:	9305      	str	r3, [sp, #20]
 80024d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002588 <_svfiprintf_r+0x1e8>
 80024d4:	2203      	movs	r2, #3
 80024d6:	4650      	mov	r0, sl
 80024d8:	7821      	ldrb	r1, [r4, #0]
 80024da:	f000 fa19 	bl	8002910 <memchr>
 80024de:	b138      	cbz	r0, 80024f0 <_svfiprintf_r+0x150>
 80024e0:	2240      	movs	r2, #64	@ 0x40
 80024e2:	9b04      	ldr	r3, [sp, #16]
 80024e4:	eba0 000a 	sub.w	r0, r0, sl
 80024e8:	4082      	lsls	r2, r0
 80024ea:	4313      	orrs	r3, r2
 80024ec:	3401      	adds	r4, #1
 80024ee:	9304      	str	r3, [sp, #16]
 80024f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024f4:	2206      	movs	r2, #6
 80024f6:	4825      	ldr	r0, [pc, #148]	@ (800258c <_svfiprintf_r+0x1ec>)
 80024f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80024fc:	f000 fa08 	bl	8002910 <memchr>
 8002500:	2800      	cmp	r0, #0
 8002502:	d036      	beq.n	8002572 <_svfiprintf_r+0x1d2>
 8002504:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <_svfiprintf_r+0x1f0>)
 8002506:	bb1b      	cbnz	r3, 8002550 <_svfiprintf_r+0x1b0>
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	3307      	adds	r3, #7
 800250c:	f023 0307 	bic.w	r3, r3, #7
 8002510:	3308      	adds	r3, #8
 8002512:	9303      	str	r3, [sp, #12]
 8002514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002516:	4433      	add	r3, r6
 8002518:	9309      	str	r3, [sp, #36]	@ 0x24
 800251a:	e76a      	b.n	80023f2 <_svfiprintf_r+0x52>
 800251c:	460c      	mov	r4, r1
 800251e:	2001      	movs	r0, #1
 8002520:	fb0c 3202 	mla	r2, ip, r2, r3
 8002524:	e7a8      	b.n	8002478 <_svfiprintf_r+0xd8>
 8002526:	2300      	movs	r3, #0
 8002528:	f04f 0c0a 	mov.w	ip, #10
 800252c:	4619      	mov	r1, r3
 800252e:	3401      	adds	r4, #1
 8002530:	9305      	str	r3, [sp, #20]
 8002532:	4620      	mov	r0, r4
 8002534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002538:	3a30      	subs	r2, #48	@ 0x30
 800253a:	2a09      	cmp	r2, #9
 800253c:	d903      	bls.n	8002546 <_svfiprintf_r+0x1a6>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0c6      	beq.n	80024d0 <_svfiprintf_r+0x130>
 8002542:	9105      	str	r1, [sp, #20]
 8002544:	e7c4      	b.n	80024d0 <_svfiprintf_r+0x130>
 8002546:	4604      	mov	r4, r0
 8002548:	2301      	movs	r3, #1
 800254a:	fb0c 2101 	mla	r1, ip, r1, r2
 800254e:	e7f0      	b.n	8002532 <_svfiprintf_r+0x192>
 8002550:	ab03      	add	r3, sp, #12
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	462a      	mov	r2, r5
 8002556:	4638      	mov	r0, r7
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <_svfiprintf_r+0x1f4>)
 800255a:	a904      	add	r1, sp, #16
 800255c:	f3af 8000 	nop.w
 8002560:	1c42      	adds	r2, r0, #1
 8002562:	4606      	mov	r6, r0
 8002564:	d1d6      	bne.n	8002514 <_svfiprintf_r+0x174>
 8002566:	89ab      	ldrh	r3, [r5, #12]
 8002568:	065b      	lsls	r3, r3, #25
 800256a:	f53f af2d 	bmi.w	80023c8 <_svfiprintf_r+0x28>
 800256e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002570:	e72c      	b.n	80023cc <_svfiprintf_r+0x2c>
 8002572:	ab03      	add	r3, sp, #12
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	462a      	mov	r2, r5
 8002578:	4638      	mov	r0, r7
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <_svfiprintf_r+0x1f4>)
 800257c:	a904      	add	r1, sp, #16
 800257e:	f000 f87d 	bl	800267c <_printf_i>
 8002582:	e7ed      	b.n	8002560 <_svfiprintf_r+0x1c0>
 8002584:	080029fe 	.word	0x080029fe
 8002588:	08002a04 	.word	0x08002a04
 800258c:	08002a08 	.word	0x08002a08
 8002590:	00000000 	.word	0x00000000
 8002594:	080022e9 	.word	0x080022e9

08002598 <_printf_common>:
 8002598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	4616      	mov	r6, r2
 800259e:	4698      	mov	r8, r3
 80025a0:	688a      	ldr	r2, [r1, #8]
 80025a2:	690b      	ldr	r3, [r1, #16]
 80025a4:	4607      	mov	r7, r0
 80025a6:	4293      	cmp	r3, r2
 80025a8:	bfb8      	it	lt
 80025aa:	4613      	movlt	r3, r2
 80025ac:	6033      	str	r3, [r6, #0]
 80025ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80025b2:	460c      	mov	r4, r1
 80025b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80025b8:	b10a      	cbz	r2, 80025be <_printf_common+0x26>
 80025ba:	3301      	adds	r3, #1
 80025bc:	6033      	str	r3, [r6, #0]
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	0699      	lsls	r1, r3, #26
 80025c2:	bf42      	ittt	mi
 80025c4:	6833      	ldrmi	r3, [r6, #0]
 80025c6:	3302      	addmi	r3, #2
 80025c8:	6033      	strmi	r3, [r6, #0]
 80025ca:	6825      	ldr	r5, [r4, #0]
 80025cc:	f015 0506 	ands.w	r5, r5, #6
 80025d0:	d106      	bne.n	80025e0 <_printf_common+0x48>
 80025d2:	f104 0a19 	add.w	sl, r4, #25
 80025d6:	68e3      	ldr	r3, [r4, #12]
 80025d8:	6832      	ldr	r2, [r6, #0]
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	42ab      	cmp	r3, r5
 80025de:	dc2b      	bgt.n	8002638 <_printf_common+0xa0>
 80025e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	3b00      	subs	r3, #0
 80025e8:	bf18      	it	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	0692      	lsls	r2, r2, #26
 80025ee:	d430      	bmi.n	8002652 <_printf_common+0xba>
 80025f0:	4641      	mov	r1, r8
 80025f2:	4638      	mov	r0, r7
 80025f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025f8:	47c8      	blx	r9
 80025fa:	3001      	adds	r0, #1
 80025fc:	d023      	beq.n	8002646 <_printf_common+0xae>
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	f003 0306 	and.w	r3, r3, #6
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf14      	ite	ne
 800260a:	2500      	movne	r5, #0
 800260c:	6833      	ldreq	r3, [r6, #0]
 800260e:	f04f 0600 	mov.w	r6, #0
 8002612:	bf08      	it	eq
 8002614:	68e5      	ldreq	r5, [r4, #12]
 8002616:	f104 041a 	add.w	r4, r4, #26
 800261a:	bf08      	it	eq
 800261c:	1aed      	subeq	r5, r5, r3
 800261e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002622:	bf08      	it	eq
 8002624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002628:	4293      	cmp	r3, r2
 800262a:	bfc4      	itt	gt
 800262c:	1a9b      	subgt	r3, r3, r2
 800262e:	18ed      	addgt	r5, r5, r3
 8002630:	42b5      	cmp	r5, r6
 8002632:	d11a      	bne.n	800266a <_printf_common+0xd2>
 8002634:	2000      	movs	r0, #0
 8002636:	e008      	b.n	800264a <_printf_common+0xb2>
 8002638:	2301      	movs	r3, #1
 800263a:	4652      	mov	r2, sl
 800263c:	4641      	mov	r1, r8
 800263e:	4638      	mov	r0, r7
 8002640:	47c8      	blx	r9
 8002642:	3001      	adds	r0, #1
 8002644:	d103      	bne.n	800264e <_printf_common+0xb6>
 8002646:	f04f 30ff 	mov.w	r0, #4294967295
 800264a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800264e:	3501      	adds	r5, #1
 8002650:	e7c1      	b.n	80025d6 <_printf_common+0x3e>
 8002652:	2030      	movs	r0, #48	@ 0x30
 8002654:	18e1      	adds	r1, r4, r3
 8002656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002660:	4422      	add	r2, r4
 8002662:	3302      	adds	r3, #2
 8002664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002668:	e7c2      	b.n	80025f0 <_printf_common+0x58>
 800266a:	2301      	movs	r3, #1
 800266c:	4622      	mov	r2, r4
 800266e:	4641      	mov	r1, r8
 8002670:	4638      	mov	r0, r7
 8002672:	47c8      	blx	r9
 8002674:	3001      	adds	r0, #1
 8002676:	d0e6      	beq.n	8002646 <_printf_common+0xae>
 8002678:	3601      	adds	r6, #1
 800267a:	e7d9      	b.n	8002630 <_printf_common+0x98>

0800267c <_printf_i>:
 800267c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002680:	7e0f      	ldrb	r7, [r1, #24]
 8002682:	4691      	mov	r9, r2
 8002684:	2f78      	cmp	r7, #120	@ 0x78
 8002686:	4680      	mov	r8, r0
 8002688:	460c      	mov	r4, r1
 800268a:	469a      	mov	sl, r3
 800268c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800268e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002692:	d807      	bhi.n	80026a4 <_printf_i+0x28>
 8002694:	2f62      	cmp	r7, #98	@ 0x62
 8002696:	d80a      	bhi.n	80026ae <_printf_i+0x32>
 8002698:	2f00      	cmp	r7, #0
 800269a:	f000 80d3 	beq.w	8002844 <_printf_i+0x1c8>
 800269e:	2f58      	cmp	r7, #88	@ 0x58
 80026a0:	f000 80ba 	beq.w	8002818 <_printf_i+0x19c>
 80026a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80026ac:	e03a      	b.n	8002724 <_printf_i+0xa8>
 80026ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80026b2:	2b15      	cmp	r3, #21
 80026b4:	d8f6      	bhi.n	80026a4 <_printf_i+0x28>
 80026b6:	a101      	add	r1, pc, #4	@ (adr r1, 80026bc <_printf_i+0x40>)
 80026b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026bc:	08002715 	.word	0x08002715
 80026c0:	08002729 	.word	0x08002729
 80026c4:	080026a5 	.word	0x080026a5
 80026c8:	080026a5 	.word	0x080026a5
 80026cc:	080026a5 	.word	0x080026a5
 80026d0:	080026a5 	.word	0x080026a5
 80026d4:	08002729 	.word	0x08002729
 80026d8:	080026a5 	.word	0x080026a5
 80026dc:	080026a5 	.word	0x080026a5
 80026e0:	080026a5 	.word	0x080026a5
 80026e4:	080026a5 	.word	0x080026a5
 80026e8:	0800282b 	.word	0x0800282b
 80026ec:	08002753 	.word	0x08002753
 80026f0:	080027e5 	.word	0x080027e5
 80026f4:	080026a5 	.word	0x080026a5
 80026f8:	080026a5 	.word	0x080026a5
 80026fc:	0800284d 	.word	0x0800284d
 8002700:	080026a5 	.word	0x080026a5
 8002704:	08002753 	.word	0x08002753
 8002708:	080026a5 	.word	0x080026a5
 800270c:	080026a5 	.word	0x080026a5
 8002710:	080027ed 	.word	0x080027ed
 8002714:	6833      	ldr	r3, [r6, #0]
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6032      	str	r2, [r6, #0]
 800271c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002724:	2301      	movs	r3, #1
 8002726:	e09e      	b.n	8002866 <_printf_i+0x1ea>
 8002728:	6833      	ldr	r3, [r6, #0]
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	1d19      	adds	r1, r3, #4
 800272e:	6031      	str	r1, [r6, #0]
 8002730:	0606      	lsls	r6, r0, #24
 8002732:	d501      	bpl.n	8002738 <_printf_i+0xbc>
 8002734:	681d      	ldr	r5, [r3, #0]
 8002736:	e003      	b.n	8002740 <_printf_i+0xc4>
 8002738:	0645      	lsls	r5, r0, #25
 800273a:	d5fb      	bpl.n	8002734 <_printf_i+0xb8>
 800273c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002740:	2d00      	cmp	r5, #0
 8002742:	da03      	bge.n	800274c <_printf_i+0xd0>
 8002744:	232d      	movs	r3, #45	@ 0x2d
 8002746:	426d      	negs	r5, r5
 8002748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800274c:	230a      	movs	r3, #10
 800274e:	4859      	ldr	r0, [pc, #356]	@ (80028b4 <_printf_i+0x238>)
 8002750:	e011      	b.n	8002776 <_printf_i+0xfa>
 8002752:	6821      	ldr	r1, [r4, #0]
 8002754:	6833      	ldr	r3, [r6, #0]
 8002756:	0608      	lsls	r0, r1, #24
 8002758:	f853 5b04 	ldr.w	r5, [r3], #4
 800275c:	d402      	bmi.n	8002764 <_printf_i+0xe8>
 800275e:	0649      	lsls	r1, r1, #25
 8002760:	bf48      	it	mi
 8002762:	b2ad      	uxthmi	r5, r5
 8002764:	2f6f      	cmp	r7, #111	@ 0x6f
 8002766:	6033      	str	r3, [r6, #0]
 8002768:	bf14      	ite	ne
 800276a:	230a      	movne	r3, #10
 800276c:	2308      	moveq	r3, #8
 800276e:	4851      	ldr	r0, [pc, #324]	@ (80028b4 <_printf_i+0x238>)
 8002770:	2100      	movs	r1, #0
 8002772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002776:	6866      	ldr	r6, [r4, #4]
 8002778:	2e00      	cmp	r6, #0
 800277a:	bfa8      	it	ge
 800277c:	6821      	ldrge	r1, [r4, #0]
 800277e:	60a6      	str	r6, [r4, #8]
 8002780:	bfa4      	itt	ge
 8002782:	f021 0104 	bicge.w	r1, r1, #4
 8002786:	6021      	strge	r1, [r4, #0]
 8002788:	b90d      	cbnz	r5, 800278e <_printf_i+0x112>
 800278a:	2e00      	cmp	r6, #0
 800278c:	d04b      	beq.n	8002826 <_printf_i+0x1aa>
 800278e:	4616      	mov	r6, r2
 8002790:	fbb5 f1f3 	udiv	r1, r5, r3
 8002794:	fb03 5711 	mls	r7, r3, r1, r5
 8002798:	5dc7      	ldrb	r7, [r0, r7]
 800279a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800279e:	462f      	mov	r7, r5
 80027a0:	42bb      	cmp	r3, r7
 80027a2:	460d      	mov	r5, r1
 80027a4:	d9f4      	bls.n	8002790 <_printf_i+0x114>
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d10b      	bne.n	80027c2 <_printf_i+0x146>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	07df      	lsls	r7, r3, #31
 80027ae:	d508      	bpl.n	80027c2 <_printf_i+0x146>
 80027b0:	6923      	ldr	r3, [r4, #16]
 80027b2:	6861      	ldr	r1, [r4, #4]
 80027b4:	4299      	cmp	r1, r3
 80027b6:	bfde      	ittt	le
 80027b8:	2330      	movle	r3, #48	@ 0x30
 80027ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80027c2:	1b92      	subs	r2, r2, r6
 80027c4:	6122      	str	r2, [r4, #16]
 80027c6:	464b      	mov	r3, r9
 80027c8:	4621      	mov	r1, r4
 80027ca:	4640      	mov	r0, r8
 80027cc:	f8cd a000 	str.w	sl, [sp]
 80027d0:	aa03      	add	r2, sp, #12
 80027d2:	f7ff fee1 	bl	8002598 <_printf_common>
 80027d6:	3001      	adds	r0, #1
 80027d8:	d14a      	bne.n	8002870 <_printf_i+0x1f4>
 80027da:	f04f 30ff 	mov.w	r0, #4294967295
 80027de:	b004      	add	sp, #16
 80027e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	f043 0320 	orr.w	r3, r3, #32
 80027ea:	6023      	str	r3, [r4, #0]
 80027ec:	2778      	movs	r7, #120	@ 0x78
 80027ee:	4832      	ldr	r0, [pc, #200]	@ (80028b8 <_printf_i+0x23c>)
 80027f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	6831      	ldr	r1, [r6, #0]
 80027f8:	061f      	lsls	r7, r3, #24
 80027fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80027fe:	d402      	bmi.n	8002806 <_printf_i+0x18a>
 8002800:	065f      	lsls	r7, r3, #25
 8002802:	bf48      	it	mi
 8002804:	b2ad      	uxthmi	r5, r5
 8002806:	6031      	str	r1, [r6, #0]
 8002808:	07d9      	lsls	r1, r3, #31
 800280a:	bf44      	itt	mi
 800280c:	f043 0320 	orrmi.w	r3, r3, #32
 8002810:	6023      	strmi	r3, [r4, #0]
 8002812:	b11d      	cbz	r5, 800281c <_printf_i+0x1a0>
 8002814:	2310      	movs	r3, #16
 8002816:	e7ab      	b.n	8002770 <_printf_i+0xf4>
 8002818:	4826      	ldr	r0, [pc, #152]	@ (80028b4 <_printf_i+0x238>)
 800281a:	e7e9      	b.n	80027f0 <_printf_i+0x174>
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	f023 0320 	bic.w	r3, r3, #32
 8002822:	6023      	str	r3, [r4, #0]
 8002824:	e7f6      	b.n	8002814 <_printf_i+0x198>
 8002826:	4616      	mov	r6, r2
 8002828:	e7bd      	b.n	80027a6 <_printf_i+0x12a>
 800282a:	6833      	ldr	r3, [r6, #0]
 800282c:	6825      	ldr	r5, [r4, #0]
 800282e:	1d18      	adds	r0, r3, #4
 8002830:	6961      	ldr	r1, [r4, #20]
 8002832:	6030      	str	r0, [r6, #0]
 8002834:	062e      	lsls	r6, r5, #24
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	d501      	bpl.n	800283e <_printf_i+0x1c2>
 800283a:	6019      	str	r1, [r3, #0]
 800283c:	e002      	b.n	8002844 <_printf_i+0x1c8>
 800283e:	0668      	lsls	r0, r5, #25
 8002840:	d5fb      	bpl.n	800283a <_printf_i+0x1be>
 8002842:	8019      	strh	r1, [r3, #0]
 8002844:	2300      	movs	r3, #0
 8002846:	4616      	mov	r6, r2
 8002848:	6123      	str	r3, [r4, #16]
 800284a:	e7bc      	b.n	80027c6 <_printf_i+0x14a>
 800284c:	6833      	ldr	r3, [r6, #0]
 800284e:	2100      	movs	r1, #0
 8002850:	1d1a      	adds	r2, r3, #4
 8002852:	6032      	str	r2, [r6, #0]
 8002854:	681e      	ldr	r6, [r3, #0]
 8002856:	6862      	ldr	r2, [r4, #4]
 8002858:	4630      	mov	r0, r6
 800285a:	f000 f859 	bl	8002910 <memchr>
 800285e:	b108      	cbz	r0, 8002864 <_printf_i+0x1e8>
 8002860:	1b80      	subs	r0, r0, r6
 8002862:	6060      	str	r0, [r4, #4]
 8002864:	6863      	ldr	r3, [r4, #4]
 8002866:	6123      	str	r3, [r4, #16]
 8002868:	2300      	movs	r3, #0
 800286a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800286e:	e7aa      	b.n	80027c6 <_printf_i+0x14a>
 8002870:	4632      	mov	r2, r6
 8002872:	4649      	mov	r1, r9
 8002874:	4640      	mov	r0, r8
 8002876:	6923      	ldr	r3, [r4, #16]
 8002878:	47d0      	blx	sl
 800287a:	3001      	adds	r0, #1
 800287c:	d0ad      	beq.n	80027da <_printf_i+0x15e>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	079b      	lsls	r3, r3, #30
 8002882:	d413      	bmi.n	80028ac <_printf_i+0x230>
 8002884:	68e0      	ldr	r0, [r4, #12]
 8002886:	9b03      	ldr	r3, [sp, #12]
 8002888:	4298      	cmp	r0, r3
 800288a:	bfb8      	it	lt
 800288c:	4618      	movlt	r0, r3
 800288e:	e7a6      	b.n	80027de <_printf_i+0x162>
 8002890:	2301      	movs	r3, #1
 8002892:	4632      	mov	r2, r6
 8002894:	4649      	mov	r1, r9
 8002896:	4640      	mov	r0, r8
 8002898:	47d0      	blx	sl
 800289a:	3001      	adds	r0, #1
 800289c:	d09d      	beq.n	80027da <_printf_i+0x15e>
 800289e:	3501      	adds	r5, #1
 80028a0:	68e3      	ldr	r3, [r4, #12]
 80028a2:	9903      	ldr	r1, [sp, #12]
 80028a4:	1a5b      	subs	r3, r3, r1
 80028a6:	42ab      	cmp	r3, r5
 80028a8:	dcf2      	bgt.n	8002890 <_printf_i+0x214>
 80028aa:	e7eb      	b.n	8002884 <_printf_i+0x208>
 80028ac:	2500      	movs	r5, #0
 80028ae:	f104 0619 	add.w	r6, r4, #25
 80028b2:	e7f5      	b.n	80028a0 <_printf_i+0x224>
 80028b4:	08002a0f 	.word	0x08002a0f
 80028b8:	08002a20 	.word	0x08002a20

080028bc <memmove>:
 80028bc:	4288      	cmp	r0, r1
 80028be:	b510      	push	{r4, lr}
 80028c0:	eb01 0402 	add.w	r4, r1, r2
 80028c4:	d902      	bls.n	80028cc <memmove+0x10>
 80028c6:	4284      	cmp	r4, r0
 80028c8:	4623      	mov	r3, r4
 80028ca:	d807      	bhi.n	80028dc <memmove+0x20>
 80028cc:	1e43      	subs	r3, r0, #1
 80028ce:	42a1      	cmp	r1, r4
 80028d0:	d008      	beq.n	80028e4 <memmove+0x28>
 80028d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028da:	e7f8      	b.n	80028ce <memmove+0x12>
 80028dc:	4601      	mov	r1, r0
 80028de:	4402      	add	r2, r0
 80028e0:	428a      	cmp	r2, r1
 80028e2:	d100      	bne.n	80028e6 <memmove+0x2a>
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028ee:	e7f7      	b.n	80028e0 <memmove+0x24>

080028f0 <_sbrk_r>:
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	2300      	movs	r3, #0
 80028f4:	4d05      	ldr	r5, [pc, #20]	@ (800290c <_sbrk_r+0x1c>)
 80028f6:	4604      	mov	r4, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	602b      	str	r3, [r5, #0]
 80028fc:	f7fe f880 	bl	8000a00 <_sbrk>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d102      	bne.n	800290a <_sbrk_r+0x1a>
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	b103      	cbz	r3, 800290a <_sbrk_r+0x1a>
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	20000208 	.word	0x20000208

08002910 <memchr>:
 8002910:	4603      	mov	r3, r0
 8002912:	b510      	push	{r4, lr}
 8002914:	b2c9      	uxtb	r1, r1
 8002916:	4402      	add	r2, r0
 8002918:	4293      	cmp	r3, r2
 800291a:	4618      	mov	r0, r3
 800291c:	d101      	bne.n	8002922 <memchr+0x12>
 800291e:	2000      	movs	r0, #0
 8002920:	e003      	b.n	800292a <memchr+0x1a>
 8002922:	7804      	ldrb	r4, [r0, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	428c      	cmp	r4, r1
 8002928:	d1f6      	bne.n	8002918 <memchr+0x8>
 800292a:	bd10      	pop	{r4, pc}

0800292c <memcpy>:
 800292c:	440a      	add	r2, r1
 800292e:	4291      	cmp	r1, r2
 8002930:	f100 33ff 	add.w	r3, r0, #4294967295
 8002934:	d100      	bne.n	8002938 <memcpy+0xc>
 8002936:	4770      	bx	lr
 8002938:	b510      	push	{r4, lr}
 800293a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800293e:	4291      	cmp	r1, r2
 8002940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002944:	d1f9      	bne.n	800293a <memcpy+0xe>
 8002946:	bd10      	pop	{r4, pc}

08002948 <_realloc_r>:
 8002948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800294c:	4680      	mov	r8, r0
 800294e:	4615      	mov	r5, r2
 8002950:	460c      	mov	r4, r1
 8002952:	b921      	cbnz	r1, 800295e <_realloc_r+0x16>
 8002954:	4611      	mov	r1, r2
 8002956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800295a:	f7ff bc39 	b.w	80021d0 <_malloc_r>
 800295e:	b92a      	cbnz	r2, 800296c <_realloc_r+0x24>
 8002960:	f7ff fbcc 	bl	80020fc <_free_r>
 8002964:	2400      	movs	r4, #0
 8002966:	4620      	mov	r0, r4
 8002968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800296c:	f000 f81a 	bl	80029a4 <_malloc_usable_size_r>
 8002970:	4285      	cmp	r5, r0
 8002972:	4606      	mov	r6, r0
 8002974:	d802      	bhi.n	800297c <_realloc_r+0x34>
 8002976:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800297a:	d8f4      	bhi.n	8002966 <_realloc_r+0x1e>
 800297c:	4629      	mov	r1, r5
 800297e:	4640      	mov	r0, r8
 8002980:	f7ff fc26 	bl	80021d0 <_malloc_r>
 8002984:	4607      	mov	r7, r0
 8002986:	2800      	cmp	r0, #0
 8002988:	d0ec      	beq.n	8002964 <_realloc_r+0x1c>
 800298a:	42b5      	cmp	r5, r6
 800298c:	462a      	mov	r2, r5
 800298e:	4621      	mov	r1, r4
 8002990:	bf28      	it	cs
 8002992:	4632      	movcs	r2, r6
 8002994:	f7ff ffca 	bl	800292c <memcpy>
 8002998:	4621      	mov	r1, r4
 800299a:	4640      	mov	r0, r8
 800299c:	f7ff fbae 	bl	80020fc <_free_r>
 80029a0:	463c      	mov	r4, r7
 80029a2:	e7e0      	b.n	8002966 <_realloc_r+0x1e>

080029a4 <_malloc_usable_size_r>:
 80029a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029a8:	1f18      	subs	r0, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bfbc      	itt	lt
 80029ae:	580b      	ldrlt	r3, [r1, r0]
 80029b0:	18c0      	addlt	r0, r0, r3
 80029b2:	4770      	bx	lr

080029b4 <_init>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	bf00      	nop
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr

080029c0 <_fini>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr
