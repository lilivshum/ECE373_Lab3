
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002704  08002704  00003704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002774  08002774  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002774  08002774  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002774  08002774  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002774  08002774  00003774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002778  08002778  00003778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800277c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000005c  080027d8  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080027d8  00004204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005725  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa6  00000000  00000000  000097aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0000b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000484  00000000  00000000  0000b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ecf  00000000  00000000  0000bd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d83  00000000  00000000  00022be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008347b  00000000  00000000  0002b966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aede1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b40  00000000  00000000  000aee24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000b0964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ec 	.word	0x080026ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080026ec 	.word	0x080026ec

0800014c <LCD_init>:
#define LCD_CSR_INC   0x06
#define LCD_SFT_MOV   0x14


void LCD_init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
//	 LCD_Write_Command(0x08);
//	 LCD_Write_Command(0x01);
//	 LCD_Write_Command(0x04);
	// ---------------------------------------------------------

	 HAL_Delay(15);
 8000150:	200f      	movs	r0, #15
 8000152:	f000 fbcd 	bl	80008f0 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);//8-bit display
 8000156:	2038      	movs	r0, #56	@ 0x38
 8000158:	f000 f834 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 800015c:	2005      	movs	r0, #5
 800015e:	f000 fbc7 	bl	80008f0 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 8000162:	2038      	movs	r0, #56	@ 0x38
 8000164:	f000 f82e 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 8000168:	2005      	movs	r0, #5
 800016a:	f000 fbc1 	bl	80008f0 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 800016e:	2038      	movs	r0, #56	@ 0x38
 8000170:	f000 f828 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(5);
 8000174:	2005      	movs	r0, #5
 8000176:	f000 fbbb 	bl	80008f0 <HAL_Delay>
	 LCD_Write_Command(LCD_2_LINE_8_BITS);
 800017a:	2038      	movs	r0, #56	@ 0x38
 800017c:	f000 f822 	bl	80001c4 <LCD_Write_Command>

	 //LCD_Write_Command(0x08);
	 //LCD_Write_Command(LCD_2_LINE_8_BITS);

	 //LCD_Write_Command(0x01);
	 LCD_Write_Command(0x3F); // sets lines
 8000180:	203f      	movs	r0, #63	@ 0x3f
 8000182:	f000 f81f 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 8000186:	2001      	movs	r0, #1
 8000188:	f000 fbb2 	bl	80008f0 <HAL_Delay>
	 //LCD_Write_Command(0x06);
	 LCD_Write_Command(0x08); // display off
 800018c:	2008      	movs	r0, #8
 800018e:	f000 f819 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 8000192:	2001      	movs	r0, #1
 8000194:	f000 fbac 	bl	80008f0 <HAL_Delay>
	 //LCD_Write_Command(0x0c);
	 LCD_Write_Command(0x01); // display clear
 8000198:	2001      	movs	r0, #1
 800019a:	f000 f813 	bl	80001c4 <LCD_Write_Command>
	 HAL_Delay(1);
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fba6 	bl	80008f0 <HAL_Delay>

	 LCD_Write_Command(0x06); // entry mode set
 80001a4:	2006      	movs	r0, #6
 80001a6:	f000 f80d 	bl	80001c4 <LCD_Write_Command>
	 // HAL_Delay(1);
	 // turn on display:
	 LCD_Write_Command(0x0C); // display on ?
 80001aa:	200c      	movs	r0, #12
 80001ac:	f000 f80a 	bl	80001c4 <LCD_Write_Command>


}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <LCD_Clear>:

void LCD_Clear(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
 LCD_Write_Command(0x01);//
 80001b8:	2001      	movs	r0, #1
 80001ba:	f000 f803 	bl	80001c4 <LCD_Write_Command>
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <LCD_Write_Command>:


void LCD_Write_Command(uchar Com)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
 // while(LCD_Read_State());
 //	 HAL_Delay(10);
 //	 unsigned int Read_Dat = 0; //BJ


	HAL_Delay(10);
 80001ce:	200a      	movs	r0, #10
 80001d0:	f000 fb8e 	bl	80008f0 <HAL_Delay>
	// unsigned int Read_Dat = 0; //BJ

	 HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin, GPIO_PIN_RESET); // LCD_RS = 0;
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001da:	4811      	ldr	r0, [pc, #68]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001dc:	f001 f92a 	bl	8001434 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_RW_Pin, GPIO_PIN_RESET); // LCD_RW = 0;
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e6:	480e      	ldr	r0, [pc, #56]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001e8:	f001 f924 	bl	8001434 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_SET); //LCD_E_Pin = 1;
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001f2:	480b      	ldr	r0, [pc, #44]	@ (8000220 <LCD_Write_Command+0x5c>)
 80001f4:	f001 f91e 	bl	8001434 <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 80001f8:	2001      	movs	r0, #1
 80001fa:	f000 fb79 	bl	80008f0 <HAL_Delay>

	 LCD_PORT = Com;
 80001fe:	4a09      	ldr	r2, [pc, #36]	@ (8000224 <LCD_Write_Command+0x60>)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	60d3      	str	r3, [r2, #12]

	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_RESET);  //LCD_E_Pin =0;
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800020a:	4805      	ldr	r0, [pc, #20]	@ (8000220 <LCD_Write_Command+0x5c>)
 800020c:	f001 f912 	bl	8001434 <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fb6d 	bl	80008f0 <HAL_Delay>
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40010c00 	.word	0x40010c00
 8000224:	40010800 	.word	0x40010800

08000228 <LCD_Write_Data>:

void LCD_Write_Data(uchar dat)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
 //while(LCD_Read_State());
	 HAL_Delay(1);
 8000232:	2001      	movs	r0, #1
 8000234:	f000 fb5c 	bl	80008f0 <HAL_Delay>

	 HAL_GPIO_WritePin(GPIOB,LCD_RS_Pin, GPIO_PIN_SET); //LCD_RS = 1;
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800023e:	4811      	ldr	r0, [pc, #68]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000240:	f001 f8f8 	bl	8001434 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_RW_Pin, GPIO_PIN_RESET); // LCD_RW = 0;
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024a:	480e      	ldr	r0, [pc, #56]	@ (8000284 <LCD_Write_Data+0x5c>)
 800024c:	f001 f8f2 	bl	8001434 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_SET); //LCD_E_Pin = 1;
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000256:	480b      	ldr	r0, [pc, #44]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000258:	f001 f8ec 	bl	8001434 <HAL_GPIO_WritePin>

	 HAL_Delay(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 fb47 	bl	80008f0 <HAL_Delay>
	 //Delay_ms(1);

	 LCD_PORT = dat;
 8000262:	4a09      	ldr	r2, [pc, #36]	@ (8000288 <LCD_Write_Data+0x60>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	60d3      	str	r3, [r2, #12]

	 HAL_GPIO_WritePin(GPIOB,LCD_E_Pin, GPIO_PIN_RESET);  //Set LCD_E = 0;
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800026e:	4805      	ldr	r0, [pc, #20]	@ (8000284 <LCD_Write_Data+0x5c>)
 8000270:	f001 f8e0 	bl	8001434 <HAL_GPIO_WritePin>

	 HAL_Delay(1);
 8000274:	2001      	movs	r0, #1
 8000276:	f000 fb3b 	bl	80008f0 <HAL_Delay>

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40010c00 	.word	0x40010c00
 8000288:	40010800 	.word	0x40010800

0800028c <LCD_Set_Position>:

 return state;
}

void LCD_Set_Position(uchar x,uchar y)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	460a      	mov	r2, r1
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	4613      	mov	r3, r2
 800029a:	71bb      	strb	r3, [r7, #6]
	 if(y==0)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d106      	bne.n	80002b0 <LCD_Set_Position+0x24>
	 {
		 LCD_Write_Command(0x80+x);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	3b80      	subs	r3, #128	@ 0x80
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff8b 	bl	80001c4 <LCD_Write_Command>
	 {
		 LCD_Write_Command(0xc0+x);
	 }
	 else;

}
 80002ae:	e008      	b.n	80002c2 <LCD_Set_Position+0x36>
	 else if(y==1)
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d105      	bne.n	80002c2 <LCD_Set_Position+0x36>
		 LCD_Write_Command(0xc0+x);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	3b40      	subs	r3, #64	@ 0x40
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff81 	bl	80001c4 <LCD_Write_Command>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <LCD_Display_String>:
	LCD_Set_Position(x,y);
	LCD_Write_Data(Char);
}

void LCD_Display_String(uchar x,uchar y,uchar *str)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	603a      	str	r2, [r7, #0]
 80002d4:	71fb      	strb	r3, [r7, #7]
 80002d6:	460b      	mov	r3, r1
 80002d8:	71bb      	strb	r3, [r7, #6]
	LCD_Set_Position(x,y);
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	4611      	mov	r1, r2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ffd3 	bl	800028c <LCD_Set_Position>
	while(*str !='\0')
 80002e6:	e009      	b.n	80002fc <LCD_Display_String+0x32>
	{
		LCD_Write_Data(*str++);
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	1c5a      	adds	r2, r3, #1
 80002ec:	603a      	str	r2, [r7, #0]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff99 	bl	8000228 <LCD_Write_Data>
		HAL_Delay(1);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 fafa 	bl	80008f0 <HAL_Delay>
	while(*str !='\0')
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f1      	bne.n	80002e8 <LCD_Display_String+0x1e>
	}
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000322:	4a19      	ldr	r2, [pc, #100]	@ (8000388 <MX_ADC1_Init+0x78>)
 8000324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <MX_ADC1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000338:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <MX_ADC1_Init+0x74>)
 800033a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800033e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000340:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000346:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <MX_ADC1_Init+0x74>)
 800034e:	f000 faf3 	bl	8000938 <HAL_ADC_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000358:	f000 f998 	bl	800068c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800035c:	2308      	movs	r3, #8
 800035e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000360:	2301      	movs	r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4805      	ldr	r0, [pc, #20]	@ (8000384 <MX_ADC1_Init+0x74>)
 800036e:	f000 fc8d 	bl	8000c8c <HAL_ADC_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000378:	f000 f988 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000078 	.word	0x20000078
 8000388:	40012400 	.word	0x40012400

0800038c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a18      	ldr	r2, [pc, #96]	@ (8000408 <HAL_ADC_MspInit+0x7c>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d129      	bne.n	8000400 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003ac:	4b17      	ldr	r3, [pc, #92]	@ (800040c <HAL_ADC_MspInit+0x80>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a16      	ldr	r2, [pc, #88]	@ (800040c <HAL_ADC_MspInit+0x80>)
 80003b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <HAL_ADC_MspInit+0x80>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <HAL_ADC_MspInit+0x80>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a10      	ldr	r2, [pc, #64]	@ (800040c <HAL_ADC_MspInit+0x80>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <HAL_ADC_MspInit+0x80>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = load_cell_Pin;
 80003dc:	2301      	movs	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e0:	2303      	movs	r3, #3
 80003e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(load_cell_GPIO_Port, &GPIO_InitStruct);
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	4619      	mov	r1, r3
 80003ea:	4809      	ldr	r0, [pc, #36]	@ (8000410 <HAL_ADC_MspInit+0x84>)
 80003ec:	f000 fe9e 	bl	800112c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2100      	movs	r1, #0
 80003f4:	2012      	movs	r0, #18
 80003f6:	f000 fe62 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80003fa:	2012      	movs	r0, #18
 80003fc:	f000 fe7b 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40012400 	.word	0x40012400
 800040c:	40021000 	.word	0x40021000
 8000410:	40010c00 	.word	0x40010c00

08000414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000428:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_GPIO_Init+0xec>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a34      	ldr	r2, [pc, #208]	@ (8000500 <MX_GPIO_Init+0xec>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_GPIO_Init+0xec>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	4b2f      	ldr	r3, [pc, #188]	@ (8000500 <MX_GPIO_Init+0xec>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a2e      	ldr	r2, [pc, #184]	@ (8000500 <MX_GPIO_Init+0xec>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b2c      	ldr	r3, [pc, #176]	@ (8000500 <MX_GPIO_Init+0xec>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b29      	ldr	r3, [pc, #164]	@ (8000500 <MX_GPIO_Init+0xec>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a28      	ldr	r2, [pc, #160]	@ (8000500 <MX_GPIO_Init+0xec>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b26      	ldr	r3, [pc, #152]	@ (8000500 <MX_GPIO_Init+0xec>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b23      	ldr	r3, [pc, #140]	@ (8000500 <MX_GPIO_Init+0xec>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a22      	ldr	r2, [pc, #136]	@ (8000500 <MX_GPIO_Init+0xec>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b20      	ldr	r3, [pc, #128]	@ (8000500 <MX_GPIO_Init+0xec>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 8000488:	2200      	movs	r2, #0
 800048a:	21ff      	movs	r1, #255	@ 0xff
 800048c:	481d      	ldr	r0, [pc, #116]	@ (8000504 <MX_GPIO_Init+0xf0>)
 800048e:	f000 ffd1 	bl	8001434 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 41e8 	mov.w	r1, #29696	@ 0x7400
 8000498:	481b      	ldr	r0, [pc, #108]	@ (8000508 <MX_GPIO_Init+0xf4>)
 800049a:	f000 ffcb 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 800049e:	23ff      	movs	r3, #255	@ 0xff
 80004a0:	613b      	str	r3, [r7, #16]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	4813      	ldr	r0, [pc, #76]	@ (8000504 <MX_GPIO_Init+0xf0>)
 80004b6:	f000 fe39 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	480d      	ldr	r0, [pc, #52]	@ (8000508 <MX_GPIO_Init+0xf4>)
 80004d4:	f000 fe2a 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
 80004d8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80004dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_GPIO_Init+0xf4>)
 80004f2:	f000 fe1b 	bl	800112c <HAL_GPIO_Init>

}
 80004f6:	bf00      	nop
 80004f8:	3720      	adds	r7, #32
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800
 8000508:	40010c00 	.word	0x40010c00

0800050c <inc_time>:

int h = 0; // hours
int m = 0; // minutes
int s = 0; // seconds

void inc_time(char* str){
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af02      	add	r7, sp, #8
 8000512:	6078      	str	r0, [r7, #4]
	s++;
 8000514:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <inc_time+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <inc_time+0x64>)
 800051c:	6013      	str	r3, [r2, #0]
	if(s == 60){
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <inc_time+0x64>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b3c      	cmp	r3, #60	@ 0x3c
 8000524:	d107      	bne.n	8000536 <inc_time+0x2a>
		s = 0;
 8000526:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <inc_time+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
		m++;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <inc_time+0x68>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	4a10      	ldr	r2, [pc, #64]	@ (8000574 <inc_time+0x68>)
 8000534:	6013      	str	r3, [r2, #0]
	}
	if(m == 60){
 8000536:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <inc_time+0x68>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b3c      	cmp	r3, #60	@ 0x3c
 800053c:	d107      	bne.n	800054e <inc_time+0x42>
		m = 0;
 800053e:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <inc_time+0x68>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
		h = h+1;
 8000544:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <inc_time+0x6c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	4a0b      	ldr	r2, [pc, #44]	@ (8000578 <inc_time+0x6c>)
 800054c:	6013      	str	r3, [r2, #0]
	}
	int buffer = sprintf(str, "%d : %d : %d", h, m, s);
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <inc_time+0x6c>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <inc_time+0x68>)
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <inc_time+0x64>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	460b      	mov	r3, r1
 800055e:	4907      	ldr	r1, [pc, #28]	@ (800057c <inc_time+0x70>)
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f001 fc13 	bl	8001d8c <siprintf>
 8000566:	60f8      	str	r0, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000b0 	.word	0x200000b0
 8000574:	200000ac 	.word	0x200000ac
 8000578:	200000a8 	.word	0x200000a8
 800057c:	08002704 	.word	0x08002704

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	@ 0x38
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char string_val [50] = "0:0:0";
 8000586:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <main+0x58>)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	6810      	ldr	r0, [r2, #0]
 800058c:	6018      	str	r0, [r3, #0]
 800058e:	8892      	ldrh	r2, [r2, #4]
 8000590:	809a      	strh	r2, [r3, #4]
 8000592:	f107 030a 	add.w	r3, r7, #10
 8000596:	222c      	movs	r2, #44	@ 0x2c
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fc16 	bl	8001dcc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 f944 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f81a 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f7ff ff34 	bl	8000414 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ac:	f7ff feb0 	bl	8000310 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 80005b0:	f7ff fdcc 	bl	800014c <LCD_init>
  LCD_Clear();
 80005b4:	f7ff fdfe 	bl	80001b4 <LCD_Clear>
    /* USER CODE END WHILE */
	  // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // Turn the buzzer on
	  /*HAL_Delay(1000); // Wait for 1 second
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // Turn the buzzer off
	  HAL_Delay(1000);*/
	  LCD_Display_String((uchar)0, (uchar)0, (uchar*)string_val);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	461a      	mov	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff fe83 	bl	80002ca <LCD_Display_String>
	  HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c8:	f000 f992 	bl	80008f0 <HAL_Delay>
	  inc_time(string_val);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff9c 	bl	800050c <inc_time>
	  LCD_Display_String((uchar)0, (uchar)0, (uchar*)string_val);
 80005d4:	bf00      	nop
 80005d6:	e7ef      	b.n	80005b8 <main+0x38>
 80005d8:	08002714 	.word	0x08002714

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e6:	2228      	movs	r2, #40	@ 0x28
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fbee 	bl	8001dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000628:	2300      	movs	r3, #0
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ff17 	bl	8001464 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800063c:	f000 f826 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f984 	bl	8001968 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000666:	f000 f811 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800066a:	2302      	movs	r3, #2
 800066c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fad3 	bl	8001c20 <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000680:	f000 f804 	bl	800068c <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	@ 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_MspInit+0x60>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <HAL_MspInit+0x60>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010000 	.word	0x40010000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <NMI_Handler+0x4>

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <MemManage_Handler+0x4>

08000714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <UsageFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f8b4 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000758:	4802      	ldr	r0, [pc, #8]	@ (8000764 <ADC1_2_IRQHandler+0x10>)
 800075a:	f000 f9c5 	bl	8000ae8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000078 	.word	0x20000078

08000768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000770:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <_sbrk+0x5c>)
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <_sbrk+0x60>)
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <_sbrk+0x64>)
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <_sbrk+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	429a      	cmp	r2, r3
 8000796:	d207      	bcs.n	80007a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000798:	f001 fb20 	bl	8001ddc <__errno>
 800079c:	4603      	mov	r3, r0
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	e009      	b.n	80007bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <_sbrk+0x64>)
 80007b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20005000 	.word	0x20005000
 80007c8:	00000400 	.word	0x00000400
 80007cc:	200000b4 	.word	0x200000b4
 80007d0:	20000208 	.word	0x20000208

080007d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e0:	f7ff fff8 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007e6:	490c      	ldr	r1, [pc, #48]	@ (8000818 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e8:	4a0c      	ldr	r2, [pc, #48]	@ (800081c <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007fc:	4c09      	ldr	r4, [pc, #36]	@ (8000824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080a:	f001 faed 	bl	8001de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080e:	f7ff feb7 	bl	8000580 <main>
  bx lr
 8000812:	4770      	bx	lr
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800081c:	0800277c 	.word	0x0800277c
  ldr r2, =_sbss
 8000820:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000824:	20000204 	.word	0x20000204

08000828 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <CAN1_RX1_IRQHandler>
	...

0800082c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_Init+0x28>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_Init+0x28>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 fc33 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000842:	200f      	movs	r0, #15
 8000844:	f000 f808 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000848:	f7ff ff26 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_InitTick+0x54>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_InitTick+0x58>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fc4b 	bl	8001112 <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e00e      	b.n	80008a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d80a      	bhi.n	80008a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f000 fc13 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000898:	4a06      	ldr	r2, [pc, #24]	@ (80008b4 <HAL_InitTick+0x5c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <HAL_IncTick+0x1c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <HAL_IncTick+0x20>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a03      	ldr	r2, [pc, #12]	@ (80008d8 <HAL_IncTick+0x20>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000008 	.word	0x20000008
 80008d8:	200000b8 	.word	0x200000b8

080008dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b02      	ldr	r3, [pc, #8]	@ (80008ec <HAL_GetTick+0x10>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	200000b8 	.word	0x200000b8

080008f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff fff0 	bl	80008dc <HAL_GetTick>
 80008fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d005      	beq.n	8000916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_Delay+0x44>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000916:	bf00      	nop
 8000918:	f7ff ffe0 	bl	80008dc <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8f7      	bhi.n	8000918 <HAL_Delay+0x28>
  {
  }
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008

08000938 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e0be      	b.n	8000ad8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	2b00      	cmp	r3, #0
 8000966:	d109      	bne.n	800097c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fd08 	bl	800038c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 fa7d 	bl	8000e7c <ADC_ConversionStop_Disable>
 8000982:	4603      	mov	r3, r0
 8000984:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800098a:	f003 0310 	and.w	r3, r3, #16
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8099 	bne.w	8000ac6 <HAL_ADC_Init+0x18e>
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 8095 	bne.w	8000ac6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80009a4:	f023 0302 	bic.w	r3, r3, #2
 80009a8:	f043 0202 	orr.w	r2, r3, #2
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7b1b      	ldrb	r3, [r3, #12]
 80009be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009d0:	d003      	beq.n	80009da <HAL_ADC_Init+0xa2>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d102      	bne.n	80009e0 <HAL_ADC_Init+0xa8>
 80009da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009de:	e000      	b.n	80009e2 <HAL_ADC_Init+0xaa>
 80009e0:	2300      	movs	r3, #0
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7d1b      	ldrb	r3, [r3, #20]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d119      	bne.n	8000a24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7b1b      	ldrb	r3, [r3, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d109      	bne.n	8000a0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	035a      	lsls	r2, r3, #13
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	e00b      	b.n	8000a24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a10:	f043 0220 	orr.w	r2, r3, #32
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1c:	f043 0201 	orr.w	r2, r3, #1
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	430a      	orrs	r2, r1
 8000a36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <HAL_ADC_Init+0x1a8>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a54:	d003      	beq.n	8000a5e <HAL_ADC_Init+0x126>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d104      	bne.n	8000a68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	691b      	ldr	r3, [r3, #16]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	051b      	lsls	r3, r3, #20
 8000a66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_ADC_Init+0x1ac>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d10b      	bne.n	8000aa4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a96:	f023 0303 	bic.w	r3, r3, #3
 8000a9a:	f043 0201 	orr.w	r2, r3, #1
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aa2:	e018      	b.n	8000ad6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa8:	f023 0312 	bic.w	r3, r3, #18
 8000aac:	f043 0210 	orr.w	r2, r3, #16
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab8:	f043 0201 	orr.w	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ac4:	e007      	b.n	8000ad6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aca:	f043 0210 	orr.w	r2, r3, #16
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ae4:	ff1f0efe 	.word	0xff1f0efe

08000ae8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d03e      	beq.n	8000b88 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d039      	beq.n	8000b88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d105      	bne.n	8000b2c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b36:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b3a:	d11d      	bne.n	8000b78 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d119      	bne.n	8000b78 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0220 	bic.w	r2, r2, #32
 8000b52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d105      	bne.n	8000b78 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b70:	f043 0201 	orr.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 f874 	bl	8000c66 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f06f 0212 	mvn.w	r2, #18
 8000b86:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d04d      	beq.n	8000c2e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d048      	beq.n	8000c2e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d105      	bne.n	8000bb4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000bbe:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000bc2:	d012      	beq.n	8000bea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d125      	bne.n	8000c1e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000bdc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000be0:	d11d      	bne.n	8000c1e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d119      	bne.n	8000c1e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bf8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d105      	bne.n	8000c1e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c16:	f043 0201 	orr.w	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f96d 	bl	8000efe <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f06f 020c 	mvn.w	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d012      	beq.n	8000c5e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00d      	beq.n	8000c5e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f812 	bl	8000c78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f06f 0201 	mvn.w	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d101      	bne.n	8000cac <HAL_ADC_ConfigChannel+0x20>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e0dc      	b.n	8000e66 <HAL_ADC_ConfigChannel+0x1da>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d81c      	bhi.n	8000cf6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	3b05      	subs	r3, #5
 8000cce:	221f      	movs	r2, #31
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	4019      	ands	r1, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3b05      	subs	r3, #5
 8000ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cf4:	e03c      	b.n	8000d70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b0c      	cmp	r3, #12
 8000cfc:	d81c      	bhi.n	8000d38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3b23      	subs	r3, #35	@ 0x23
 8000d10:	221f      	movs	r2, #31
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	4019      	ands	r1, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	3b23      	subs	r3, #35	@ 0x23
 8000d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d36:	e01b      	b.n	8000d70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	3b41      	subs	r3, #65	@ 0x41
 8000d4a:	221f      	movs	r2, #31
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4019      	ands	r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	3b41      	subs	r3, #65	@ 0x41
 8000d64:	fa00 f203 	lsl.w	r2, r0, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b09      	cmp	r3, #9
 8000d76:	d91c      	bls.n	8000db2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68d9      	ldr	r1, [r3, #12]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	3b1e      	subs	r3, #30
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4019      	ands	r1, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	6898      	ldr	r0, [r3, #8]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	3b1e      	subs	r3, #30
 8000da4:	fa00 f203 	lsl.w	r2, r0, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	e019      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6919      	ldr	r1, [r3, #16]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4019      	ands	r1, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	6898      	ldr	r0, [r3, #8]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	fa00 f203 	lsl.w	r2, r0, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d003      	beq.n	8000df6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000df2:	2b11      	cmp	r3, #17
 8000df4:	d132      	bne.n	8000e5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000e70 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d125      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d126      	bne.n	8000e5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b10      	cmp	r3, #16
 8000e24:	d11a      	bne.n	8000e5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9a      	lsrs	r2, r3, #18
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e3c:	e002      	b.n	8000e44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f9      	bne.n	8000e3e <HAL_ADC_ConfigChannel+0x1b2>
 8000e4a:	e007      	b.n	8000e5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	f043 0220 	orr.w	r2, r3, #32
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40012400 	.word	0x40012400
 8000e74:	20000000 	.word	0x20000000
 8000e78:	431bde83 	.word	0x431bde83

08000e7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d12e      	bne.n	8000ef4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ea6:	f7ff fd19 	bl	80008dc <HAL_GetTick>
 8000eaa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eac:	e01b      	b.n	8000ee6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eae:	f7ff fd15 	bl	80008dc <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d914      	bls.n	8000ee6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d10d      	bne.n	8000ee6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ece:	f043 0210 	orr.w	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eda:	f043 0201 	orr.w	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e007      	b.n	8000ef6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d0dc      	beq.n	8000eae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4906      	ldr	r1, [pc, #24]	@ (8000fa8 <__NVIC_EnableIRQ+0x34>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	@ (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	@ 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff90 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff2d 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff42 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff35 	bl	8000f74 <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b08b      	sub	sp, #44	@ 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e169      	b.n	8001414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001140:	2201      	movs	r2, #1
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8158 	bne.w	800140e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a9a      	ldr	r2, [pc, #616]	@ (80013cc <HAL_GPIO_Init+0x2a0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d05e      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001168:	4a98      	ldr	r2, [pc, #608]	@ (80013cc <HAL_GPIO_Init+0x2a0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d875      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800116e:	4a98      	ldr	r2, [pc, #608]	@ (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d058      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001174:	4a96      	ldr	r2, [pc, #600]	@ (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d86f      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800117a:	4a96      	ldr	r2, [pc, #600]	@ (80013d4 <HAL_GPIO_Init+0x2a8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d052      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001180:	4a94      	ldr	r2, [pc, #592]	@ (80013d4 <HAL_GPIO_Init+0x2a8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d869      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001186:	4a94      	ldr	r2, [pc, #592]	@ (80013d8 <HAL_GPIO_Init+0x2ac>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d04c      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 800118c:	4a92      	ldr	r2, [pc, #584]	@ (80013d8 <HAL_GPIO_Init+0x2ac>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d863      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001192:	4a92      	ldr	r2, [pc, #584]	@ (80013dc <HAL_GPIO_Init+0x2b0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d046      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001198:	4a90      	ldr	r2, [pc, #576]	@ (80013dc <HAL_GPIO_Init+0x2b0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d85d      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d82a      	bhi.n	80011f8 <HAL_GPIO_Init+0xcc>
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d859      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 80011a6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <HAL_GPIO_Init+0x80>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001201 	.word	0x08001201
 80011b4:	08001213 	.word	0x08001213
 80011b8:	08001255 	.word	0x08001255
 80011bc:	0800125b 	.word	0x0800125b
 80011c0:	0800125b 	.word	0x0800125b
 80011c4:	0800125b 	.word	0x0800125b
 80011c8:	0800125b 	.word	0x0800125b
 80011cc:	0800125b 	.word	0x0800125b
 80011d0:	0800125b 	.word	0x0800125b
 80011d4:	0800125b 	.word	0x0800125b
 80011d8:	0800125b 	.word	0x0800125b
 80011dc:	0800125b 	.word	0x0800125b
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	0800125b 	.word	0x0800125b
 80011e8:	0800125b 	.word	0x0800125b
 80011ec:	0800125b 	.word	0x0800125b
 80011f0:	08001209 	.word	0x08001209
 80011f4:	0800121d 	.word	0x0800121d
 80011f8:	4a79      	ldr	r2, [pc, #484]	@ (80013e0 <HAL_GPIO_Init+0x2b4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fe:	e02c      	b.n	800125a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e029      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	3304      	adds	r3, #4
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e024      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	3308      	adds	r3, #8
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e01f      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	330c      	adds	r3, #12
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e01a      	b.n	800125c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122e:	2304      	movs	r3, #4
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e013      	b.n	800125c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	611a      	str	r2, [r3, #16]
          break;
 8001246:	e009      	b.n	800125c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001248:	2308      	movs	r3, #8
 800124a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	615a      	str	r2, [r3, #20]
          break;
 8001252:	e003      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x130>
          break;
 800125a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2bff      	cmp	r3, #255	@ 0xff
 8001260:	d801      	bhi.n	8001266 <HAL_GPIO_Init+0x13a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	e001      	b.n	800126a <HAL_GPIO_Init+0x13e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3304      	adds	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2bff      	cmp	r3, #255	@ 0xff
 8001270:	d802      	bhi.n	8001278 <HAL_GPIO_Init+0x14c>
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x152>
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	3b08      	subs	r3, #8
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	210f      	movs	r1, #15
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	6a39      	ldr	r1, [r7, #32]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	431a      	orrs	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80b1 	beq.w	800140e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ac:	4b4d      	ldr	r3, [pc, #308]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b4a      	ldr	r3, [pc, #296]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c4:	4a48      	ldr	r2, [pc, #288]	@ (80013e8 <HAL_GPIO_Init+0x2bc>)
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a40      	ldr	r2, [pc, #256]	@ (80013ec <HAL_GPIO_Init+0x2c0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1ec>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3f      	ldr	r2, [pc, #252]	@ (80013f0 <HAL_GPIO_Init+0x2c4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1e8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3d      	ldr	r2, [pc, #244]	@ (80013f8 <HAL_GPIO_Init+0x2cc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e0>
 8001308:	2303      	movs	r3, #3
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 800130c:	2304      	movs	r3, #4
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001310:	2302      	movs	r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001318:	2300      	movs	r3, #0
 800131a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132a:	492f      	ldr	r1, [pc, #188]	@ (80013e8 <HAL_GPIO_Init+0x2bc>)
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	492c      	ldr	r1, [pc, #176]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	4928      	ldr	r1, [pc, #160]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800136c:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	4922      	ldr	r1, [pc, #136]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	60cb      	str	r3, [r1, #12]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137a:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	491e      	ldr	r1, [pc, #120]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4918      	ldr	r1, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4914      	ldr	r1, [pc, #80]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d021      	beq.n	8001400 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	490e      	ldr	r1, [pc, #56]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
 80013c8:	e021      	b.n	800140e <HAL_GPIO_Init+0x2e2>
 80013ca:	bf00      	nop
 80013cc:	10320000 	.word	0x10320000
 80013d0:	10310000 	.word	0x10310000
 80013d4:	10220000 	.word	0x10220000
 80013d8:	10210000 	.word	0x10210000
 80013dc:	10120000 	.word	0x10120000
 80013e0:	10110000 	.word	0x10110000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40011400 	.word	0x40011400
 80013fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_GPIO_Init+0x304>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	43db      	mvns	r3, r3
 8001408:	4909      	ldr	r1, [pc, #36]	@ (8001430 <HAL_GPIO_Init+0x304>)
 800140a:	4013      	ands	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	3301      	adds	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f ae8e 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	372c      	adds	r7, #44	@ 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	611a      	str	r2, [r3, #16]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e272      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8087 	beq.w	8001592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001484:	4b92      	ldr	r3, [pc, #584]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b04      	cmp	r3, #4
 800148e:	d00c      	beq.n	80014aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001490:	4b8f      	ldr	r3, [pc, #572]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d112      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e>
 800149c:	4b8c      	ldr	r3, [pc, #560]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a8:	d10b      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	4b89      	ldr	r3, [pc, #548]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d06c      	beq.n	8001590 <HAL_RCC_OscConfig+0x12c>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d168      	bne.n	8001590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e24c      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x76>
 80014cc:	4b80      	ldr	r3, [pc, #512]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a7f      	ldr	r2, [pc, #508]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e02e      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x98>
 80014e2:	4b7b      	ldr	r3, [pc, #492]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a7a      	ldr	r2, [pc, #488]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b78      	ldr	r3, [pc, #480]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a77      	ldr	r2, [pc, #476]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0xbc>
 8001506:	4b72      	ldr	r3, [pc, #456]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a71      	ldr	r2, [pc, #452]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b6f      	ldr	r3, [pc, #444]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6e      	ldr	r2, [pc, #440]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 8001520:	4b6b      	ldr	r3, [pc, #428]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a6a      	ldr	r2, [pc, #424]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b68      	ldr	r3, [pc, #416]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a67      	ldr	r2, [pc, #412]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff f9cc 	bl	80008dc <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff f9c8 	bl	80008dc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	@ 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e200      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b5d      	ldr	r3, [pc, #372]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0xe4>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff f9b8 	bl	80008dc <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff f9b4 	bl	80008dc <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	@ 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1ec      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b53      	ldr	r3, [pc, #332]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x10c>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d063      	beq.n	8001666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159e:	4b4c      	ldr	r3, [pc, #304]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015aa:	4b49      	ldr	r3, [pc, #292]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x18c>
 80015b6:	4b46      	ldr	r3, [pc, #280]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	4b43      	ldr	r3, [pc, #268]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x176>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1c0      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b3d      	ldr	r3, [pc, #244]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4939      	ldr	r1, [pc, #228]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e03a      	b.n	8001666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	4b36      	ldr	r3, [pc, #216]	@ (80016d4 <HAL_RCC_OscConfig+0x270>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff f96d 	bl	80008dc <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff f969 	bl	80008dc <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1a1      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4927      	ldr	r1, [pc, #156]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b26      	ldr	r3, [pc, #152]	@ (80016d4 <HAL_RCC_OscConfig+0x270>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff f94c 	bl	80008dc <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff f948 	bl	80008dc <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e180      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03a      	beq.n	80016e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d019      	beq.n	80016ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <HAL_RCC_OscConfig+0x274>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff f92c 	bl	80008dc <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff f928 	bl	80008dc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e160      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f000 fa9c 	bl	8001be4 <RCC_Delay>
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_RCC_OscConfig+0x274>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff f912 	bl	80008dc <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ba:	e00f      	b.n	80016dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff f90e 	bl	80008dc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d908      	bls.n	80016dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e146      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	42420000 	.word	0x42420000
 80016d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e9      	bne.n	80016bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a6 	beq.w	8001842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b88      	ldr	r3, [pc, #544]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a87      	ldr	r2, [pc, #540]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b85      	ldr	r3, [pc, #532]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001722:	4b82      	ldr	r3, [pc, #520]	@ (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172e:	4b7f      	ldr	r3, [pc, #508]	@ (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7e      	ldr	r2, [pc, #504]	@ (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff f8cf 	bl	80008dc <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff f8cb 	bl	80008dc <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	@ 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e103      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b75      	ldr	r3, [pc, #468]	@ (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x312>
 8001768:	4b6f      	ldr	r3, [pc, #444]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a6e      	ldr	r2, [pc, #440]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	e02d      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x334>
 800177e:	4b6a      	ldr	r3, [pc, #424]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a69      	ldr	r2, [pc, #420]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b67      	ldr	r3, [pc, #412]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a66      	ldr	r2, [pc, #408]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	e01c      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d10c      	bne.n	80017ba <HAL_RCC_OscConfig+0x356>
 80017a0:	4b61      	ldr	r3, [pc, #388]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a60      	ldr	r2, [pc, #384]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	e00b      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 80017ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a5a      	ldr	r2, [pc, #360]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	4b58      	ldr	r3, [pc, #352]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a57      	ldr	r2, [pc, #348]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d015      	beq.n	8001806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff f87f 	bl	80008dc <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f87b 	bl	80008dc <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0b1      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ee      	beq.n	80017e2 <HAL_RCC_OscConfig+0x37e>
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff f869 	bl	80008dc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f865 	bl	80008dc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e09b      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	4b40      	ldr	r3, [pc, #256]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ee      	bne.n	800180e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001836:	4b3c      	ldr	r3, [pc, #240]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a3b      	ldr	r2, [pc, #236]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b36      	ldr	r3, [pc, #216]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d061      	beq.n	800191c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d146      	bne.n	80018ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f839 	bl	80008dc <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f835 	bl	80008dc <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e06d      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001880:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4921      	ldr	r1, [pc, #132]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a19      	ldr	r1, [r3, #32]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	430b      	orrs	r3, r1
 80018ba:	491b      	ldr	r1, [pc, #108]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f809 	bl	80008dc <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f805 	bl	80008dc <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e03d      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x46a>
 80018ec:	e035      	b.n	800195a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_RCC_OscConfig+0x4cc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe fff2 	bl	80008dc <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7fe ffee 	bl	80008dc <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e026      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x498>
 800191a:	e01e      	b.n	800195a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e019      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
 8001930:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_OscConfig+0x500>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	429a      	cmp	r2, r3
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0d0      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d910      	bls.n	80019ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b67      	ldr	r3, [pc, #412]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4965      	ldr	r1, [pc, #404]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b63      	ldr	r3, [pc, #396]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b8      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c4:	4b59      	ldr	r3, [pc, #356]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a58      	ldr	r2, [pc, #352]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a52      	ldr	r2, [pc, #328]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	494d      	ldr	r1, [pc, #308]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d040      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d115      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b41      	ldr	r3, [pc, #260]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e073      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b3d      	ldr	r3, [pc, #244]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06b      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4936      	ldr	r1, [pc, #216]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7fe ff40 	bl	80008dc <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a60:	f7fe ff3c 	bl	80008dc <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e053      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 020c 	and.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1eb      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d210      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0207 	bic.w	r2, r3, #7
 8001a9e:	4922      	ldr	r1, [pc, #136]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e032      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4916      	ldr	r1, [pc, #88]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490e      	ldr	r1, [pc, #56]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f821 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490a      	ldr	r1, [pc, #40]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <HAL_RCC_ClockConfig+0x1cc>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_RCC_ClockConfig+0x1d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fe9e 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40022000 	.word	0x40022000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	0800271c 	.word	0x0800271c
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b56:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x30>
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x36>
 8001b6a:	e027      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6e:	613b      	str	r3, [r7, #16]
      break;
 8001b70:	e027      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	0c9b      	lsrs	r3, r3, #18
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d010      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8a:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	0c5b      	lsrs	r3, r3, #17
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b96:	5cd3      	ldrb	r3, [r2, r3]
 8001b98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e004      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	613b      	str	r3, [r7, #16]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bbe:	613b      	str	r3, [r7, #16]
      break;
 8001bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc2:	693b      	ldr	r3, [r7, #16]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	007a1200 	.word	0x007a1200
 8001bd8:	0800272c 	.word	0x0800272c
 8001bdc:	0800273c 	.word	0x0800273c
 8001be0:	003d0900 	.word	0x003d0900

08001be4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <RCC_Delay+0x34>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <RCC_Delay+0x38>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0a5b      	lsrs	r3, r3, #9
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c00:	bf00      	nop
  }
  while (Delay --);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <RCC_Delay+0x1c>
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	10624dd3 	.word	0x10624dd3

08001c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d07d      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c40:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	61d3      	str	r3, [r2, #28]
 8001c58:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b46      	ldr	r3, [pc, #280]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d118      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c74:	4b43      	ldr	r3, [pc, #268]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a42      	ldr	r2, [pc, #264]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c80:	f7fe fe2c 	bl	80008dc <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	e008      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7fe fe28 	bl	80008dc <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e06d      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d02e      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d027      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ccc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cce:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cda:	4a29      	ldr	r2, [pc, #164]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d014      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7fe fdf7 	bl	80008dc <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7fe fdf3 	bl	80008dc <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e036      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ee      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d14:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4917      	ldr	r1, [pc, #92]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	4a13      	ldr	r2, [pc, #76]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	490b      	ldr	r1, [pc, #44]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4904      	ldr	r1, [pc, #16]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
 8001d88:	42420440 	.word	0x42420440

08001d8c <siprintf>:
 8001d8c:	b40e      	push	{r1, r2, r3}
 8001d8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001d92:	b500      	push	{lr}
 8001d94:	b09c      	sub	sp, #112	@ 0x70
 8001d96:	ab1d      	add	r3, sp, #116	@ 0x74
 8001d98:	9002      	str	r0, [sp, #8]
 8001d9a:	9006      	str	r0, [sp, #24]
 8001d9c:	9107      	str	r1, [sp, #28]
 8001d9e:	9104      	str	r1, [sp, #16]
 8001da0:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <siprintf+0x38>)
 8001da2:	4909      	ldr	r1, [pc, #36]	@ (8001dc8 <siprintf+0x3c>)
 8001da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001da8:	9105      	str	r1, [sp, #20]
 8001daa:	6800      	ldr	r0, [r0, #0]
 8001dac:	a902      	add	r1, sp, #8
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	f000 f992 	bl	80020d8 <_svfiprintf_r>
 8001db4:	2200      	movs	r2, #0
 8001db6:	9b02      	ldr	r3, [sp, #8]
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	b01c      	add	sp, #112	@ 0x70
 8001dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001dc0:	b003      	add	sp, #12
 8001dc2:	4770      	bx	lr
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	ffff0208 	.word	0xffff0208

08001dcc <memset>:
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4402      	add	r2, r0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <memset+0xa>
 8001dd4:	4770      	bx	lr
 8001dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dda:	e7f9      	b.n	8001dd0 <memset+0x4>

08001ddc <__errno>:
 8001ddc:	4b01      	ldr	r3, [pc, #4]	@ (8001de4 <__errno+0x8>)
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	2000000c 	.word	0x2000000c

08001de8 <__libc_init_array>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	2600      	movs	r6, #0
 8001dec:	4d0c      	ldr	r5, [pc, #48]	@ (8001e20 <__libc_init_array+0x38>)
 8001dee:	4c0d      	ldr	r4, [pc, #52]	@ (8001e24 <__libc_init_array+0x3c>)
 8001df0:	1b64      	subs	r4, r4, r5
 8001df2:	10a4      	asrs	r4, r4, #2
 8001df4:	42a6      	cmp	r6, r4
 8001df6:	d109      	bne.n	8001e0c <__libc_init_array+0x24>
 8001df8:	f000 fc78 	bl	80026ec <_init>
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	4d0a      	ldr	r5, [pc, #40]	@ (8001e28 <__libc_init_array+0x40>)
 8001e00:	4c0a      	ldr	r4, [pc, #40]	@ (8001e2c <__libc_init_array+0x44>)
 8001e02:	1b64      	subs	r4, r4, r5
 8001e04:	10a4      	asrs	r4, r4, #2
 8001e06:	42a6      	cmp	r6, r4
 8001e08:	d105      	bne.n	8001e16 <__libc_init_array+0x2e>
 8001e0a:	bd70      	pop	{r4, r5, r6, pc}
 8001e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e10:	4798      	blx	r3
 8001e12:	3601      	adds	r6, #1
 8001e14:	e7ee      	b.n	8001df4 <__libc_init_array+0xc>
 8001e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e1a:	4798      	blx	r3
 8001e1c:	3601      	adds	r6, #1
 8001e1e:	e7f2      	b.n	8001e06 <__libc_init_array+0x1e>
 8001e20:	08002774 	.word	0x08002774
 8001e24:	08002774 	.word	0x08002774
 8001e28:	08002774 	.word	0x08002774
 8001e2c:	08002778 	.word	0x08002778

08001e30 <__retarget_lock_acquire_recursive>:
 8001e30:	4770      	bx	lr

08001e32 <__retarget_lock_release_recursive>:
 8001e32:	4770      	bx	lr

08001e34 <_free_r>:
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4605      	mov	r5, r0
 8001e38:	2900      	cmp	r1, #0
 8001e3a:	d040      	beq.n	8001ebe <_free_r+0x8a>
 8001e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e40:	1f0c      	subs	r4, r1, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bfb8      	it	lt
 8001e46:	18e4      	addlt	r4, r4, r3
 8001e48:	f000 f8de 	bl	8002008 <__malloc_lock>
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <_free_r+0x8c>)
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	b933      	cbnz	r3, 8001e60 <_free_r+0x2c>
 8001e52:	6063      	str	r3, [r4, #4]
 8001e54:	6014      	str	r4, [r2, #0]
 8001e56:	4628      	mov	r0, r5
 8001e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e5c:	f000 b8da 	b.w	8002014 <__malloc_unlock>
 8001e60:	42a3      	cmp	r3, r4
 8001e62:	d908      	bls.n	8001e76 <_free_r+0x42>
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	1821      	adds	r1, r4, r0
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	bf01      	itttt	eq
 8001e6c:	6819      	ldreq	r1, [r3, #0]
 8001e6e:	685b      	ldreq	r3, [r3, #4]
 8001e70:	1809      	addeq	r1, r1, r0
 8001e72:	6021      	streq	r1, [r4, #0]
 8001e74:	e7ed      	b.n	8001e52 <_free_r+0x1e>
 8001e76:	461a      	mov	r2, r3
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	b10b      	cbz	r3, 8001e80 <_free_r+0x4c>
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	d9fa      	bls.n	8001e76 <_free_r+0x42>
 8001e80:	6811      	ldr	r1, [r2, #0]
 8001e82:	1850      	adds	r0, r2, r1
 8001e84:	42a0      	cmp	r0, r4
 8001e86:	d10b      	bne.n	8001ea0 <_free_r+0x6c>
 8001e88:	6820      	ldr	r0, [r4, #0]
 8001e8a:	4401      	add	r1, r0
 8001e8c:	1850      	adds	r0, r2, r1
 8001e8e:	4283      	cmp	r3, r0
 8001e90:	6011      	str	r1, [r2, #0]
 8001e92:	d1e0      	bne.n	8001e56 <_free_r+0x22>
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4408      	add	r0, r1
 8001e9a:	6010      	str	r0, [r2, #0]
 8001e9c:	6053      	str	r3, [r2, #4]
 8001e9e:	e7da      	b.n	8001e56 <_free_r+0x22>
 8001ea0:	d902      	bls.n	8001ea8 <_free_r+0x74>
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	602b      	str	r3, [r5, #0]
 8001ea6:	e7d6      	b.n	8001e56 <_free_r+0x22>
 8001ea8:	6820      	ldr	r0, [r4, #0]
 8001eaa:	1821      	adds	r1, r4, r0
 8001eac:	428b      	cmp	r3, r1
 8001eae:	bf01      	itttt	eq
 8001eb0:	6819      	ldreq	r1, [r3, #0]
 8001eb2:	685b      	ldreq	r3, [r3, #4]
 8001eb4:	1809      	addeq	r1, r1, r0
 8001eb6:	6021      	streq	r1, [r4, #0]
 8001eb8:	6063      	str	r3, [r4, #4]
 8001eba:	6054      	str	r4, [r2, #4]
 8001ebc:	e7cb      	b.n	8001e56 <_free_r+0x22>
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
 8001ec0:	20000200 	.word	0x20000200

08001ec4 <sbrk_aligned>:
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8001f04 <sbrk_aligned+0x40>)
 8001ec8:	460c      	mov	r4, r1
 8001eca:	6831      	ldr	r1, [r6, #0]
 8001ecc:	4605      	mov	r5, r0
 8001ece:	b911      	cbnz	r1, 8001ed6 <sbrk_aligned+0x12>
 8001ed0:	f000 fbaa 	bl	8002628 <_sbrk_r>
 8001ed4:	6030      	str	r0, [r6, #0]
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f000 fba5 	bl	8002628 <_sbrk_r>
 8001ede:	1c43      	adds	r3, r0, #1
 8001ee0:	d103      	bne.n	8001eea <sbrk_aligned+0x26>
 8001ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	bd70      	pop	{r4, r5, r6, pc}
 8001eea:	1cc4      	adds	r4, r0, #3
 8001eec:	f024 0403 	bic.w	r4, r4, #3
 8001ef0:	42a0      	cmp	r0, r4
 8001ef2:	d0f8      	beq.n	8001ee6 <sbrk_aligned+0x22>
 8001ef4:	1a21      	subs	r1, r4, r0
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	f000 fb96 	bl	8002628 <_sbrk_r>
 8001efc:	3001      	adds	r0, #1
 8001efe:	d1f2      	bne.n	8001ee6 <sbrk_aligned+0x22>
 8001f00:	e7ef      	b.n	8001ee2 <sbrk_aligned+0x1e>
 8001f02:	bf00      	nop
 8001f04:	200001fc 	.word	0x200001fc

08001f08 <_malloc_r>:
 8001f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f0c:	1ccd      	adds	r5, r1, #3
 8001f0e:	f025 0503 	bic.w	r5, r5, #3
 8001f12:	3508      	adds	r5, #8
 8001f14:	2d0c      	cmp	r5, #12
 8001f16:	bf38      	it	cc
 8001f18:	250c      	movcc	r5, #12
 8001f1a:	2d00      	cmp	r5, #0
 8001f1c:	4606      	mov	r6, r0
 8001f1e:	db01      	blt.n	8001f24 <_malloc_r+0x1c>
 8001f20:	42a9      	cmp	r1, r5
 8001f22:	d904      	bls.n	8001f2e <_malloc_r+0x26>
 8001f24:	230c      	movs	r3, #12
 8001f26:	6033      	str	r3, [r6, #0]
 8001f28:	2000      	movs	r0, #0
 8001f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002004 <_malloc_r+0xfc>
 8001f32:	f000 f869 	bl	8002008 <__malloc_lock>
 8001f36:	f8d8 3000 	ldr.w	r3, [r8]
 8001f3a:	461c      	mov	r4, r3
 8001f3c:	bb44      	cbnz	r4, 8001f90 <_malloc_r+0x88>
 8001f3e:	4629      	mov	r1, r5
 8001f40:	4630      	mov	r0, r6
 8001f42:	f7ff ffbf 	bl	8001ec4 <sbrk_aligned>
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	4604      	mov	r4, r0
 8001f4a:	d158      	bne.n	8001ffe <_malloc_r+0xf6>
 8001f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8001f50:	4627      	mov	r7, r4
 8001f52:	2f00      	cmp	r7, #0
 8001f54:	d143      	bne.n	8001fde <_malloc_r+0xd6>
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	d04b      	beq.n	8001ff2 <_malloc_r+0xea>
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	4639      	mov	r1, r7
 8001f5e:	4630      	mov	r0, r6
 8001f60:	eb04 0903 	add.w	r9, r4, r3
 8001f64:	f000 fb60 	bl	8002628 <_sbrk_r>
 8001f68:	4581      	cmp	r9, r0
 8001f6a:	d142      	bne.n	8001ff2 <_malloc_r+0xea>
 8001f6c:	6821      	ldr	r1, [r4, #0]
 8001f6e:	4630      	mov	r0, r6
 8001f70:	1a6d      	subs	r5, r5, r1
 8001f72:	4629      	mov	r1, r5
 8001f74:	f7ff ffa6 	bl	8001ec4 <sbrk_aligned>
 8001f78:	3001      	adds	r0, #1
 8001f7a:	d03a      	beq.n	8001ff2 <_malloc_r+0xea>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	442b      	add	r3, r5
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	f8d8 3000 	ldr.w	r3, [r8]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	bb62      	cbnz	r2, 8001fe4 <_malloc_r+0xdc>
 8001f8a:	f8c8 7000 	str.w	r7, [r8]
 8001f8e:	e00f      	b.n	8001fb0 <_malloc_r+0xa8>
 8001f90:	6822      	ldr	r2, [r4, #0]
 8001f92:	1b52      	subs	r2, r2, r5
 8001f94:	d420      	bmi.n	8001fd8 <_malloc_r+0xd0>
 8001f96:	2a0b      	cmp	r2, #11
 8001f98:	d917      	bls.n	8001fca <_malloc_r+0xc2>
 8001f9a:	1961      	adds	r1, r4, r5
 8001f9c:	42a3      	cmp	r3, r4
 8001f9e:	6025      	str	r5, [r4, #0]
 8001fa0:	bf18      	it	ne
 8001fa2:	6059      	strne	r1, [r3, #4]
 8001fa4:	6863      	ldr	r3, [r4, #4]
 8001fa6:	bf08      	it	eq
 8001fa8:	f8c8 1000 	streq.w	r1, [r8]
 8001fac:	5162      	str	r2, [r4, r5]
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	f000 f82f 	bl	8002014 <__malloc_unlock>
 8001fb6:	f104 000b 	add.w	r0, r4, #11
 8001fba:	1d23      	adds	r3, r4, #4
 8001fbc:	f020 0007 	bic.w	r0, r0, #7
 8001fc0:	1ac2      	subs	r2, r0, r3
 8001fc2:	bf1c      	itt	ne
 8001fc4:	1a1b      	subne	r3, r3, r0
 8001fc6:	50a3      	strne	r3, [r4, r2]
 8001fc8:	e7af      	b.n	8001f2a <_malloc_r+0x22>
 8001fca:	6862      	ldr	r2, [r4, #4]
 8001fcc:	42a3      	cmp	r3, r4
 8001fce:	bf0c      	ite	eq
 8001fd0:	f8c8 2000 	streq.w	r2, [r8]
 8001fd4:	605a      	strne	r2, [r3, #4]
 8001fd6:	e7eb      	b.n	8001fb0 <_malloc_r+0xa8>
 8001fd8:	4623      	mov	r3, r4
 8001fda:	6864      	ldr	r4, [r4, #4]
 8001fdc:	e7ae      	b.n	8001f3c <_malloc_r+0x34>
 8001fde:	463c      	mov	r4, r7
 8001fe0:	687f      	ldr	r7, [r7, #4]
 8001fe2:	e7b6      	b.n	8001f52 <_malloc_r+0x4a>
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	42a3      	cmp	r3, r4
 8001fea:	d1fb      	bne.n	8001fe4 <_malloc_r+0xdc>
 8001fec:	2300      	movs	r3, #0
 8001fee:	6053      	str	r3, [r2, #4]
 8001ff0:	e7de      	b.n	8001fb0 <_malloc_r+0xa8>
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	6033      	str	r3, [r6, #0]
 8001ff8:	f000 f80c 	bl	8002014 <__malloc_unlock>
 8001ffc:	e794      	b.n	8001f28 <_malloc_r+0x20>
 8001ffe:	6005      	str	r5, [r0, #0]
 8002000:	e7d6      	b.n	8001fb0 <_malloc_r+0xa8>
 8002002:	bf00      	nop
 8002004:	20000200 	.word	0x20000200

08002008 <__malloc_lock>:
 8002008:	4801      	ldr	r0, [pc, #4]	@ (8002010 <__malloc_lock+0x8>)
 800200a:	f7ff bf11 	b.w	8001e30 <__retarget_lock_acquire_recursive>
 800200e:	bf00      	nop
 8002010:	200001f8 	.word	0x200001f8

08002014 <__malloc_unlock>:
 8002014:	4801      	ldr	r0, [pc, #4]	@ (800201c <__malloc_unlock+0x8>)
 8002016:	f7ff bf0c 	b.w	8001e32 <__retarget_lock_release_recursive>
 800201a:	bf00      	nop
 800201c:	200001f8 	.word	0x200001f8

08002020 <__ssputs_r>:
 8002020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002024:	461f      	mov	r7, r3
 8002026:	688e      	ldr	r6, [r1, #8]
 8002028:	4682      	mov	sl, r0
 800202a:	42be      	cmp	r6, r7
 800202c:	460c      	mov	r4, r1
 800202e:	4690      	mov	r8, r2
 8002030:	680b      	ldr	r3, [r1, #0]
 8002032:	d82d      	bhi.n	8002090 <__ssputs_r+0x70>
 8002034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002038:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800203c:	d026      	beq.n	800208c <__ssputs_r+0x6c>
 800203e:	6965      	ldr	r5, [r4, #20]
 8002040:	6909      	ldr	r1, [r1, #16]
 8002042:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002046:	eba3 0901 	sub.w	r9, r3, r1
 800204a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800204e:	1c7b      	adds	r3, r7, #1
 8002050:	444b      	add	r3, r9
 8002052:	106d      	asrs	r5, r5, #1
 8002054:	429d      	cmp	r5, r3
 8002056:	bf38      	it	cc
 8002058:	461d      	movcc	r5, r3
 800205a:	0553      	lsls	r3, r2, #21
 800205c:	d527      	bpl.n	80020ae <__ssputs_r+0x8e>
 800205e:	4629      	mov	r1, r5
 8002060:	f7ff ff52 	bl	8001f08 <_malloc_r>
 8002064:	4606      	mov	r6, r0
 8002066:	b360      	cbz	r0, 80020c2 <__ssputs_r+0xa2>
 8002068:	464a      	mov	r2, r9
 800206a:	6921      	ldr	r1, [r4, #16]
 800206c:	f000 fafa 	bl	8002664 <memcpy>
 8002070:	89a3      	ldrh	r3, [r4, #12]
 8002072:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800207a:	81a3      	strh	r3, [r4, #12]
 800207c:	6126      	str	r6, [r4, #16]
 800207e:	444e      	add	r6, r9
 8002080:	6026      	str	r6, [r4, #0]
 8002082:	463e      	mov	r6, r7
 8002084:	6165      	str	r5, [r4, #20]
 8002086:	eba5 0509 	sub.w	r5, r5, r9
 800208a:	60a5      	str	r5, [r4, #8]
 800208c:	42be      	cmp	r6, r7
 800208e:	d900      	bls.n	8002092 <__ssputs_r+0x72>
 8002090:	463e      	mov	r6, r7
 8002092:	4632      	mov	r2, r6
 8002094:	4641      	mov	r1, r8
 8002096:	6820      	ldr	r0, [r4, #0]
 8002098:	f000 faac 	bl	80025f4 <memmove>
 800209c:	2000      	movs	r0, #0
 800209e:	68a3      	ldr	r3, [r4, #8]
 80020a0:	1b9b      	subs	r3, r3, r6
 80020a2:	60a3      	str	r3, [r4, #8]
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	4433      	add	r3, r6
 80020a8:	6023      	str	r3, [r4, #0]
 80020aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ae:	462a      	mov	r2, r5
 80020b0:	f000 fae6 	bl	8002680 <_realloc_r>
 80020b4:	4606      	mov	r6, r0
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d1e0      	bne.n	800207c <__ssputs_r+0x5c>
 80020ba:	4650      	mov	r0, sl
 80020bc:	6921      	ldr	r1, [r4, #16]
 80020be:	f7ff feb9 	bl	8001e34 <_free_r>
 80020c2:	230c      	movs	r3, #12
 80020c4:	f8ca 3000 	str.w	r3, [sl]
 80020c8:	89a3      	ldrh	r3, [r4, #12]
 80020ca:	f04f 30ff 	mov.w	r0, #4294967295
 80020ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020d2:	81a3      	strh	r3, [r4, #12]
 80020d4:	e7e9      	b.n	80020aa <__ssputs_r+0x8a>
	...

080020d8 <_svfiprintf_r>:
 80020d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020dc:	4698      	mov	r8, r3
 80020de:	898b      	ldrh	r3, [r1, #12]
 80020e0:	4607      	mov	r7, r0
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	460d      	mov	r5, r1
 80020e6:	4614      	mov	r4, r2
 80020e8:	b09d      	sub	sp, #116	@ 0x74
 80020ea:	d510      	bpl.n	800210e <_svfiprintf_r+0x36>
 80020ec:	690b      	ldr	r3, [r1, #16]
 80020ee:	b973      	cbnz	r3, 800210e <_svfiprintf_r+0x36>
 80020f0:	2140      	movs	r1, #64	@ 0x40
 80020f2:	f7ff ff09 	bl	8001f08 <_malloc_r>
 80020f6:	6028      	str	r0, [r5, #0]
 80020f8:	6128      	str	r0, [r5, #16]
 80020fa:	b930      	cbnz	r0, 800210a <_svfiprintf_r+0x32>
 80020fc:	230c      	movs	r3, #12
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	b01d      	add	sp, #116	@ 0x74
 8002106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800210a:	2340      	movs	r3, #64	@ 0x40
 800210c:	616b      	str	r3, [r5, #20]
 800210e:	2300      	movs	r3, #0
 8002110:	9309      	str	r3, [sp, #36]	@ 0x24
 8002112:	2320      	movs	r3, #32
 8002114:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002118:	2330      	movs	r3, #48	@ 0x30
 800211a:	f04f 0901 	mov.w	r9, #1
 800211e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002122:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80022bc <_svfiprintf_r+0x1e4>
 8002126:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800212a:	4623      	mov	r3, r4
 800212c:	469a      	mov	sl, r3
 800212e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002132:	b10a      	cbz	r2, 8002138 <_svfiprintf_r+0x60>
 8002134:	2a25      	cmp	r2, #37	@ 0x25
 8002136:	d1f9      	bne.n	800212c <_svfiprintf_r+0x54>
 8002138:	ebba 0b04 	subs.w	fp, sl, r4
 800213c:	d00b      	beq.n	8002156 <_svfiprintf_r+0x7e>
 800213e:	465b      	mov	r3, fp
 8002140:	4622      	mov	r2, r4
 8002142:	4629      	mov	r1, r5
 8002144:	4638      	mov	r0, r7
 8002146:	f7ff ff6b 	bl	8002020 <__ssputs_r>
 800214a:	3001      	adds	r0, #1
 800214c:	f000 80a7 	beq.w	800229e <_svfiprintf_r+0x1c6>
 8002150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002152:	445a      	add	r2, fp
 8002154:	9209      	str	r2, [sp, #36]	@ 0x24
 8002156:	f89a 3000 	ldrb.w	r3, [sl]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 809f 	beq.w	800229e <_svfiprintf_r+0x1c6>
 8002160:	2300      	movs	r3, #0
 8002162:	f04f 32ff 	mov.w	r2, #4294967295
 8002166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800216a:	f10a 0a01 	add.w	sl, sl, #1
 800216e:	9304      	str	r3, [sp, #16]
 8002170:	9307      	str	r3, [sp, #28]
 8002172:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002176:	931a      	str	r3, [sp, #104]	@ 0x68
 8002178:	4654      	mov	r4, sl
 800217a:	2205      	movs	r2, #5
 800217c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002180:	484e      	ldr	r0, [pc, #312]	@ (80022bc <_svfiprintf_r+0x1e4>)
 8002182:	f000 fa61 	bl	8002648 <memchr>
 8002186:	9a04      	ldr	r2, [sp, #16]
 8002188:	b9d8      	cbnz	r0, 80021c2 <_svfiprintf_r+0xea>
 800218a:	06d0      	lsls	r0, r2, #27
 800218c:	bf44      	itt	mi
 800218e:	2320      	movmi	r3, #32
 8002190:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002194:	0711      	lsls	r1, r2, #28
 8002196:	bf44      	itt	mi
 8002198:	232b      	movmi	r3, #43	@ 0x2b
 800219a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800219e:	f89a 3000 	ldrb.w	r3, [sl]
 80021a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80021a4:	d015      	beq.n	80021d2 <_svfiprintf_r+0xfa>
 80021a6:	4654      	mov	r4, sl
 80021a8:	2000      	movs	r0, #0
 80021aa:	f04f 0c0a 	mov.w	ip, #10
 80021ae:	9a07      	ldr	r2, [sp, #28]
 80021b0:	4621      	mov	r1, r4
 80021b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021b6:	3b30      	subs	r3, #48	@ 0x30
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d94b      	bls.n	8002254 <_svfiprintf_r+0x17c>
 80021bc:	b1b0      	cbz	r0, 80021ec <_svfiprintf_r+0x114>
 80021be:	9207      	str	r2, [sp, #28]
 80021c0:	e014      	b.n	80021ec <_svfiprintf_r+0x114>
 80021c2:	eba0 0308 	sub.w	r3, r0, r8
 80021c6:	fa09 f303 	lsl.w	r3, r9, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	46a2      	mov	sl, r4
 80021ce:	9304      	str	r3, [sp, #16]
 80021d0:	e7d2      	b.n	8002178 <_svfiprintf_r+0xa0>
 80021d2:	9b03      	ldr	r3, [sp, #12]
 80021d4:	1d19      	adds	r1, r3, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	9103      	str	r1, [sp, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bfbb      	ittet	lt
 80021de:	425b      	neglt	r3, r3
 80021e0:	f042 0202 	orrlt.w	r2, r2, #2
 80021e4:	9307      	strge	r3, [sp, #28]
 80021e6:	9307      	strlt	r3, [sp, #28]
 80021e8:	bfb8      	it	lt
 80021ea:	9204      	strlt	r2, [sp, #16]
 80021ec:	7823      	ldrb	r3, [r4, #0]
 80021ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80021f0:	d10a      	bne.n	8002208 <_svfiprintf_r+0x130>
 80021f2:	7863      	ldrb	r3, [r4, #1]
 80021f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80021f6:	d132      	bne.n	800225e <_svfiprintf_r+0x186>
 80021f8:	9b03      	ldr	r3, [sp, #12]
 80021fa:	3402      	adds	r4, #2
 80021fc:	1d1a      	adds	r2, r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	9203      	str	r2, [sp, #12]
 8002202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002206:	9305      	str	r3, [sp, #20]
 8002208:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80022c0 <_svfiprintf_r+0x1e8>
 800220c:	2203      	movs	r2, #3
 800220e:	4650      	mov	r0, sl
 8002210:	7821      	ldrb	r1, [r4, #0]
 8002212:	f000 fa19 	bl	8002648 <memchr>
 8002216:	b138      	cbz	r0, 8002228 <_svfiprintf_r+0x150>
 8002218:	2240      	movs	r2, #64	@ 0x40
 800221a:	9b04      	ldr	r3, [sp, #16]
 800221c:	eba0 000a 	sub.w	r0, r0, sl
 8002220:	4082      	lsls	r2, r0
 8002222:	4313      	orrs	r3, r2
 8002224:	3401      	adds	r4, #1
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800222c:	2206      	movs	r2, #6
 800222e:	4825      	ldr	r0, [pc, #148]	@ (80022c4 <_svfiprintf_r+0x1ec>)
 8002230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002234:	f000 fa08 	bl	8002648 <memchr>
 8002238:	2800      	cmp	r0, #0
 800223a:	d036      	beq.n	80022aa <_svfiprintf_r+0x1d2>
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <_svfiprintf_r+0x1f0>)
 800223e:	bb1b      	cbnz	r3, 8002288 <_svfiprintf_r+0x1b0>
 8002240:	9b03      	ldr	r3, [sp, #12]
 8002242:	3307      	adds	r3, #7
 8002244:	f023 0307 	bic.w	r3, r3, #7
 8002248:	3308      	adds	r3, #8
 800224a:	9303      	str	r3, [sp, #12]
 800224c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800224e:	4433      	add	r3, r6
 8002250:	9309      	str	r3, [sp, #36]	@ 0x24
 8002252:	e76a      	b.n	800212a <_svfiprintf_r+0x52>
 8002254:	460c      	mov	r4, r1
 8002256:	2001      	movs	r0, #1
 8002258:	fb0c 3202 	mla	r2, ip, r2, r3
 800225c:	e7a8      	b.n	80021b0 <_svfiprintf_r+0xd8>
 800225e:	2300      	movs	r3, #0
 8002260:	f04f 0c0a 	mov.w	ip, #10
 8002264:	4619      	mov	r1, r3
 8002266:	3401      	adds	r4, #1
 8002268:	9305      	str	r3, [sp, #20]
 800226a:	4620      	mov	r0, r4
 800226c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002270:	3a30      	subs	r2, #48	@ 0x30
 8002272:	2a09      	cmp	r2, #9
 8002274:	d903      	bls.n	800227e <_svfiprintf_r+0x1a6>
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0c6      	beq.n	8002208 <_svfiprintf_r+0x130>
 800227a:	9105      	str	r1, [sp, #20]
 800227c:	e7c4      	b.n	8002208 <_svfiprintf_r+0x130>
 800227e:	4604      	mov	r4, r0
 8002280:	2301      	movs	r3, #1
 8002282:	fb0c 2101 	mla	r1, ip, r1, r2
 8002286:	e7f0      	b.n	800226a <_svfiprintf_r+0x192>
 8002288:	ab03      	add	r3, sp, #12
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	462a      	mov	r2, r5
 800228e:	4638      	mov	r0, r7
 8002290:	4b0e      	ldr	r3, [pc, #56]	@ (80022cc <_svfiprintf_r+0x1f4>)
 8002292:	a904      	add	r1, sp, #16
 8002294:	f3af 8000 	nop.w
 8002298:	1c42      	adds	r2, r0, #1
 800229a:	4606      	mov	r6, r0
 800229c:	d1d6      	bne.n	800224c <_svfiprintf_r+0x174>
 800229e:	89ab      	ldrh	r3, [r5, #12]
 80022a0:	065b      	lsls	r3, r3, #25
 80022a2:	f53f af2d 	bmi.w	8002100 <_svfiprintf_r+0x28>
 80022a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80022a8:	e72c      	b.n	8002104 <_svfiprintf_r+0x2c>
 80022aa:	ab03      	add	r3, sp, #12
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	462a      	mov	r2, r5
 80022b0:	4638      	mov	r0, r7
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <_svfiprintf_r+0x1f4>)
 80022b4:	a904      	add	r1, sp, #16
 80022b6:	f000 f87d 	bl	80023b4 <_printf_i>
 80022ba:	e7ed      	b.n	8002298 <_svfiprintf_r+0x1c0>
 80022bc:	0800273e 	.word	0x0800273e
 80022c0:	08002744 	.word	0x08002744
 80022c4:	08002748 	.word	0x08002748
 80022c8:	00000000 	.word	0x00000000
 80022cc:	08002021 	.word	0x08002021

080022d0 <_printf_common>:
 80022d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d4:	4616      	mov	r6, r2
 80022d6:	4698      	mov	r8, r3
 80022d8:	688a      	ldr	r2, [r1, #8]
 80022da:	690b      	ldr	r3, [r1, #16]
 80022dc:	4607      	mov	r7, r0
 80022de:	4293      	cmp	r3, r2
 80022e0:	bfb8      	it	lt
 80022e2:	4613      	movlt	r3, r2
 80022e4:	6033      	str	r3, [r6, #0]
 80022e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80022ea:	460c      	mov	r4, r1
 80022ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80022f0:	b10a      	cbz	r2, 80022f6 <_printf_common+0x26>
 80022f2:	3301      	adds	r3, #1
 80022f4:	6033      	str	r3, [r6, #0]
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	0699      	lsls	r1, r3, #26
 80022fa:	bf42      	ittt	mi
 80022fc:	6833      	ldrmi	r3, [r6, #0]
 80022fe:	3302      	addmi	r3, #2
 8002300:	6033      	strmi	r3, [r6, #0]
 8002302:	6825      	ldr	r5, [r4, #0]
 8002304:	f015 0506 	ands.w	r5, r5, #6
 8002308:	d106      	bne.n	8002318 <_printf_common+0x48>
 800230a:	f104 0a19 	add.w	sl, r4, #25
 800230e:	68e3      	ldr	r3, [r4, #12]
 8002310:	6832      	ldr	r2, [r6, #0]
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	42ab      	cmp	r3, r5
 8002316:	dc2b      	bgt.n	8002370 <_printf_common+0xa0>
 8002318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800231c:	6822      	ldr	r2, [r4, #0]
 800231e:	3b00      	subs	r3, #0
 8002320:	bf18      	it	ne
 8002322:	2301      	movne	r3, #1
 8002324:	0692      	lsls	r2, r2, #26
 8002326:	d430      	bmi.n	800238a <_printf_common+0xba>
 8002328:	4641      	mov	r1, r8
 800232a:	4638      	mov	r0, r7
 800232c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002330:	47c8      	blx	r9
 8002332:	3001      	adds	r0, #1
 8002334:	d023      	beq.n	800237e <_printf_common+0xae>
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	6922      	ldr	r2, [r4, #16]
 800233a:	f003 0306 	and.w	r3, r3, #6
 800233e:	2b04      	cmp	r3, #4
 8002340:	bf14      	ite	ne
 8002342:	2500      	movne	r5, #0
 8002344:	6833      	ldreq	r3, [r6, #0]
 8002346:	f04f 0600 	mov.w	r6, #0
 800234a:	bf08      	it	eq
 800234c:	68e5      	ldreq	r5, [r4, #12]
 800234e:	f104 041a 	add.w	r4, r4, #26
 8002352:	bf08      	it	eq
 8002354:	1aed      	subeq	r5, r5, r3
 8002356:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800235a:	bf08      	it	eq
 800235c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002360:	4293      	cmp	r3, r2
 8002362:	bfc4      	itt	gt
 8002364:	1a9b      	subgt	r3, r3, r2
 8002366:	18ed      	addgt	r5, r5, r3
 8002368:	42b5      	cmp	r5, r6
 800236a:	d11a      	bne.n	80023a2 <_printf_common+0xd2>
 800236c:	2000      	movs	r0, #0
 800236e:	e008      	b.n	8002382 <_printf_common+0xb2>
 8002370:	2301      	movs	r3, #1
 8002372:	4652      	mov	r2, sl
 8002374:	4641      	mov	r1, r8
 8002376:	4638      	mov	r0, r7
 8002378:	47c8      	blx	r9
 800237a:	3001      	adds	r0, #1
 800237c:	d103      	bne.n	8002386 <_printf_common+0xb6>
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002386:	3501      	adds	r5, #1
 8002388:	e7c1      	b.n	800230e <_printf_common+0x3e>
 800238a:	2030      	movs	r0, #48	@ 0x30
 800238c:	18e1      	adds	r1, r4, r3
 800238e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002398:	4422      	add	r2, r4
 800239a:	3302      	adds	r3, #2
 800239c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023a0:	e7c2      	b.n	8002328 <_printf_common+0x58>
 80023a2:	2301      	movs	r3, #1
 80023a4:	4622      	mov	r2, r4
 80023a6:	4641      	mov	r1, r8
 80023a8:	4638      	mov	r0, r7
 80023aa:	47c8      	blx	r9
 80023ac:	3001      	adds	r0, #1
 80023ae:	d0e6      	beq.n	800237e <_printf_common+0xae>
 80023b0:	3601      	adds	r6, #1
 80023b2:	e7d9      	b.n	8002368 <_printf_common+0x98>

080023b4 <_printf_i>:
 80023b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023b8:	7e0f      	ldrb	r7, [r1, #24]
 80023ba:	4691      	mov	r9, r2
 80023bc:	2f78      	cmp	r7, #120	@ 0x78
 80023be:	4680      	mov	r8, r0
 80023c0:	460c      	mov	r4, r1
 80023c2:	469a      	mov	sl, r3
 80023c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80023c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80023ca:	d807      	bhi.n	80023dc <_printf_i+0x28>
 80023cc:	2f62      	cmp	r7, #98	@ 0x62
 80023ce:	d80a      	bhi.n	80023e6 <_printf_i+0x32>
 80023d0:	2f00      	cmp	r7, #0
 80023d2:	f000 80d3 	beq.w	800257c <_printf_i+0x1c8>
 80023d6:	2f58      	cmp	r7, #88	@ 0x58
 80023d8:	f000 80ba 	beq.w	8002550 <_printf_i+0x19c>
 80023dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80023e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80023e4:	e03a      	b.n	800245c <_printf_i+0xa8>
 80023e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80023ea:	2b15      	cmp	r3, #21
 80023ec:	d8f6      	bhi.n	80023dc <_printf_i+0x28>
 80023ee:	a101      	add	r1, pc, #4	@ (adr r1, 80023f4 <_printf_i+0x40>)
 80023f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023f4:	0800244d 	.word	0x0800244d
 80023f8:	08002461 	.word	0x08002461
 80023fc:	080023dd 	.word	0x080023dd
 8002400:	080023dd 	.word	0x080023dd
 8002404:	080023dd 	.word	0x080023dd
 8002408:	080023dd 	.word	0x080023dd
 800240c:	08002461 	.word	0x08002461
 8002410:	080023dd 	.word	0x080023dd
 8002414:	080023dd 	.word	0x080023dd
 8002418:	080023dd 	.word	0x080023dd
 800241c:	080023dd 	.word	0x080023dd
 8002420:	08002563 	.word	0x08002563
 8002424:	0800248b 	.word	0x0800248b
 8002428:	0800251d 	.word	0x0800251d
 800242c:	080023dd 	.word	0x080023dd
 8002430:	080023dd 	.word	0x080023dd
 8002434:	08002585 	.word	0x08002585
 8002438:	080023dd 	.word	0x080023dd
 800243c:	0800248b 	.word	0x0800248b
 8002440:	080023dd 	.word	0x080023dd
 8002444:	080023dd 	.word	0x080023dd
 8002448:	08002525 	.word	0x08002525
 800244c:	6833      	ldr	r3, [r6, #0]
 800244e:	1d1a      	adds	r2, r3, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6032      	str	r2, [r6, #0]
 8002454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800245c:	2301      	movs	r3, #1
 800245e:	e09e      	b.n	800259e <_printf_i+0x1ea>
 8002460:	6833      	ldr	r3, [r6, #0]
 8002462:	6820      	ldr	r0, [r4, #0]
 8002464:	1d19      	adds	r1, r3, #4
 8002466:	6031      	str	r1, [r6, #0]
 8002468:	0606      	lsls	r6, r0, #24
 800246a:	d501      	bpl.n	8002470 <_printf_i+0xbc>
 800246c:	681d      	ldr	r5, [r3, #0]
 800246e:	e003      	b.n	8002478 <_printf_i+0xc4>
 8002470:	0645      	lsls	r5, r0, #25
 8002472:	d5fb      	bpl.n	800246c <_printf_i+0xb8>
 8002474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002478:	2d00      	cmp	r5, #0
 800247a:	da03      	bge.n	8002484 <_printf_i+0xd0>
 800247c:	232d      	movs	r3, #45	@ 0x2d
 800247e:	426d      	negs	r5, r5
 8002480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002484:	230a      	movs	r3, #10
 8002486:	4859      	ldr	r0, [pc, #356]	@ (80025ec <_printf_i+0x238>)
 8002488:	e011      	b.n	80024ae <_printf_i+0xfa>
 800248a:	6821      	ldr	r1, [r4, #0]
 800248c:	6833      	ldr	r3, [r6, #0]
 800248e:	0608      	lsls	r0, r1, #24
 8002490:	f853 5b04 	ldr.w	r5, [r3], #4
 8002494:	d402      	bmi.n	800249c <_printf_i+0xe8>
 8002496:	0649      	lsls	r1, r1, #25
 8002498:	bf48      	it	mi
 800249a:	b2ad      	uxthmi	r5, r5
 800249c:	2f6f      	cmp	r7, #111	@ 0x6f
 800249e:	6033      	str	r3, [r6, #0]
 80024a0:	bf14      	ite	ne
 80024a2:	230a      	movne	r3, #10
 80024a4:	2308      	moveq	r3, #8
 80024a6:	4851      	ldr	r0, [pc, #324]	@ (80025ec <_printf_i+0x238>)
 80024a8:	2100      	movs	r1, #0
 80024aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80024ae:	6866      	ldr	r6, [r4, #4]
 80024b0:	2e00      	cmp	r6, #0
 80024b2:	bfa8      	it	ge
 80024b4:	6821      	ldrge	r1, [r4, #0]
 80024b6:	60a6      	str	r6, [r4, #8]
 80024b8:	bfa4      	itt	ge
 80024ba:	f021 0104 	bicge.w	r1, r1, #4
 80024be:	6021      	strge	r1, [r4, #0]
 80024c0:	b90d      	cbnz	r5, 80024c6 <_printf_i+0x112>
 80024c2:	2e00      	cmp	r6, #0
 80024c4:	d04b      	beq.n	800255e <_printf_i+0x1aa>
 80024c6:	4616      	mov	r6, r2
 80024c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80024cc:	fb03 5711 	mls	r7, r3, r1, r5
 80024d0:	5dc7      	ldrb	r7, [r0, r7]
 80024d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024d6:	462f      	mov	r7, r5
 80024d8:	42bb      	cmp	r3, r7
 80024da:	460d      	mov	r5, r1
 80024dc:	d9f4      	bls.n	80024c8 <_printf_i+0x114>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d10b      	bne.n	80024fa <_printf_i+0x146>
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	07df      	lsls	r7, r3, #31
 80024e6:	d508      	bpl.n	80024fa <_printf_i+0x146>
 80024e8:	6923      	ldr	r3, [r4, #16]
 80024ea:	6861      	ldr	r1, [r4, #4]
 80024ec:	4299      	cmp	r1, r3
 80024ee:	bfde      	ittt	le
 80024f0:	2330      	movle	r3, #48	@ 0x30
 80024f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80024f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80024fa:	1b92      	subs	r2, r2, r6
 80024fc:	6122      	str	r2, [r4, #16]
 80024fe:	464b      	mov	r3, r9
 8002500:	4621      	mov	r1, r4
 8002502:	4640      	mov	r0, r8
 8002504:	f8cd a000 	str.w	sl, [sp]
 8002508:	aa03      	add	r2, sp, #12
 800250a:	f7ff fee1 	bl	80022d0 <_printf_common>
 800250e:	3001      	adds	r0, #1
 8002510:	d14a      	bne.n	80025a8 <_printf_i+0x1f4>
 8002512:	f04f 30ff 	mov.w	r0, #4294967295
 8002516:	b004      	add	sp, #16
 8002518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	f043 0320 	orr.w	r3, r3, #32
 8002522:	6023      	str	r3, [r4, #0]
 8002524:	2778      	movs	r7, #120	@ 0x78
 8002526:	4832      	ldr	r0, [pc, #200]	@ (80025f0 <_printf_i+0x23c>)
 8002528:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800252c:	6823      	ldr	r3, [r4, #0]
 800252e:	6831      	ldr	r1, [r6, #0]
 8002530:	061f      	lsls	r7, r3, #24
 8002532:	f851 5b04 	ldr.w	r5, [r1], #4
 8002536:	d402      	bmi.n	800253e <_printf_i+0x18a>
 8002538:	065f      	lsls	r7, r3, #25
 800253a:	bf48      	it	mi
 800253c:	b2ad      	uxthmi	r5, r5
 800253e:	6031      	str	r1, [r6, #0]
 8002540:	07d9      	lsls	r1, r3, #31
 8002542:	bf44      	itt	mi
 8002544:	f043 0320 	orrmi.w	r3, r3, #32
 8002548:	6023      	strmi	r3, [r4, #0]
 800254a:	b11d      	cbz	r5, 8002554 <_printf_i+0x1a0>
 800254c:	2310      	movs	r3, #16
 800254e:	e7ab      	b.n	80024a8 <_printf_i+0xf4>
 8002550:	4826      	ldr	r0, [pc, #152]	@ (80025ec <_printf_i+0x238>)
 8002552:	e7e9      	b.n	8002528 <_printf_i+0x174>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	f023 0320 	bic.w	r3, r3, #32
 800255a:	6023      	str	r3, [r4, #0]
 800255c:	e7f6      	b.n	800254c <_printf_i+0x198>
 800255e:	4616      	mov	r6, r2
 8002560:	e7bd      	b.n	80024de <_printf_i+0x12a>
 8002562:	6833      	ldr	r3, [r6, #0]
 8002564:	6825      	ldr	r5, [r4, #0]
 8002566:	1d18      	adds	r0, r3, #4
 8002568:	6961      	ldr	r1, [r4, #20]
 800256a:	6030      	str	r0, [r6, #0]
 800256c:	062e      	lsls	r6, r5, #24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	d501      	bpl.n	8002576 <_printf_i+0x1c2>
 8002572:	6019      	str	r1, [r3, #0]
 8002574:	e002      	b.n	800257c <_printf_i+0x1c8>
 8002576:	0668      	lsls	r0, r5, #25
 8002578:	d5fb      	bpl.n	8002572 <_printf_i+0x1be>
 800257a:	8019      	strh	r1, [r3, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	4616      	mov	r6, r2
 8002580:	6123      	str	r3, [r4, #16]
 8002582:	e7bc      	b.n	80024fe <_printf_i+0x14a>
 8002584:	6833      	ldr	r3, [r6, #0]
 8002586:	2100      	movs	r1, #0
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	6032      	str	r2, [r6, #0]
 800258c:	681e      	ldr	r6, [r3, #0]
 800258e:	6862      	ldr	r2, [r4, #4]
 8002590:	4630      	mov	r0, r6
 8002592:	f000 f859 	bl	8002648 <memchr>
 8002596:	b108      	cbz	r0, 800259c <_printf_i+0x1e8>
 8002598:	1b80      	subs	r0, r0, r6
 800259a:	6060      	str	r0, [r4, #4]
 800259c:	6863      	ldr	r3, [r4, #4]
 800259e:	6123      	str	r3, [r4, #16]
 80025a0:	2300      	movs	r3, #0
 80025a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025a6:	e7aa      	b.n	80024fe <_printf_i+0x14a>
 80025a8:	4632      	mov	r2, r6
 80025aa:	4649      	mov	r1, r9
 80025ac:	4640      	mov	r0, r8
 80025ae:	6923      	ldr	r3, [r4, #16]
 80025b0:	47d0      	blx	sl
 80025b2:	3001      	adds	r0, #1
 80025b4:	d0ad      	beq.n	8002512 <_printf_i+0x15e>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	079b      	lsls	r3, r3, #30
 80025ba:	d413      	bmi.n	80025e4 <_printf_i+0x230>
 80025bc:	68e0      	ldr	r0, [r4, #12]
 80025be:	9b03      	ldr	r3, [sp, #12]
 80025c0:	4298      	cmp	r0, r3
 80025c2:	bfb8      	it	lt
 80025c4:	4618      	movlt	r0, r3
 80025c6:	e7a6      	b.n	8002516 <_printf_i+0x162>
 80025c8:	2301      	movs	r3, #1
 80025ca:	4632      	mov	r2, r6
 80025cc:	4649      	mov	r1, r9
 80025ce:	4640      	mov	r0, r8
 80025d0:	47d0      	blx	sl
 80025d2:	3001      	adds	r0, #1
 80025d4:	d09d      	beq.n	8002512 <_printf_i+0x15e>
 80025d6:	3501      	adds	r5, #1
 80025d8:	68e3      	ldr	r3, [r4, #12]
 80025da:	9903      	ldr	r1, [sp, #12]
 80025dc:	1a5b      	subs	r3, r3, r1
 80025de:	42ab      	cmp	r3, r5
 80025e0:	dcf2      	bgt.n	80025c8 <_printf_i+0x214>
 80025e2:	e7eb      	b.n	80025bc <_printf_i+0x208>
 80025e4:	2500      	movs	r5, #0
 80025e6:	f104 0619 	add.w	r6, r4, #25
 80025ea:	e7f5      	b.n	80025d8 <_printf_i+0x224>
 80025ec:	0800274f 	.word	0x0800274f
 80025f0:	08002760 	.word	0x08002760

080025f4 <memmove>:
 80025f4:	4288      	cmp	r0, r1
 80025f6:	b510      	push	{r4, lr}
 80025f8:	eb01 0402 	add.w	r4, r1, r2
 80025fc:	d902      	bls.n	8002604 <memmove+0x10>
 80025fe:	4284      	cmp	r4, r0
 8002600:	4623      	mov	r3, r4
 8002602:	d807      	bhi.n	8002614 <memmove+0x20>
 8002604:	1e43      	subs	r3, r0, #1
 8002606:	42a1      	cmp	r1, r4
 8002608:	d008      	beq.n	800261c <memmove+0x28>
 800260a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800260e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002612:	e7f8      	b.n	8002606 <memmove+0x12>
 8002614:	4601      	mov	r1, r0
 8002616:	4402      	add	r2, r0
 8002618:	428a      	cmp	r2, r1
 800261a:	d100      	bne.n	800261e <memmove+0x2a>
 800261c:	bd10      	pop	{r4, pc}
 800261e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002626:	e7f7      	b.n	8002618 <memmove+0x24>

08002628 <_sbrk_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	2300      	movs	r3, #0
 800262c:	4d05      	ldr	r5, [pc, #20]	@ (8002644 <_sbrk_r+0x1c>)
 800262e:	4604      	mov	r4, r0
 8002630:	4608      	mov	r0, r1
 8002632:	602b      	str	r3, [r5, #0]
 8002634:	f7fe f898 	bl	8000768 <_sbrk>
 8002638:	1c43      	adds	r3, r0, #1
 800263a:	d102      	bne.n	8002642 <_sbrk_r+0x1a>
 800263c:	682b      	ldr	r3, [r5, #0]
 800263e:	b103      	cbz	r3, 8002642 <_sbrk_r+0x1a>
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	bd38      	pop	{r3, r4, r5, pc}
 8002644:	200001f4 	.word	0x200001f4

08002648 <memchr>:
 8002648:	4603      	mov	r3, r0
 800264a:	b510      	push	{r4, lr}
 800264c:	b2c9      	uxtb	r1, r1
 800264e:	4402      	add	r2, r0
 8002650:	4293      	cmp	r3, r2
 8002652:	4618      	mov	r0, r3
 8002654:	d101      	bne.n	800265a <memchr+0x12>
 8002656:	2000      	movs	r0, #0
 8002658:	e003      	b.n	8002662 <memchr+0x1a>
 800265a:	7804      	ldrb	r4, [r0, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	428c      	cmp	r4, r1
 8002660:	d1f6      	bne.n	8002650 <memchr+0x8>
 8002662:	bd10      	pop	{r4, pc}

08002664 <memcpy>:
 8002664:	440a      	add	r2, r1
 8002666:	4291      	cmp	r1, r2
 8002668:	f100 33ff 	add.w	r3, r0, #4294967295
 800266c:	d100      	bne.n	8002670 <memcpy+0xc>
 800266e:	4770      	bx	lr
 8002670:	b510      	push	{r4, lr}
 8002672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002676:	4291      	cmp	r1, r2
 8002678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800267c:	d1f9      	bne.n	8002672 <memcpy+0xe>
 800267e:	bd10      	pop	{r4, pc}

08002680 <_realloc_r>:
 8002680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002684:	4680      	mov	r8, r0
 8002686:	4615      	mov	r5, r2
 8002688:	460c      	mov	r4, r1
 800268a:	b921      	cbnz	r1, 8002696 <_realloc_r+0x16>
 800268c:	4611      	mov	r1, r2
 800268e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002692:	f7ff bc39 	b.w	8001f08 <_malloc_r>
 8002696:	b92a      	cbnz	r2, 80026a4 <_realloc_r+0x24>
 8002698:	f7ff fbcc 	bl	8001e34 <_free_r>
 800269c:	2400      	movs	r4, #0
 800269e:	4620      	mov	r0, r4
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a4:	f000 f81a 	bl	80026dc <_malloc_usable_size_r>
 80026a8:	4285      	cmp	r5, r0
 80026aa:	4606      	mov	r6, r0
 80026ac:	d802      	bhi.n	80026b4 <_realloc_r+0x34>
 80026ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80026b2:	d8f4      	bhi.n	800269e <_realloc_r+0x1e>
 80026b4:	4629      	mov	r1, r5
 80026b6:	4640      	mov	r0, r8
 80026b8:	f7ff fc26 	bl	8001f08 <_malloc_r>
 80026bc:	4607      	mov	r7, r0
 80026be:	2800      	cmp	r0, #0
 80026c0:	d0ec      	beq.n	800269c <_realloc_r+0x1c>
 80026c2:	42b5      	cmp	r5, r6
 80026c4:	462a      	mov	r2, r5
 80026c6:	4621      	mov	r1, r4
 80026c8:	bf28      	it	cs
 80026ca:	4632      	movcs	r2, r6
 80026cc:	f7ff ffca 	bl	8002664 <memcpy>
 80026d0:	4621      	mov	r1, r4
 80026d2:	4640      	mov	r0, r8
 80026d4:	f7ff fbae 	bl	8001e34 <_free_r>
 80026d8:	463c      	mov	r4, r7
 80026da:	e7e0      	b.n	800269e <_realloc_r+0x1e>

080026dc <_malloc_usable_size_r>:
 80026dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026e0:	1f18      	subs	r0, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfbc      	itt	lt
 80026e6:	580b      	ldrlt	r3, [r1, r0]
 80026e8:	18c0      	addlt	r0, r0, r3
 80026ea:	4770      	bx	lr

080026ec <_init>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr

080026f8 <_fini>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr
